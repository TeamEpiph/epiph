/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/natestrauser:x-editable-bootstrap/lib/bootstrap-editable/js/bootstrap-editable.js                          //
// This file is in bare mode and is not in its own closure.                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*! X-editable - v1.5.1                                                                                                // 1
* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery                                                    // 2
* http://github.com/vitalets/x-editable                                                                                // 3
* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */                                                                  // 4
/**                                                                                                                    // 5
Form with single input element, two buttons and two states: normal/loading.                                            // 6
Applied as jQuery method to DIV tag (not to form tag!). This is because form can be in loading state when spinner shown.
Editableform is linked with one of input types, e.g. 'text', 'select' etc.                                             // 8
                                                                                                                       // 9
@class editableform                                                                                                    // 10
@uses text                                                                                                             // 11
@uses textarea                                                                                                         // 12
**/                                                                                                                    // 13
(function ($) {                                                                                                        // 14
    "use strict";                                                                                                      // 15
                                                                                                                       // 16
    var EditableForm = function (div, options) {                                                                       // 17
        this.options = $.extend({}, $.fn.editableform.defaults, options);                                              // 18
        this.$div = $(div); //div, containing form. Not form tag. Not editable-element.                                // 19
        if(!this.options.scope) {                                                                                      // 20
            this.options.scope = this;                                                                                 // 21
        }                                                                                                              // 22
        //nothing shown after init                                                                                     // 23
    };                                                                                                                 // 24
                                                                                                                       // 25
    EditableForm.prototype = {                                                                                         // 26
        constructor: EditableForm,                                                                                     // 27
        initInput: function() {  //called once                                                                         // 28
            //take input from options (as it is created in editable-element)                                           // 29
            this.input = this.options.input;                                                                           // 30
                                                                                                                       // 31
            //set initial value                                                                                        // 32
            //todo: may be add check: typeof str === 'string' ?                                                        // 33
            this.value = this.input.str2value(this.options.value);                                                     // 34
                                                                                                                       // 35
            //prerender: get input.$input                                                                              // 36
            this.input.prerender();                                                                                    // 37
        },                                                                                                             // 38
        initTemplate: function() {                                                                                     // 39
            this.$form = $($.fn.editableform.template);                                                                // 40
        },                                                                                                             // 41
        initButtons: function() {                                                                                      // 42
            var $btn = this.$form.find('.editable-buttons');                                                           // 43
            $btn.append($.fn.editableform.buttons);                                                                    // 44
            if(this.options.showbuttons === 'bottom') {                                                                // 45
                $btn.addClass('editable-buttons-bottom');                                                              // 46
            }                                                                                                          // 47
        },                                                                                                             // 48
        /**                                                                                                            // 49
        Renders editableform                                                                                           // 50
                                                                                                                       // 51
        @method render                                                                                                 // 52
        **/                                                                                                            // 53
        render: function() {                                                                                           // 54
            //init loader                                                                                              // 55
            this.$loading = $($.fn.editableform.loading);                                                              // 56
            this.$div.empty().append(this.$loading);                                                                   // 57
                                                                                                                       // 58
            //init form template and buttons                                                                           // 59
            this.initTemplate();                                                                                       // 60
            if(this.options.showbuttons) {                                                                             // 61
                this.initButtons();                                                                                    // 62
            } else {                                                                                                   // 63
                this.$form.find('.editable-buttons').remove();                                                         // 64
            }                                                                                                          // 65
                                                                                                                       // 66
            //show loading state                                                                                       // 67
            this.showLoading();                                                                                        // 68
                                                                                                                       // 69
            //flag showing is form now saving value to server.                                                         // 70
            //It is needed to wait when closing form.                                                                  // 71
            this.isSaving = false;                                                                                     // 72
                                                                                                                       // 73
            /**                                                                                                        // 74
            Fired when rendering starts                                                                                // 75
            @event rendering                                                                                           // 76
            @param {Object} event event object                                                                         // 77
            **/                                                                                                        // 78
            this.$div.triggerHandler('rendering');                                                                     // 79
                                                                                                                       // 80
            //init input                                                                                               // 81
            this.initInput();                                                                                          // 82
                                                                                                                       // 83
            //append input to form                                                                                     // 84
            this.$form.find('div.editable-input').append(this.input.$tpl);                                             // 85
                                                                                                                       // 86
            //append form to container                                                                                 // 87
            this.$div.append(this.$form);                                                                              // 88
                                                                                                                       // 89
            //render input                                                                                             // 90
            $.when(this.input.render())                                                                                // 91
            .then($.proxy(function () {                                                                                // 92
                //setup input to submit automatically when no buttons shown                                            // 93
                if(!this.options.showbuttons) {                                                                        // 94
                    this.input.autosubmit();                                                                           // 95
                }                                                                                                      // 96
                                                                                                                       // 97
                //attach 'cancel' handler                                                                              // 98
                this.$form.find('.editable-cancel').click($.proxy(this.cancel, this));                                 // 99
                                                                                                                       // 100
                if(this.input.error) {                                                                                 // 101
                    this.error(this.input.error);                                                                      // 102
                    this.$form.find('.editable-submit').attr('disabled', true);                                        // 103
                    this.input.$input.attr('disabled', true);                                                          // 104
                    //prevent form from submitting                                                                     // 105
                    this.$form.submit(function(e){ e.preventDefault(); });                                             // 106
                } else {                                                                                               // 107
                    this.error(false);                                                                                 // 108
                    this.input.$input.removeAttr('disabled');                                                          // 109
                    this.$form.find('.editable-submit').removeAttr('disabled');                                        // 110
                    var value = (this.value === null || this.value === undefined || this.value === '') ? this.options.defaultValue : this.value;
                    this.input.value2input(value);                                                                     // 112
                    //attach submit handler                                                                            // 113
                    this.$form.submit($.proxy(this.submit, this));                                                     // 114
                }                                                                                                      // 115
                                                                                                                       // 116
                /**                                                                                                    // 117
                Fired when form is rendered                                                                            // 118
                @event rendered                                                                                        // 119
                @param {Object} event event object                                                                     // 120
                **/                                                                                                    // 121
                this.$div.triggerHandler('rendered');                                                                  // 122
                                                                                                                       // 123
                this.showForm();                                                                                       // 124
                                                                                                                       // 125
                //call postrender method to perform actions required visibility of form                                // 126
                if(this.input.postrender) {                                                                            // 127
                    this.input.postrender();                                                                           // 128
                }                                                                                                      // 129
            }, this));                                                                                                 // 130
        },                                                                                                             // 131
        cancel: function() {                                                                                           // 132
            /**                                                                                                        // 133
            Fired when form was cancelled by user                                                                      // 134
            @event cancel                                                                                              // 135
            @param {Object} event event object                                                                         // 136
            **/                                                                                                        // 137
            this.$div.triggerHandler('cancel');                                                                        // 138
        },                                                                                                             // 139
        showLoading: function() {                                                                                      // 140
            var w, h;                                                                                                  // 141
            if(this.$form) {                                                                                           // 142
                //set loading size equal to form                                                                       // 143
                w = this.$form.outerWidth();                                                                           // 144
                h = this.$form.outerHeight();                                                                          // 145
                if(w) {                                                                                                // 146
                    this.$loading.width(w);                                                                            // 147
                }                                                                                                      // 148
                if(h) {                                                                                                // 149
                    this.$loading.height(h);                                                                           // 150
                }                                                                                                      // 151
                this.$form.hide();                                                                                     // 152
            } else {                                                                                                   // 153
                //stretch loading to fill container width                                                              // 154
                w = this.$loading.parent().width();                                                                    // 155
                if(w) {                                                                                                // 156
                    this.$loading.width(w);                                                                            // 157
                }                                                                                                      // 158
            }                                                                                                          // 159
            this.$loading.show();                                                                                      // 160
        },                                                                                                             // 161
                                                                                                                       // 162
        showForm: function(activate) {                                                                                 // 163
            this.$loading.hide();                                                                                      // 164
            this.$form.show();                                                                                         // 165
            if(activate !== false) {                                                                                   // 166
                this.input.activate();                                                                                 // 167
            }                                                                                                          // 168
            /**                                                                                                        // 169
            Fired when form is shown                                                                                   // 170
            @event show                                                                                                // 171
            @param {Object} event event object                                                                         // 172
            **/                                                                                                        // 173
            this.$div.triggerHandler('show');                                                                          // 174
        },                                                                                                             // 175
                                                                                                                       // 176
        error: function(msg) {                                                                                         // 177
            var $group = this.$form.find('.control-group'),                                                            // 178
                $block = this.$form.find('.editable-error-block'),                                                     // 179
                lines;                                                                                                 // 180
                                                                                                                       // 181
            if(msg === false) {                                                                                        // 182
                $group.removeClass($.fn.editableform.errorGroupClass);                                                 // 183
                $block.removeClass($.fn.editableform.errorBlockClass).empty().hide();                                  // 184
            } else {                                                                                                   // 185
                //convert newline to <br> for more pretty error display                                                // 186
                if(msg) {                                                                                              // 187
                    lines = (''+msg).split('\n');                                                                      // 188
                    for (var i = 0; i < lines.length; i++) {                                                           // 189
                        lines[i] = $('<div>').text(lines[i]).html();                                                   // 190
                    }                                                                                                  // 191
                    msg = lines.join('<br>');                                                                          // 192
                }                                                                                                      // 193
                $group.addClass($.fn.editableform.errorGroupClass);                                                    // 194
                $block.addClass($.fn.editableform.errorBlockClass).html(msg).show();                                   // 195
            }                                                                                                          // 196
        },                                                                                                             // 197
                                                                                                                       // 198
        submit: function(e) {                                                                                          // 199
            e.stopPropagation();                                                                                       // 200
            e.preventDefault();                                                                                        // 201
                                                                                                                       // 202
            //get new value from input                                                                                 // 203
            var newValue = this.input.input2value();                                                                   // 204
                                                                                                                       // 205
            //validation: if validate returns string or truthy value - means error                                     // 206
            //if returns object like {newValue: '...'} => submitted value is reassigned to it                          // 207
            var error = this.validate(newValue);                                                                       // 208
            if ($.type(error) === 'object' && error.newValue !== undefined) {                                          // 209
                newValue = error.newValue;                                                                             // 210
                this.input.value2input(newValue);                                                                      // 211
                if(typeof error.msg === 'string') {                                                                    // 212
                    this.error(error.msg);                                                                             // 213
                    this.showForm();                                                                                   // 214
                    return;                                                                                            // 215
                }                                                                                                      // 216
            } else if (error) {                                                                                        // 217
                this.error(error);                                                                                     // 218
                this.showForm();                                                                                       // 219
                return;                                                                                                // 220
            }                                                                                                          // 221
                                                                                                                       // 222
            //if value not changed --> trigger 'nochange' event and return                                             // 223
            /*jslint eqeq: true*/                                                                                      // 224
            if (!this.options.savenochange && this.input.value2str(newValue) == this.input.value2str(this.value)) {    // 225
            /*jslint eqeq: false*/                                                                                     // 226
                /**                                                                                                    // 227
                Fired when value not changed but form is submitted. Requires savenochange = false.                     // 228
                @event nochange                                                                                        // 229
                @param {Object} event event object                                                                     // 230
                **/                                                                                                    // 231
                this.$div.triggerHandler('nochange');                                                                  // 232
                return;                                                                                                // 233
            }                                                                                                          // 234
                                                                                                                       // 235
            //convert value for submitting to server                                                                   // 236
            var submitValue = this.input.value2submit(newValue);                                                       // 237
                                                                                                                       // 238
            this.isSaving = true;                                                                                      // 239
                                                                                                                       // 240
            //sending data to server                                                                                   // 241
            $.when(this.save(submitValue))                                                                             // 242
            .done($.proxy(function(response) {                                                                         // 243
                this.isSaving = false;                                                                                 // 244
                                                                                                                       // 245
                //run success callback                                                                                 // 246
                var res = typeof this.options.success === 'function' ? this.options.success.call(this.options.scope, response, newValue) : null;
                                                                                                                       // 248
                //if success callback returns false --> keep form open and do not activate input                       // 249
                if(res === false) {                                                                                    // 250
                    this.error(false);                                                                                 // 251
                    this.showForm(false);                                                                              // 252
                    return;                                                                                            // 253
                }                                                                                                      // 254
                                                                                                                       // 255
                //if success callback returns string -->  keep form open, show error and activate input                // 256
                if(typeof res === 'string') {                                                                          // 257
                    this.error(res);                                                                                   // 258
                    this.showForm();                                                                                   // 259
                    return;                                                                                            // 260
                }                                                                                                      // 261
                                                                                                                       // 262
                //if success callback returns object like {newValue: <something>} --> use that value instead of submitted
                //it is usefull if you want to chnage value in url-function                                            // 264
                if(res && typeof res === 'object' && res.hasOwnProperty('newValue')) {                                 // 265
                    newValue = res.newValue;                                                                           // 266
                }                                                                                                      // 267
                                                                                                                       // 268
                //clear error message                                                                                  // 269
                this.error(false);                                                                                     // 270
                this.value = newValue;                                                                                 // 271
                /**                                                                                                    // 272
                Fired when form is submitted                                                                           // 273
                @event save                                                                                            // 274
                @param {Object} event event object                                                                     // 275
                @param {Object} params additional params                                                               // 276
                @param {mixed} params.newValue raw new value                                                           // 277
                @param {mixed} params.submitValue submitted value as string                                            // 278
                @param {Object} params.response ajax response                                                          // 279
                                                                                                                       // 280
                @example                                                                                               // 281
                $('#form-div').on('save'), function(e, params){                                                        // 282
                    if(params.newValue === 'username') {...}                                                           // 283
                });                                                                                                    // 284
                **/                                                                                                    // 285
                this.$div.triggerHandler('save', {newValue: newValue, submitValue: submitValue, response: response});  // 286
            }, this))                                                                                                  // 287
            .fail($.proxy(function(xhr) {                                                                              // 288
                this.isSaving = false;                                                                                 // 289
                                                                                                                       // 290
                var msg;                                                                                               // 291
                if(typeof this.options.error === 'function') {                                                         // 292
                    msg = this.options.error.call(this.options.scope, xhr, newValue);                                  // 293
                } else {                                                                                               // 294
                    msg = typeof xhr === 'string' ? xhr : xhr.responseText || xhr.statusText || 'Unknown error!';      // 295
                }                                                                                                      // 296
                                                                                                                       // 297
                this.error(msg);                                                                                       // 298
                this.showForm();                                                                                       // 299
            }, this));                                                                                                 // 300
        },                                                                                                             // 301
                                                                                                                       // 302
        save: function(submitValue) {                                                                                  // 303
            //try parse composite pk defined as json string in data-pk                                                 // 304
            this.options.pk = $.fn.editableutils.tryParseJson(this.options.pk, true);                                  // 305
                                                                                                                       // 306
            var pk = (typeof this.options.pk === 'function') ? this.options.pk.call(this.options.scope) : this.options.pk,
            /*                                                                                                         // 308
              send on server in following cases:                                                                       // 309
              1. url is function                                                                                       // 310
              2. url is string AND (pk defined OR send option = always)                                                // 311
            */                                                                                                         // 312
            send = !!(typeof this.options.url === 'function' || (this.options.url && ((this.options.send === 'always') || (this.options.send === 'auto' && pk !== null && pk !== undefined)))),
            params;                                                                                                    // 314
                                                                                                                       // 315
            if (send) { //send to server                                                                               // 316
                this.showLoading();                                                                                    // 317
                                                                                                                       // 318
                //standard params                                                                                      // 319
                params = {                                                                                             // 320
                    name: this.options.name || '',                                                                     // 321
                    value: submitValue,                                                                                // 322
                    pk: pk                                                                                             // 323
                };                                                                                                     // 324
                                                                                                                       // 325
                //additional params                                                                                    // 326
                if(typeof this.options.params === 'function') {                                                        // 327
                    params = this.options.params.call(this.options.scope, params);                                     // 328
                } else {                                                                                               // 329
                    //try parse json in single quotes (from data-params attribute)                                     // 330
                    this.options.params = $.fn.editableutils.tryParseJson(this.options.params, true);                  // 331
                    $.extend(params, this.options.params);                                                             // 332
                }                                                                                                      // 333
                                                                                                                       // 334
                if(typeof this.options.url === 'function') { //user's function                                         // 335
                    return this.options.url.call(this.options.scope, params);                                          // 336
                } else {                                                                                               // 337
                    //send ajax to server and return deferred object                                                   // 338
                    return $.ajax($.extend({                                                                           // 339
                        url     : this.options.url,                                                                    // 340
                        data    : params,                                                                              // 341
                        type    : 'POST'                                                                               // 342
                    }, this.options.ajaxOptions));                                                                     // 343
                }                                                                                                      // 344
            }                                                                                                          // 345
        },                                                                                                             // 346
                                                                                                                       // 347
        validate: function (value) {                                                                                   // 348
            if (value === undefined) {                                                                                 // 349
                value = this.value;                                                                                    // 350
            }                                                                                                          // 351
            if (typeof this.options.validate === 'function') {                                                         // 352
                return this.options.validate.call(this.options.scope, value);                                          // 353
            }                                                                                                          // 354
        },                                                                                                             // 355
                                                                                                                       // 356
        option: function(key, value) {                                                                                 // 357
            if(key in this.options) {                                                                                  // 358
                this.options[key] = value;                                                                             // 359
            }                                                                                                          // 360
                                                                                                                       // 361
            if(key === 'value') {                                                                                      // 362
                this.setValue(value);                                                                                  // 363
            }                                                                                                          // 364
                                                                                                                       // 365
            //do not pass option to input as it is passed in editable-element                                          // 366
        },                                                                                                             // 367
                                                                                                                       // 368
        setValue: function(value, convertStr) {                                                                        // 369
            if(convertStr) {                                                                                           // 370
                this.value = this.input.str2value(value);                                                              // 371
            } else {                                                                                                   // 372
                this.value = value;                                                                                    // 373
            }                                                                                                          // 374
                                                                                                                       // 375
            //if form is visible, update input                                                                         // 376
            if(this.$form && this.$form.is(':visible')) {                                                              // 377
                this.input.value2input(this.value);                                                                    // 378
            }                                                                                                          // 379
        }                                                                                                              // 380
    };                                                                                                                 // 381
                                                                                                                       // 382
    /*                                                                                                                 // 383
    Initialize editableform. Applied to jQuery object.                                                                 // 384
                                                                                                                       // 385
    @method $().editableform(options)                                                                                  // 386
    @params {Object} options                                                                                           // 387
    @example                                                                                                           // 388
    var $form = $('&lt;div&gt;').editableform({                                                                        // 389
        type: 'text',                                                                                                  // 390
        name: 'username',                                                                                              // 391
        url: '/post',                                                                                                  // 392
        value: 'vitaliy'                                                                                               // 393
    });                                                                                                                // 394
                                                                                                                       // 395
    //to display form you should call 'render' method                                                                  // 396
    $form.editableform('render');                                                                                      // 397
    */                                                                                                                 // 398
    $.fn.editableform = function (option) {                                                                            // 399
        var args = arguments;                                                                                          // 400
        return this.each(function () {                                                                                 // 401
            var $this = $(this),                                                                                       // 402
            data = $this.data('editableform'),                                                                         // 403
            options = typeof option === 'object' && option;                                                            // 404
            if (!data) {                                                                                               // 405
                $this.data('editableform', (data = new EditableForm(this, options)));                                  // 406
            }                                                                                                          // 407
                                                                                                                       // 408
            if (typeof option === 'string') { //call method                                                            // 409
                data[option].apply(data, Array.prototype.slice.call(args, 1));                                         // 410
            }                                                                                                          // 411
        });                                                                                                            // 412
    };                                                                                                                 // 413
                                                                                                                       // 414
    //keep link to constructor to allow inheritance                                                                    // 415
    $.fn.editableform.Constructor = EditableForm;                                                                      // 416
                                                                                                                       // 417
    //defaults                                                                                                         // 418
    $.fn.editableform.defaults = {                                                                                     // 419
        /* see also defaults for input */                                                                              // 420
                                                                                                                       // 421
        /**                                                                                                            // 422
        Type of input. Can be <code>text|textarea|select|date|checklist</code>                                         // 423
                                                                                                                       // 424
        @property type                                                                                                 // 425
        @type string                                                                                                   // 426
        @default 'text'                                                                                                // 427
        **/                                                                                                            // 428
        type: 'text',                                                                                                  // 429
        /**                                                                                                            // 430
        Url for submit, e.g. <code>'/post'</code>                                                                      // 431
        If function - it will be called instead of ajax. Function should return deferred object to run fail/done callbacks.
                                                                                                                       // 433
        @property url                                                                                                  // 434
        @type string|function                                                                                          // 435
        @default null                                                                                                  // 436
        @example                                                                                                       // 437
        url: function(params) {                                                                                        // 438
            var d = new $.Deferred;                                                                                    // 439
            if(params.value === 'abc') {                                                                               // 440
                return d.reject('error message'); //returning error via deferred object                                // 441
            } else {                                                                                                   // 442
                //async saving data in js model                                                                        // 443
                someModel.asyncSaveMethod({                                                                            // 444
                   ...,                                                                                                // 445
                   success: function(){                                                                                // 446
                      d.resolve();                                                                                     // 447
                   }                                                                                                   // 448
                });                                                                                                    // 449
                return d.promise();                                                                                    // 450
            }                                                                                                          // 451
        }                                                                                                              // 452
        **/                                                                                                            // 453
        url:null,                                                                                                      // 454
        /**                                                                                                            // 455
        Additional params for submit. If defined as <code>object</code> - it is **appended** to original ajax data (pk, name and value).  
        If defined as <code>function</code> - returned object **overwrites** original ajax data.                       // 457
        @example                                                                                                       // 458
        params: function(params) {                                                                                     // 459
            //originally params contain pk, name and value                                                             // 460
            params.a = 1;                                                                                              // 461
            return params;                                                                                             // 462
        }                                                                                                              // 463
                                                                                                                       // 464
        @property params                                                                                               // 465
        @type object|function                                                                                          // 466
        @default null                                                                                                  // 467
        **/                                                                                                            // 468
        params:null,                                                                                                   // 469
        /**                                                                                                            // 470
        Name of field. Will be submitted on server. Can be taken from <code>id</code> attribute                        // 471
                                                                                                                       // 472
        @property name                                                                                                 // 473
        @type string                                                                                                   // 474
        @default null                                                                                                  // 475
        **/                                                                                                            // 476
        name: null,                                                                                                    // 477
        /**                                                                                                            // 478
        Primary key of editable object (e.g. record id in database). For composite keys use object, e.g. <code>{id: 1, lang: 'en'}</code>.
        Can be calculated dynamically via function.                                                                    // 480
                                                                                                                       // 481
        @property pk                                                                                                   // 482
        @type string|object|function                                                                                   // 483
        @default null                                                                                                  // 484
        **/                                                                                                            // 485
        pk: null,                                                                                                      // 486
        /**                                                                                                            // 487
        Initial value. If not defined - will be taken from element's content.                                          // 488
        For __select__ type should be defined (as it is ID of shown text).                                             // 489
                                                                                                                       // 490
        @property value                                                                                                // 491
        @type string|object                                                                                            // 492
        @default null                                                                                                  // 493
        **/                                                                                                            // 494
        value: null,                                                                                                   // 495
        /**                                                                                                            // 496
        Value that will be displayed in input if original field value is empty (`null|undefined|''`).                  // 497
                                                                                                                       // 498
        @property defaultValue                                                                                         // 499
        @type string|object                                                                                            // 500
        @default null                                                                                                  // 501
        @since 1.4.6                                                                                                   // 502
        **/                                                                                                            // 503
        defaultValue: null,                                                                                            // 504
        /**                                                                                                            // 505
        Strategy for sending data on server. Can be `auto|always|never`.                                               // 506
        When 'auto' data will be sent on server **only if pk and url defined**, otherwise new value will be stored locally.
                                                                                                                       // 508
        @property send                                                                                                 // 509
        @type string                                                                                                   // 510
        @default 'auto'                                                                                                // 511
        **/                                                                                                            // 512
        send: 'auto',                                                                                                  // 513
        /**                                                                                                            // 514
        Function for client-side validation. If returns string - means validation not passed and string showed as error.
        Since 1.5.1 you can modify submitted value by returning object from `validate`:                                // 516
        `{newValue: '...'}` or `{newValue: '...', msg: '...'}`                                                         // 517
                                                                                                                       // 518
        @property validate                                                                                             // 519
        @type function                                                                                                 // 520
        @default null                                                                                                  // 521
        @example                                                                                                       // 522
        validate: function(value) {                                                                                    // 523
            if($.trim(value) == '') {                                                                                  // 524
                return 'This field is required';                                                                       // 525
            }                                                                                                          // 526
        }                                                                                                              // 527
        **/                                                                                                            // 528
        validate: null,                                                                                                // 529
        /**                                                                                                            // 530
        Success callback. Called when value successfully sent on server and **response status = 200**.                 // 531
        Usefull to work with json response. For example, if your backend response can be <code>{success: true}</code>  // 532
        or <code>{success: false, msg: "server error"}</code> you can check it inside this callback.                   // 533
        If it returns **string** - means error occured and string is shown as error message.                           // 534
        If it returns **object like** <code>{newValue: &lt;something&gt;}</code> - it overwrites value, submitted by user.  
        Otherwise newValue simply rendered into element.                                                               // 536
                                                                                                                       // 537
        @property success                                                                                              // 538
        @type function                                                                                                 // 539
        @default null                                                                                                  // 540
        @example                                                                                                       // 541
        success: function(response, newValue) {                                                                        // 542
            if(!response.success) return response.msg;                                                                 // 543
        }                                                                                                              // 544
        **/                                                                                                            // 545
        success: null,                                                                                                 // 546
        /**                                                                                                            // 547
        Error callback. Called when request failed (response status != 200).                                           // 548
        Usefull when you want to parse error response and display a custom message.                                    // 549
        Must return **string** - the message to be displayed in the error block.                                       // 550
                                                                                                                       // 551
        @property error                                                                                                // 552
        @type function                                                                                                 // 553
        @default null                                                                                                  // 554
        @since 1.4.4                                                                                                   // 555
        @example                                                                                                       // 556
        error: function(response, newValue) {                                                                          // 557
            if(response.status === 500) {                                                                              // 558
                return 'Service unavailable. Please try later.';                                                       // 559
            } else {                                                                                                   // 560
                return response.responseText;                                                                          // 561
            }                                                                                                          // 562
        }                                                                                                              // 563
        **/                                                                                                            // 564
        error: null,                                                                                                   // 565
        /**                                                                                                            // 566
        Additional options for submit ajax request.                                                                    // 567
        List of values: http://api.jquery.com/jQuery.ajax                                                              // 568
                                                                                                                       // 569
        @property ajaxOptions                                                                                          // 570
        @type object                                                                                                   // 571
        @default null                                                                                                  // 572
        @since 1.1.1                                                                                                   // 573
        @example                                                                                                       // 574
        ajaxOptions: {                                                                                                 // 575
            type: 'put',                                                                                               // 576
            dataType: 'json'                                                                                           // 577
        }                                                                                                              // 578
        **/                                                                                                            // 579
        ajaxOptions: null,                                                                                             // 580
        /**                                                                                                            // 581
        Where to show buttons: left(true)|bottom|false                                                                 // 582
        Form without buttons is auto-submitted.                                                                        // 583
                                                                                                                       // 584
        @property showbuttons                                                                                          // 585
        @type boolean|string                                                                                           // 586
        @default true                                                                                                  // 587
        @since 1.1.1                                                                                                   // 588
        **/                                                                                                            // 589
        showbuttons: true,                                                                                             // 590
        /**                                                                                                            // 591
        Scope for callback methods (success, validate).                                                                // 592
        If <code>null</code> means editableform instance itself.                                                       // 593
                                                                                                                       // 594
        @property scope                                                                                                // 595
        @type DOMElement|object                                                                                        // 596
        @default null                                                                                                  // 597
        @since 1.2.0                                                                                                   // 598
        @private                                                                                                       // 599
        **/                                                                                                            // 600
        scope: null,                                                                                                   // 601
        /**                                                                                                            // 602
        Whether to save or cancel value when it was not changed but form was submitted                                 // 603
                                                                                                                       // 604
        @property savenochange                                                                                         // 605
        @type boolean                                                                                                  // 606
        @default false                                                                                                 // 607
        @since 1.2.0                                                                                                   // 608
        **/                                                                                                            // 609
        savenochange: false                                                                                            // 610
    };                                                                                                                 // 611
                                                                                                                       // 612
    /*                                                                                                                 // 613
    Note: following params could redefined in engine: bootstrap or jqueryui:                                           // 614
    Classes 'control-group' and 'editable-error-block' must always present!                                            // 615
    */                                                                                                                 // 616
    $.fn.editableform.template = '<form class="form-inline editableform">'+                                            // 617
    '<div class="control-group">' +                                                                                    // 618
    '<div><div class="editable-input"></div><div class="editable-buttons"></div></div>'+                               // 619
    '<div class="editable-error-block"></div>' +                                                                       // 620
    '</div>' +                                                                                                         // 621
    '</form>';                                                                                                         // 622
                                                                                                                       // 623
    //loading div                                                                                                      // 624
    $.fn.editableform.loading = '<div class="editableform-loading"></div>';                                            // 625
                                                                                                                       // 626
    //buttons                                                                                                          // 627
    $.fn.editableform.buttons = '<button type="submit" class="editable-submit">ok</button>'+                           // 628
    '<button type="button" class="editable-cancel">cancel</button>';                                                   // 629
                                                                                                                       // 630
    //error class attached to control-group                                                                            // 631
    $.fn.editableform.errorGroupClass = null;                                                                          // 632
                                                                                                                       // 633
    //error class attached to editable-error-block                                                                     // 634
    $.fn.editableform.errorBlockClass = 'editable-error';                                                              // 635
                                                                                                                       // 636
    //engine                                                                                                           // 637
    $.fn.editableform.engine = 'jquery';                                                                               // 638
}(window.jQuery));                                                                                                     // 639
                                                                                                                       // 640
/**                                                                                                                    // 641
* EditableForm utilites                                                                                                // 642
*/                                                                                                                     // 643
(function ($) {                                                                                                        // 644
    "use strict";                                                                                                      // 645
                                                                                                                       // 646
    //utils                                                                                                            // 647
    $.fn.editableutils = {                                                                                             // 648
        /**                                                                                                            // 649
        * classic JS inheritance function                                                                              // 650
        */                                                                                                             // 651
        inherit: function (Child, Parent) {                                                                            // 652
            var F = function() { };                                                                                    // 653
            F.prototype = Parent.prototype;                                                                            // 654
            Child.prototype = new F();                                                                                 // 655
            Child.prototype.constructor = Child;                                                                       // 656
            Child.superclass = Parent.prototype;                                                                       // 657
        },                                                                                                             // 658
                                                                                                                       // 659
        /**                                                                                                            // 660
        * set caret position in input                                                                                  // 661
        * see http://stackoverflow.com/questions/499126/jquery-set-cursor-position-in-text-area                        // 662
        */                                                                                                             // 663
        setCursorPosition: function(elem, pos) {                                                                       // 664
            if (elem.setSelectionRange) {                                                                              // 665
                elem.setSelectionRange(pos, pos);                                                                      // 666
            } else if (elem.createTextRange) {                                                                         // 667
                var range = elem.createTextRange();                                                                    // 668
                range.collapse(true);                                                                                  // 669
                range.moveEnd('character', pos);                                                                       // 670
                range.moveStart('character', pos);                                                                     // 671
                range.select();                                                                                        // 672
            }                                                                                                          // 673
        },                                                                                                             // 674
                                                                                                                       // 675
        /**                                                                                                            // 676
        * function to parse JSON in *single* quotes. (jquery automatically parse only double quotes)                   // 677
        * That allows such code as: <a data-source="{'a': 'b', 'c': 'd'}">                                             // 678
        * safe = true --> means no exception will be thrown                                                            // 679
        * for details see http://stackoverflow.com/questions/7410348/how-to-set-json-format-to-html5-data-attributes-in-the-jquery
        */                                                                                                             // 681
        tryParseJson: function(s, safe) {                                                                              // 682
            if (typeof s === 'string' && s.length && s.match(/^[\{\[].*[\}\]]$/)) {                                    // 683
                if (safe) {                                                                                            // 684
                    try {                                                                                              // 685
                        /*jslint evil: true*/                                                                          // 686
                        s = (new Function('return ' + s))();                                                           // 687
                        /*jslint evil: false*/                                                                         // 688
                    } catch (e) {} finally {                                                                           // 689
                        return s;                                                                                      // 690
                    }                                                                                                  // 691
                } else {                                                                                               // 692
                    /*jslint evil: true*/                                                                              // 693
                    s = (new Function('return ' + s))();                                                               // 694
                    /*jslint evil: false*/                                                                             // 695
                }                                                                                                      // 696
            }                                                                                                          // 697
            return s;                                                                                                  // 698
        },                                                                                                             // 699
                                                                                                                       // 700
        /**                                                                                                            // 701
        * slice object by specified keys                                                                               // 702
        */                                                                                                             // 703
        sliceObj: function(obj, keys, caseSensitive /* default: false */) {                                            // 704
            var key, keyLower, newObj = {};                                                                            // 705
                                                                                                                       // 706
            if (!$.isArray(keys) || !keys.length) {                                                                    // 707
                return newObj;                                                                                         // 708
            }                                                                                                          // 709
                                                                                                                       // 710
            for (var i = 0; i < keys.length; i++) {                                                                    // 711
                key = keys[i];                                                                                         // 712
                if (obj.hasOwnProperty(key)) {                                                                         // 713
                    newObj[key] = obj[key];                                                                            // 714
                }                                                                                                      // 715
                                                                                                                       // 716
                if(caseSensitive === true) {                                                                           // 717
                    continue;                                                                                          // 718
                }                                                                                                      // 719
                                                                                                                       // 720
                //when getting data-* attributes via $.data() it's converted to lowercase.                             // 721
                //details: http://stackoverflow.com/questions/7602565/using-data-attributes-with-jquery                // 722
                //workaround is code below.                                                                            // 723
                keyLower = key.toLowerCase();                                                                          // 724
                if (obj.hasOwnProperty(keyLower)) {                                                                    // 725
                    newObj[key] = obj[keyLower];                                                                       // 726
                }                                                                                                      // 727
            }                                                                                                          // 728
                                                                                                                       // 729
            return newObj;                                                                                             // 730
        },                                                                                                             // 731
                                                                                                                       // 732
        /*                                                                                                             // 733
        exclude complex objects from $.data() before pass to config                                                    // 734
        */                                                                                                             // 735
        getConfigData: function($element) {                                                                            // 736
            var data = {};                                                                                             // 737
            $.each($element.data(), function(k, v) {                                                                   // 738
                if(typeof v !== 'object' || (v && typeof v === 'object' && (v.constructor === Object || v.constructor === Array))) {
                    data[k] = v;                                                                                       // 740
                }                                                                                                      // 741
            });                                                                                                        // 742
            return data;                                                                                               // 743
        },                                                                                                             // 744
                                                                                                                       // 745
        /*                                                                                                             // 746
         returns keys of object                                                                                        // 747
        */                                                                                                             // 748
        objectKeys: function(o) {                                                                                      // 749
            if (Object.keys) {                                                                                         // 750
                return Object.keys(o);                                                                                 // 751
            } else {                                                                                                   // 752
                if (o !== Object(o)) {                                                                                 // 753
                    throw new TypeError('Object.keys called on a non-object');                                         // 754
                }                                                                                                      // 755
                var k=[], p;                                                                                           // 756
                for (p in o) {                                                                                         // 757
                    if (Object.prototype.hasOwnProperty.call(o,p)) {                                                   // 758
                        k.push(p);                                                                                     // 759
                    }                                                                                                  // 760
                }                                                                                                      // 761
                return k;                                                                                              // 762
            }                                                                                                          // 763
                                                                                                                       // 764
        },                                                                                                             // 765
                                                                                                                       // 766
       /**                                                                                                             // 767
        method to escape html.                                                                                         // 768
       **/                                                                                                             // 769
       escape: function(str) {                                                                                         // 770
           return $('<div>').text(str).html();                                                                         // 771
       },                                                                                                              // 772
                                                                                                                       // 773
       /*                                                                                                              // 774
        returns array items from sourceData having value property equal or inArray of 'value'                          // 775
       */                                                                                                              // 776
       itemsByValue: function(value, sourceData, valueProp) {                                                          // 777
           if(!sourceData || value === null) {                                                                         // 778
               return [];                                                                                              // 779
           }                                                                                                           // 780
                                                                                                                       // 781
           if (typeof(valueProp) !== "function") {                                                                     // 782
               var idKey = valueProp || 'value';                                                                       // 783
               valueProp = function (e) { return e[idKey]; };                                                          // 784
           }                                                                                                           // 785
                                                                                                                       // 786
           var isValArray = $.isArray(value),                                                                          // 787
           result = [],                                                                                                // 788
           that = this;                                                                                                // 789
                                                                                                                       // 790
           $.each(sourceData, function(i, o) {                                                                         // 791
               if(o.children) {                                                                                        // 792
                   result = result.concat(that.itemsByValue(value, o.children, valueProp));                            // 793
               } else {                                                                                                // 794
                   /*jslint eqeq: true*/                                                                               // 795
                   if(isValArray) {                                                                                    // 796
                       if($.grep(value, function(v){  return v == (o && typeof o === 'object' ? valueProp(o) : o); }).length) {
                           result.push(o);                                                                             // 798
                       }                                                                                               // 799
                   } else {                                                                                            // 800
                       var itemValue = (o && (typeof o === 'object')) ? valueProp(o) : o;                              // 801
                       if(value == itemValue) {                                                                        // 802
                           result.push(o);                                                                             // 803
                       }                                                                                               // 804
                   }                                                                                                   // 805
                   /*jslint eqeq: false*/                                                                              // 806
               }                                                                                                       // 807
           });                                                                                                         // 808
                                                                                                                       // 809
           return result;                                                                                              // 810
       },                                                                                                              // 811
                                                                                                                       // 812
       /*                                                                                                              // 813
       Returns input by options: type, mode.                                                                           // 814
       */                                                                                                              // 815
       createInput: function(options) {                                                                                // 816
           var TypeConstructor, typeOptions, input,                                                                    // 817
           type = options.type;                                                                                        // 818
                                                                                                                       // 819
           //`date` is some kind of virtual type that is transformed to one of exact types                             // 820
           //depending on mode and core lib                                                                            // 821
           if(type === 'date') {                                                                                       // 822
               //inline                                                                                                // 823
               if(options.mode === 'inline') {                                                                         // 824
                   if($.fn.editabletypes.datefield) {                                                                  // 825
                       type = 'datefield';                                                                             // 826
                   } else if($.fn.editabletypes.dateuifield) {                                                         // 827
                       type = 'dateuifield';                                                                           // 828
                   }                                                                                                   // 829
               //popup                                                                                                 // 830
               } else {                                                                                                // 831
                   if($.fn.editabletypes.date) {                                                                       // 832
                       type = 'date';                                                                                  // 833
                   } else if($.fn.editabletypes.dateui) {                                                              // 834
                       type = 'dateui';                                                                                // 835
                   }                                                                                                   // 836
               }                                                                                                       // 837
                                                                                                                       // 838
               //if type still `date` and not exist in types, replace with `combodate` that is base input              // 839
               if(type === 'date' && !$.fn.editabletypes.date) {                                                       // 840
                   type = 'combodate';                                                                                 // 841
               }                                                                                                       // 842
           }                                                                                                           // 843
                                                                                                                       // 844
           //`datetime` should be datetimefield in 'inline' mode                                                       // 845
           if(type === 'datetime' && options.mode === 'inline') {                                                      // 846
             type = 'datetimefield';                                                                                   // 847
           }                                                                                                           // 848
                                                                                                                       // 849
           //change wysihtml5 to textarea for jquery UI and plain versions                                             // 850
           if(type === 'wysihtml5' && !$.fn.editabletypes[type]) {                                                     // 851
               type = 'textarea';                                                                                      // 852
           }                                                                                                           // 853
                                                                                                                       // 854
           //create input of specified type. Input will be used for converting value, not in form                      // 855
           if(typeof $.fn.editabletypes[type] === 'function') {                                                        // 856
               TypeConstructor = $.fn.editabletypes[type];                                                             // 857
               typeOptions = this.sliceObj(options, this.objectKeys(TypeConstructor.defaults));                        // 858
               input = new TypeConstructor(typeOptions);                                                               // 859
               return input;                                                                                           // 860
           } else {                                                                                                    // 861
               $.error('Unknown type: '+ type);                                                                        // 862
               return false;                                                                                           // 863
           }                                                                                                           // 864
       },                                                                                                              // 865
                                                                                                                       // 866
       //see http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr  // 867
       supportsTransitions: function () {                                                                              // 868
           var b = document.body || document.documentElement,                                                          // 869
               s = b.style,                                                                                            // 870
               p = 'transition',                                                                                       // 871
               v = ['Moz', 'Webkit', 'Khtml', 'O', 'ms'];                                                              // 872
                                                                                                                       // 873
           if(typeof s[p] === 'string') {                                                                              // 874
               return true;                                                                                            // 875
           }                                                                                                           // 876
                                                                                                                       // 877
           // Tests for vendor specific prop                                                                           // 878
           p = p.charAt(0).toUpperCase() + p.substr(1);                                                                // 879
           for(var i=0; i<v.length; i++) {                                                                             // 880
               if(typeof s[v[i] + p] === 'string') {                                                                   // 881
                   return true;                                                                                        // 882
               }                                                                                                       // 883
           }                                                                                                           // 884
           return false;                                                                                               // 885
       }                                                                                                               // 886
                                                                                                                       // 887
    };                                                                                                                 // 888
}(window.jQuery));                                                                                                     // 889
                                                                                                                       // 890
/**                                                                                                                    // 891
Attaches stand-alone container with editable-form to HTML element. Element is used only for positioning, value is not stored anywhere.<br>
This method applied internally in <code>$().editable()</code>. You should subscribe on it's events (save / cancel) to get profit of it.<br>
Final realization can be different: bootstrap-popover, jqueryui-tooltip, poshytip, inline-div. It depends on which js file you include.<br>
Applied as jQuery method.                                                                                              // 895
                                                                                                                       // 896
@class editableContainer                                                                                               // 897
@uses editableform                                                                                                     // 898
**/                                                                                                                    // 899
(function ($) {                                                                                                        // 900
    "use strict";                                                                                                      // 901
                                                                                                                       // 902
    var Popup = function (element, options) {                                                                          // 903
        this.init(element, options);                                                                                   // 904
    };                                                                                                                 // 905
                                                                                                                       // 906
    var Inline = function (element, options) {                                                                         // 907
        this.init(element, options);                                                                                   // 908
    };                                                                                                                 // 909
                                                                                                                       // 910
    //methods                                                                                                          // 911
    Popup.prototype = {                                                                                                // 912
        containerName: null, //method to call container on element                                                     // 913
        containerDataName: null, //object name in element's .data()                                                    // 914
        innerCss: null, //tbd in child class                                                                           // 915
        containerClass: 'editable-container editable-popup', //css class applied to container element                  // 916
        defaults: {}, //container itself defaults                                                                      // 917
                                                                                                                       // 918
        init: function(element, options) {                                                                             // 919
            this.$element = $(element);                                                                                // 920
            //since 1.4.1 container do not use data-* directly as they already merged into options.                    // 921
            this.options = $.extend({}, $.fn.editableContainer.defaults, options);                                     // 922
            this.splitOptions();                                                                                       // 923
                                                                                                                       // 924
            //set scope of form callbacks to element                                                                   // 925
            this.formOptions.scope = this.$element[0];                                                                 // 926
                                                                                                                       // 927
            this.initContainer();                                                                                      // 928
                                                                                                                       // 929
            //flag to hide container, when saving value will finish                                                    // 930
            this.delayedHide = false;                                                                                  // 931
                                                                                                                       // 932
            //bind 'destroyed' listener to destroy container when element is removed from dom                          // 933
            this.$element.on('destroyed', $.proxy(function(){                                                          // 934
                this.destroy();                                                                                        // 935
            }, this));                                                                                                 // 936
                                                                                                                       // 937
            //attach document handler to close containers on click / escape                                            // 938
            if(!$(document).data('editable-handlers-attached')) {                                                      // 939
                //close all on escape                                                                                  // 940
                $(document).on('keyup.editable', function (e) {                                                        // 941
                    if (e.which === 27) {                                                                              // 942
                        $('.editable-open').editableContainer('hide');                                                 // 943
                        //todo: return focus on element                                                                // 944
                    }                                                                                                  // 945
                });                                                                                                    // 946
                                                                                                                       // 947
                //close containers when click outside                                                                  // 948
                //(mousedown could be better than click, it closes everything also on drag drop)                       // 949
                $(document).on('click.editable', function(e) {                                                         // 950
                    var $target = $(e.target), i,                                                                      // 951
                        exclude_classes = ['.editable-container',                                                      // 952
                                           '.ui-datepicker-header',                                                    // 953
                                           '.datepicker', //in inline mode datepicker is rendered into body            // 954
                                           '.modal-backdrop',                                                          // 955
                                           '.bootstrap-wysihtml5-insert-image-modal',                                  // 956
                                           '.bootstrap-wysihtml5-insert-link-modal'                                    // 957
                                           ];                                                                          // 958
                                                                                                                       // 959
                    //check if element is detached. It occurs when clicking in bootstrap datepicker                    // 960
                    if (!$.contains(document.documentElement, e.target)) {                                             // 961
                      return;                                                                                          // 962
                    }                                                                                                  // 963
                                                                                                                       // 964
                    //for some reason FF 20 generates extra event (click) in select2 widget with e.target = document   // 965
                    //we need to filter it via construction below. See https://github.com/vitalets/x-editable/issues/199
                    //Possibly related to http://stackoverflow.com/questions/10119793/why-does-firefox-react-differently-from-webkit-and-ie-to-click-event-on-selec
                    if($target.is(document)) {                                                                         // 968
                       return;                                                                                         // 969
                    }                                                                                                  // 970
                                                                                                                       // 971
                    //if click inside one of exclude classes --> no nothing                                            // 972
                    for(i=0; i<exclude_classes.length; i++) {                                                          // 973
                         if($target.is(exclude_classes[i]) || $target.parents(exclude_classes[i]).length) {            // 974
                             return;                                                                                   // 975
                         }                                                                                             // 976
                    }                                                                                                  // 977
                                                                                                                       // 978
                    //close all open containers (except one - target)                                                  // 979
                    Popup.prototype.closeOthers(e.target);                                                             // 980
                });                                                                                                    // 981
                                                                                                                       // 982
                $(document).data('editable-handlers-attached', true);                                                  // 983
            }                                                                                                          // 984
        },                                                                                                             // 985
                                                                                                                       // 986
        //split options on containerOptions and formOptions                                                            // 987
        splitOptions: function() {                                                                                     // 988
            this.containerOptions = {};                                                                                // 989
            this.formOptions = {};                                                                                     // 990
                                                                                                                       // 991
            if(!$.fn[this.containerName]) {                                                                            // 992
                throw new Error(this.containerName + ' not found. Have you included corresponding js file?');          // 993
            }                                                                                                          // 994
                                                                                                                       // 995
            //keys defined in container defaults go to container, others go to form                                    // 996
            for(var k in this.options) {                                                                               // 997
              if(k in this.defaults) {                                                                                 // 998
                 this.containerOptions[k] = this.options[k];                                                           // 999
              } else {                                                                                                 // 1000
                 this.formOptions[k] = this.options[k];                                                                // 1001
              }                                                                                                        // 1002
            }                                                                                                          // 1003
        },                                                                                                             // 1004
                                                                                                                       // 1005
        /*                                                                                                             // 1006
        Returns jquery object of container                                                                             // 1007
        @method tip()                                                                                                  // 1008
        */                                                                                                             // 1009
        tip: function() {                                                                                              // 1010
            return this.container() ? this.container().$tip : null;                                                    // 1011
        },                                                                                                             // 1012
                                                                                                                       // 1013
        /* returns container object */                                                                                 // 1014
        container: function() {                                                                                        // 1015
            var container;                                                                                             // 1016
            //first, try get it by `containerDataName`                                                                 // 1017
            if(this.containerDataName) {                                                                               // 1018
                if(container = this.$element.data(this.containerDataName)) {                                           // 1019
                    return container;                                                                                  // 1020
                }                                                                                                      // 1021
            }                                                                                                          // 1022
            //second, try `containerName`                                                                              // 1023
            container = this.$element.data(this.containerName);                                                        // 1024
            return container;                                                                                          // 1025
        },                                                                                                             // 1026
                                                                                                                       // 1027
        /* call native method of underlying container, e.g. this.$element.popover('method') */                         // 1028
        call: function() {                                                                                             // 1029
            this.$element[this.containerName].apply(this.$element, arguments);                                         // 1030
        },                                                                                                             // 1031
                                                                                                                       // 1032
        initContainer: function(){                                                                                     // 1033
            this.call(this.containerOptions);                                                                          // 1034
        },                                                                                                             // 1035
                                                                                                                       // 1036
        renderForm: function() {                                                                                       // 1037
            this.$form                                                                                                 // 1038
            .editableform(this.formOptions)                                                                            // 1039
            .on({                                                                                                      // 1040
                save: $.proxy(this.save, this), //click on submit button (value changed)                               // 1041
                nochange: $.proxy(function(){ this.hide('nochange'); }, this), //click on submit button (value NOT changed)                
                cancel: $.proxy(function(){ this.hide('cancel'); }, this), //click on calcel button                    // 1043
                show: $.proxy(function() {                                                                             // 1044
                    if(this.delayedHide) {                                                                             // 1045
                        this.hide(this.delayedHide.reason);                                                            // 1046
                        this.delayedHide = false;                                                                      // 1047
                    } else {                                                                                           // 1048
                        this.setPosition();                                                                            // 1049
                    }                                                                                                  // 1050
                }, this), //re-position container every time form is shown (occurs each time after loading state)      // 1051
                rendering: $.proxy(this.setPosition, this), //this allows to place container correctly when loading shown
                resize: $.proxy(this.setPosition, this), //this allows to re-position container when form size is changed 
                rendered: $.proxy(function(){                                                                          // 1054
                    /**                                                                                                // 1055
                    Fired when container is shown and form is rendered (for select will wait for loading dropdown options).  
                    **Note:** Bootstrap popover has own `shown` event that now cannot be separated from x-editable's one.
                    The workaround is to check `arguments.length` that is always `2` for x-editable.                     
                                                                                                                       // 1059
                    @event shown                                                                                       // 1060
                    @param {Object} event event object                                                                 // 1061
                    @example                                                                                           // 1062
                    $('#username').on('shown', function(e, editable) {                                                 // 1063
                        editable.input.$input.val('overwriting value of input..');                                     // 1064
                    });                                                                                                // 1065
                    **/                                                                                                // 1066
                    /*                                                                                                 // 1067
                     TODO: added second param mainly to distinguish from bootstrap's shown event. It's a hotfix that will be solved in future versions via namespaced events.  
                    */                                                                                                 // 1069
                    this.$element.triggerHandler('shown', $(this.options.scope).data('editable'));                     // 1070
                }, this)                                                                                               // 1071
            })                                                                                                         // 1072
            .editableform('render');                                                                                   // 1073
        },                                                                                                             // 1074
                                                                                                                       // 1075
        /**                                                                                                            // 1076
        Shows container with form                                                                                      // 1077
        @method show()                                                                                                 // 1078
        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.  // 1079
        **/                                                                                                            // 1080
        /* Note: poshytip owerwrites this method totally! */                                                           // 1081
        show: function (closeAll) {                                                                                    // 1082
            this.$element.addClass('editable-open');                                                                   // 1083
            if(closeAll !== false) {                                                                                   // 1084
                //close all open containers (except this)                                                              // 1085
                this.closeOthers(this.$element[0]);                                                                    // 1086
            }                                                                                                          // 1087
                                                                                                                       // 1088
            //show container itself                                                                                    // 1089
            this.innerShow();                                                                                          // 1090
            this.tip().addClass(this.containerClass);                                                                  // 1091
                                                                                                                       // 1092
            /*                                                                                                         // 1093
            Currently, form is re-rendered on every show.                                                              // 1094
            The main reason is that we dont know, what will container do with content when closed:                     // 1095
            remove(), detach() or just hide() - it depends on container.                                               // 1096
                                                                                                                       // 1097
            Detaching form itself before hide and re-insert before show is good solution,                              // 1098
            but visually it looks ugly --> container changes size before hide.                                         // 1099
            */                                                                                                         // 1100
                                                                                                                       // 1101
            //if form already exist - delete previous data                                                             // 1102
            if(this.$form) {                                                                                           // 1103
                //todo: destroy prev data!                                                                             // 1104
                //this.$form.destroy();                                                                                // 1105
            }                                                                                                          // 1106
                                                                                                                       // 1107
            this.$form = $('<div>');                                                                                   // 1108
                                                                                                                       // 1109
            //insert form into container body                                                                          // 1110
            if(this.tip().is(this.innerCss)) {                                                                         // 1111
                //for inline container                                                                                 // 1112
                this.tip().append(this.$form);                                                                         // 1113
            } else {                                                                                                   // 1114
                this.tip().find(this.innerCss).append(this.$form);                                                     // 1115
            }                                                                                                          // 1116
                                                                                                                       // 1117
            //render form                                                                                              // 1118
            this.renderForm();                                                                                         // 1119
        },                                                                                                             // 1120
                                                                                                                       // 1121
        /**                                                                                                            // 1122
        Hides container with form                                                                                      // 1123
        @method hide()                                                                                                 // 1124
        @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|undefined (=manual)</code>
        **/                                                                                                            // 1126
        hide: function(reason) {                                                                                       // 1127
            if(!this.tip() || !this.tip().is(':visible') || !this.$element.hasClass('editable-open')) {                // 1128
                return;                                                                                                // 1129
            }                                                                                                          // 1130
                                                                                                                       // 1131
            //if form is saving value, schedule hide                                                                   // 1132
            if(this.$form.data('editableform').isSaving) {                                                             // 1133
                this.delayedHide = {reason: reason};                                                                   // 1134
                return;                                                                                                // 1135
            } else {                                                                                                   // 1136
                this.delayedHide = false;                                                                              // 1137
            }                                                                                                          // 1138
                                                                                                                       // 1139
            this.$element.removeClass('editable-open');                                                                // 1140
            this.innerHide();                                                                                          // 1141
                                                                                                                       // 1142
            /**                                                                                                        // 1143
            Fired when container was hidden. It occurs on both save or cancel.                                         // 1144
            **Note:** Bootstrap popover has own `hidden` event that now cannot be separated from x-editable's one.     // 1145
            The workaround is to check `arguments.length` that is always `2` for x-editable.                           // 1146
                                                                                                                       // 1147
            @event hidden                                                                                              // 1148
            @param {object} event event object                                                                         // 1149
            @param {string} reason Reason caused hiding. Can be <code>save|cancel|onblur|nochange|manual</code>        // 1150
            @example                                                                                                   // 1151
            $('#username').on('hidden', function(e, reason) {                                                          // 1152
                if(reason === 'save' || reason === 'cancel') {                                                         // 1153
                    //auto-open next editable                                                                          // 1154
                    $(this).closest('tr').next().find('.editable').editable('show');                                   // 1155
                }                                                                                                      // 1156
            });                                                                                                        // 1157
            **/                                                                                                        // 1158
            this.$element.triggerHandler('hidden', reason || 'manual');                                                // 1159
        },                                                                                                             // 1160
                                                                                                                       // 1161
        /* internal show method. To be overwritten in child classes */                                                 // 1162
        innerShow: function () {                                                                                       // 1163
                                                                                                                       // 1164
        },                                                                                                             // 1165
                                                                                                                       // 1166
        /* internal hide method. To be overwritten in child classes */                                                 // 1167
        innerHide: function () {                                                                                       // 1168
                                                                                                                       // 1169
        },                                                                                                             // 1170
                                                                                                                       // 1171
        /**                                                                                                            // 1172
        Toggles container visibility (show / hide)                                                                     // 1173
        @method toggle()                                                                                               // 1174
        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.  // 1175
        **/                                                                                                            // 1176
        toggle: function(closeAll) {                                                                                   // 1177
            if(this.container() && this.tip() && this.tip().is(':visible')) {                                          // 1178
                this.hide();                                                                                           // 1179
            } else {                                                                                                   // 1180
                this.show(closeAll);                                                                                   // 1181
            }                                                                                                          // 1182
        },                                                                                                             // 1183
                                                                                                                       // 1184
        /*                                                                                                             // 1185
        Updates the position of container when content changed.                                                        // 1186
        @method setPosition()                                                                                          // 1187
        */                                                                                                             // 1188
        setPosition: function() {                                                                                      // 1189
            //tbd in child class                                                                                       // 1190
        },                                                                                                             // 1191
                                                                                                                       // 1192
        save: function(e, params) {                                                                                    // 1193
            /**                                                                                                        // 1194
            Fired when new value was submitted. You can use <code>$(this).data('editableContainer')</code> inside handler to access to editableContainer instance
                                                                                                                       // 1196
            @event save                                                                                                // 1197
            @param {Object} event event object                                                                         // 1198
            @param {Object} params additional params                                                                   // 1199
            @param {mixed} params.newValue submitted value                                                             // 1200
            @param {Object} params.response ajax response                                                              // 1201
            @example                                                                                                   // 1202
            $('#username').on('save', function(e, params) {                                                            // 1203
                //assuming server response: '{success: true}'                                                          // 1204
                var pk = $(this).data('editableContainer').options.pk;                                                 // 1205
                if(params.response && params.response.success) {                                                       // 1206
                    alert('value: ' + params.newValue + ' with pk: ' + pk + ' saved!');                                // 1207
                } else {                                                                                               // 1208
                    alert('error!');                                                                                   // 1209
                }                                                                                                      // 1210
            });                                                                                                        // 1211
            **/                                                                                                        // 1212
            this.$element.triggerHandler('save', params);                                                              // 1213
                                                                                                                       // 1214
            //hide must be after trigger, as saving value may require methods of plugin, applied to input              // 1215
            this.hide('save');                                                                                         // 1216
        },                                                                                                             // 1217
                                                                                                                       // 1218
        /**                                                                                                            // 1219
        Sets new option                                                                                                // 1220
                                                                                                                       // 1221
        @method option(key, value)                                                                                     // 1222
        @param {string} key                                                                                            // 1223
        @param {mixed} value                                                                                           // 1224
        **/                                                                                                            // 1225
        option: function(key, value) {                                                                                 // 1226
            this.options[key] = value;                                                                                 // 1227
            if(key in this.containerOptions) {                                                                         // 1228
                this.containerOptions[key] = value;                                                                    // 1229
                this.setContainerOption(key, value);                                                                   // 1230
            } else {                                                                                                   // 1231
                this.formOptions[key] = value;                                                                         // 1232
                if(this.$form) {                                                                                       // 1233
                    this.$form.editableform('option', key, value);                                                     // 1234
                }                                                                                                      // 1235
            }                                                                                                          // 1236
        },                                                                                                             // 1237
                                                                                                                       // 1238
        setContainerOption: function(key, value) {                                                                     // 1239
            this.call('option', key, value);                                                                           // 1240
        },                                                                                                             // 1241
                                                                                                                       // 1242
        /**                                                                                                            // 1243
        Destroys the container instance                                                                                // 1244
        @method destroy()                                                                                              // 1245
        **/                                                                                                            // 1246
        destroy: function() {                                                                                          // 1247
            this.hide();                                                                                               // 1248
            this.innerDestroy();                                                                                       // 1249
            this.$element.off('destroyed');                                                                            // 1250
            this.$element.removeData('editableContainer');                                                             // 1251
        },                                                                                                             // 1252
                                                                                                                       // 1253
        /* to be overwritten in child classes */                                                                       // 1254
        innerDestroy: function() {                                                                                     // 1255
                                                                                                                       // 1256
        },                                                                                                             // 1257
                                                                                                                       // 1258
        /*                                                                                                             // 1259
        Closes other containers except one related to passed element.                                                  // 1260
        Other containers can be cancelled or submitted (depends on onblur option)                                      // 1261
        */                                                                                                             // 1262
        closeOthers: function(element) {                                                                               // 1263
            $('.editable-open').each(function(i, el){                                                                  // 1264
                //do nothing with passed element and it's children                                                     // 1265
                if(el === element || $(el).find(element).length) {                                                     // 1266
                    return;                                                                                            // 1267
                }                                                                                                      // 1268
                                                                                                                       // 1269
                //otherwise cancel or submit all open containers                                                       // 1270
                var $el = $(el),                                                                                       // 1271
                ec = $el.data('editableContainer');                                                                    // 1272
                                                                                                                       // 1273
                if(!ec) {                                                                                              // 1274
                    return;                                                                                            // 1275
                }                                                                                                      // 1276
                                                                                                                       // 1277
                if(ec.options.onblur === 'cancel') {                                                                   // 1278
                    $el.data('editableContainer').hide('onblur');                                                      // 1279
                } else if(ec.options.onblur === 'submit') {                                                            // 1280
                    $el.data('editableContainer').tip().find('form').submit();                                         // 1281
                }                                                                                                      // 1282
            });                                                                                                        // 1283
                                                                                                                       // 1284
        },                                                                                                             // 1285
                                                                                                                       // 1286
        /**                                                                                                            // 1287
        Activates input of visible container (e.g. set focus)                                                          // 1288
        @method activate()                                                                                             // 1289
        **/                                                                                                            // 1290
        activate: function() {                                                                                         // 1291
            if(this.tip && this.tip().is(':visible') && this.$form) {                                                  // 1292
               this.$form.data('editableform').input.activate();                                                       // 1293
            }                                                                                                          // 1294
        }                                                                                                              // 1295
                                                                                                                       // 1296
    };                                                                                                                 // 1297
                                                                                                                       // 1298
    /**                                                                                                                // 1299
    jQuery method to initialize editableContainer.                                                                     // 1300
                                                                                                                       // 1301
    @method $().editableContainer(options)                                                                             // 1302
    @params {Object} options                                                                                           // 1303
    @example                                                                                                           // 1304
    $('#edit').editableContainer({                                                                                     // 1305
        type: 'text',                                                                                                  // 1306
        url: '/post',                                                                                                  // 1307
        pk: 1,                                                                                                         // 1308
        value: 'hello'                                                                                                 // 1309
    });                                                                                                                // 1310
    **/                                                                                                                // 1311
    $.fn.editableContainer = function (option) {                                                                       // 1312
        var args = arguments;                                                                                          // 1313
        return this.each(function () {                                                                                 // 1314
            var $this = $(this),                                                                                       // 1315
            dataKey = 'editableContainer',                                                                             // 1316
            data = $this.data(dataKey),                                                                                // 1317
            options = typeof option === 'object' && option,                                                            // 1318
            Constructor = (options.mode === 'inline') ? Inline : Popup;                                                // 1319
                                                                                                                       // 1320
            if (!data) {                                                                                               // 1321
                $this.data(dataKey, (data = new Constructor(this, options)));                                          // 1322
            }                                                                                                          // 1323
                                                                                                                       // 1324
            if (typeof option === 'string') { //call method                                                            // 1325
                data[option].apply(data, Array.prototype.slice.call(args, 1));                                         // 1326
            }                                                                                                          // 1327
        });                                                                                                            // 1328
    };                                                                                                                 // 1329
                                                                                                                       // 1330
    //store constructors                                                                                               // 1331
    $.fn.editableContainer.Popup = Popup;                                                                              // 1332
    $.fn.editableContainer.Inline = Inline;                                                                            // 1333
                                                                                                                       // 1334
    //defaults                                                                                                         // 1335
    $.fn.editableContainer.defaults = {                                                                                // 1336
        /**                                                                                                            // 1337
        Initial value of form input                                                                                    // 1338
                                                                                                                       // 1339
        @property value                                                                                                // 1340
        @type mixed                                                                                                    // 1341
        @default null                                                                                                  // 1342
        @private                                                                                                       // 1343
        **/                                                                                                            // 1344
        value: null,                                                                                                   // 1345
        /**                                                                                                            // 1346
        Placement of container relative to element. Can be <code>top|right|bottom|left</code>. Not used for inline container.
                                                                                                                       // 1348
        @property placement                                                                                            // 1349
        @type string                                                                                                   // 1350
        @default 'top'                                                                                                 // 1351
        **/                                                                                                            // 1352
        placement: 'top',                                                                                              // 1353
        /**                                                                                                            // 1354
        Whether to hide container on save/cancel.                                                                      // 1355
                                                                                                                       // 1356
        @property autohide                                                                                             // 1357
        @type boolean                                                                                                  // 1358
        @default true                                                                                                  // 1359
        @private                                                                                                       // 1360
        **/                                                                                                            // 1361
        autohide: true,                                                                                                // 1362
        /**                                                                                                            // 1363
        Action when user clicks outside the container. Can be <code>cancel|submit|ignore</code>.                       // 1364
        Setting <code>ignore</code> allows to have several containers open.                                            // 1365
                                                                                                                       // 1366
        @property onblur                                                                                               // 1367
        @type string                                                                                                   // 1368
        @default 'cancel'                                                                                              // 1369
        @since 1.1.1                                                                                                   // 1370
        **/                                                                                                            // 1371
        onblur: 'cancel',                                                                                              // 1372
                                                                                                                       // 1373
        /**                                                                                                            // 1374
        Animation speed (inline mode only)                                                                             // 1375
        @property anim                                                                                                 // 1376
        @type string                                                                                                   // 1377
        @default false                                                                                                 // 1378
        **/                                                                                                            // 1379
        anim: false,                                                                                                   // 1380
                                                                                                                       // 1381
        /**                                                                                                            // 1382
        Mode of editable, can be `popup` or `inline`                                                                   // 1383
                                                                                                                       // 1384
        @property mode                                                                                                 // 1385
        @type string                                                                                                   // 1386
        @default 'popup'                                                                                               // 1387
        @since 1.4.0                                                                                                   // 1388
        **/                                                                                                            // 1389
        mode: 'popup'                                                                                                  // 1390
    };                                                                                                                 // 1391
                                                                                                                       // 1392
    /*                                                                                                                 // 1393
    * workaround to have 'destroyed' event to destroy popover when element is destroyed                                // 1394
    * see http://stackoverflow.com/questions/2200494/jquery-trigger-event-when-an-element-is-removed-from-the-dom      // 1395
    */                                                                                                                 // 1396
    jQuery.event.special.destroyed = {                                                                                 // 1397
        remove: function(o) {                                                                                          // 1398
            if (o.handler) {                                                                                           // 1399
                o.handler();                                                                                           // 1400
            }                                                                                                          // 1401
        }                                                                                                              // 1402
    };                                                                                                                 // 1403
                                                                                                                       // 1404
}(window.jQuery));                                                                                                     // 1405
                                                                                                                       // 1406
/**                                                                                                                    // 1407
* Editable Inline                                                                                                      // 1408
* ---------------------                                                                                                // 1409
*/                                                                                                                     // 1410
(function ($) {                                                                                                        // 1411
    "use strict";                                                                                                      // 1412
                                                                                                                       // 1413
    //copy prototype from EditableContainer                                                                            // 1414
    //extend methods                                                                                                   // 1415
    $.extend($.fn.editableContainer.Inline.prototype, $.fn.editableContainer.Popup.prototype, {                        // 1416
        containerName: 'editableform',                                                                                 // 1417
        innerCss: '.editable-inline',                                                                                  // 1418
        containerClass: 'editable-container editable-inline', //css class applied to container element                 // 1419
                                                                                                                       // 1420
        initContainer: function(){                                                                                     // 1421
            //container is <span> element                                                                              // 1422
            this.$tip = $('<span></span>');                                                                            // 1423
                                                                                                                       // 1424
            //convert anim to miliseconds (int)                                                                        // 1425
            if(!this.options.anim) {                                                                                   // 1426
                this.options.anim = 0;                                                                                 // 1427
            }                                                                                                          // 1428
        },                                                                                                             // 1429
                                                                                                                       // 1430
        splitOptions: function() {                                                                                     // 1431
            //all options are passed to form                                                                           // 1432
            this.containerOptions = {};                                                                                // 1433
            this.formOptions = this.options;                                                                           // 1434
        },                                                                                                             // 1435
                                                                                                                       // 1436
        tip: function() {                                                                                              // 1437
           return this.$tip;                                                                                           // 1438
        },                                                                                                             // 1439
                                                                                                                       // 1440
        innerShow: function () {                                                                                       // 1441
            this.$element.hide();                                                                                      // 1442
            this.tip().insertAfter(this.$element).show();                                                              // 1443
        },                                                                                                             // 1444
                                                                                                                       // 1445
        innerHide: function () {                                                                                       // 1446
            this.$tip.hide(this.options.anim, $.proxy(function() {                                                     // 1447
                this.$element.show();                                                                                  // 1448
                this.innerDestroy();                                                                                   // 1449
            }, this));                                                                                                 // 1450
        },                                                                                                             // 1451
                                                                                                                       // 1452
        innerDestroy: function() {                                                                                     // 1453
            if(this.tip()) {                                                                                           // 1454
                this.tip().empty().remove();                                                                           // 1455
            }                                                                                                          // 1456
        }                                                                                                              // 1457
    });                                                                                                                // 1458
                                                                                                                       // 1459
}(window.jQuery));                                                                                                     // 1460
/**                                                                                                                    // 1461
Makes editable any HTML element on the page. Applied as jQuery method.                                                 // 1462
                                                                                                                       // 1463
@class editable                                                                                                        // 1464
@uses editableContainer                                                                                                // 1465
**/                                                                                                                    // 1466
(function ($) {                                                                                                        // 1467
    "use strict";                                                                                                      // 1468
                                                                                                                       // 1469
    var Editable = function (element, options) {                                                                       // 1470
        this.$element = $(element);                                                                                    // 1471
        //data-* has more priority over js options: because dynamically created elements may change data-*             // 1472
        this.options = $.extend({}, $.fn.editable.defaults, options, $.fn.editableutils.getConfigData(this.$element));  
        if(this.options.selector) {                                                                                    // 1474
            this.initLive();                                                                                           // 1475
        } else {                                                                                                       // 1476
            this.init();                                                                                               // 1477
        }                                                                                                              // 1478
                                                                                                                       // 1479
        //check for transition support                                                                                 // 1480
        if(this.options.highlight && !$.fn.editableutils.supportsTransitions()) {                                      // 1481
            this.options.highlight = false;                                                                            // 1482
        }                                                                                                              // 1483
    };                                                                                                                 // 1484
                                                                                                                       // 1485
    Editable.prototype = {                                                                                             // 1486
        constructor: Editable,                                                                                         // 1487
        init: function () {                                                                                            // 1488
            var isValueByText = false,                                                                                 // 1489
                doAutotext, finalize;                                                                                  // 1490
                                                                                                                       // 1491
            //name                                                                                                     // 1492
            this.options.name = this.options.name || this.$element.attr('id');                                         // 1493
                                                                                                                       // 1494
            //create input of specified type. Input needed already here to convert value for initial display (e.g. show text by id for select)
            //also we set scope option to have access to element inside input specific callbacks (e. g. source as function)
            this.options.scope = this.$element[0];                                                                     // 1497
            this.input = $.fn.editableutils.createInput(this.options);                                                 // 1498
            if(!this.input) {                                                                                          // 1499
                return;                                                                                                // 1500
            }                                                                                                          // 1501
                                                                                                                       // 1502
            //set value from settings or by element's text                                                             // 1503
            if (this.options.value === undefined || this.options.value === null) {                                     // 1504
                this.value = this.input.html2value($.trim(this.$element.html()));                                      // 1505
                isValueByText = true;                                                                                  // 1506
            } else {                                                                                                   // 1507
                /*                                                                                                     // 1508
                  value can be string when received from 'data-value' attribute                                        // 1509
                  for complext objects value can be set as json string in data-value attribute,                        // 1510
                  e.g. data-value="{city: 'Moscow', street: 'Lenina'}"                                                 // 1511
                */                                                                                                     // 1512
                this.options.value = $.fn.editableutils.tryParseJson(this.options.value, true);                        // 1513
                if(typeof this.options.value === 'string') {                                                           // 1514
                    this.value = this.input.str2value(this.options.value);                                             // 1515
                } else {                                                                                               // 1516
                    this.value = this.options.value;                                                                   // 1517
                }                                                                                                      // 1518
            }                                                                                                          // 1519
                                                                                                                       // 1520
            //add 'editable' class to every editable element                                                           // 1521
            this.$element.addClass('editable');                                                                        // 1522
                                                                                                                       // 1523
            //specifically for "textarea" add class .editable-pre-wrapped to keep linebreaks                           // 1524
            if(this.input.type === 'textarea') {                                                                       // 1525
                this.$element.addClass('editable-pre-wrapped');                                                        // 1526
            }                                                                                                          // 1527
                                                                                                                       // 1528
            //attach handler activating editable. In disabled mode it just prevent default action (useful for links)   // 1529
            if(this.options.toggle !== 'manual') {                                                                     // 1530
                this.$element.addClass('editable-click');                                                              // 1531
                this.$element.on(this.options.toggle + '.editable', $.proxy(function(e){                               // 1532
                    //prevent following link if editable enabled                                                       // 1533
                    if(!this.options.disabled) {                                                                       // 1534
                        e.preventDefault();                                                                            // 1535
                    }                                                                                                  // 1536
                                                                                                                       // 1537
                    //stop propagation not required because in document click handler it checks event target           // 1538
                    //e.stopPropagation();                                                                             // 1539
                                                                                                                       // 1540
                    if(this.options.toggle === 'mouseenter') {                                                         // 1541
                        //for hover only show container                                                                // 1542
                        this.show();                                                                                   // 1543
                    } else {                                                                                           // 1544
                        //when toggle='click' we should not close all other containers as they will be closed automatically in document click listener
                        var closeAll = (this.options.toggle !== 'click');                                              // 1546
                        this.toggle(closeAll);                                                                         // 1547
                    }                                                                                                  // 1548
                }, this));                                                                                             // 1549
            } else {                                                                                                   // 1550
                this.$element.attr('tabindex', -1); //do not stop focus on element when toggled manually               // 1551
            }                                                                                                          // 1552
                                                                                                                       // 1553
            //if display is function it's far more convinient to have autotext = always to render correctly on init    // 1554
            //see https://github.com/vitalets/x-editable-yii/issues/34                                                 // 1555
            if(typeof this.options.display === 'function') {                                                           // 1556
                this.options.autotext = 'always';                                                                      // 1557
            }                                                                                                          // 1558
                                                                                                                       // 1559
            //check conditions for autotext:                                                                           // 1560
            switch(this.options.autotext) {                                                                            // 1561
              case 'always':                                                                                           // 1562
               doAutotext = true;                                                                                      // 1563
              break;                                                                                                   // 1564
              case 'auto':                                                                                             // 1565
                //if element text is empty and value is defined and value not generated by text --> run autotext       // 1566
                doAutotext = !$.trim(this.$element.text()).length && this.value !== null && this.value !== undefined && !isValueByText;
              break;                                                                                                   // 1568
              default:                                                                                                 // 1569
               doAutotext = false;                                                                                     // 1570
            }                                                                                                          // 1571
                                                                                                                       // 1572
            //depending on autotext run render() or just finilize init                                                 // 1573
            $.when(doAutotext ? this.render() : true).then($.proxy(function() {                                        // 1574
                if(this.options.disabled) {                                                                            // 1575
                    this.disable();                                                                                    // 1576
                } else {                                                                                               // 1577
                    this.enable();                                                                                     // 1578
                }                                                                                                      // 1579
               /**                                                                                                     // 1580
               Fired when element was initialized by `$().editable()` method.                                          // 1581
               Please note that you should setup `init` handler **before** applying `editable`.                        // 1582
                                                                                                                       // 1583
               @event init                                                                                             // 1584
               @param {Object} event event object                                                                      // 1585
               @param {Object} editable editable instance (as here it cannot accessed via data('editable'))            // 1586
               @since 1.2.0                                                                                            // 1587
               @example                                                                                                // 1588
               $('#username').on('init', function(e, editable) {                                                       // 1589
                   alert('initialized ' + editable.options.name);                                                      // 1590
               });                                                                                                     // 1591
               $('#username').editable();                                                                              // 1592
               **/                                                                                                     // 1593
                this.$element.triggerHandler('init', this);                                                            // 1594
            }, this));                                                                                                 // 1595
        },                                                                                                             // 1596
                                                                                                                       // 1597
        /*                                                                                                             // 1598
         Initializes parent element for live editables                                                                 // 1599
        */                                                                                                             // 1600
        initLive: function() {                                                                                         // 1601
           //store selector                                                                                            // 1602
           var selector = this.options.selector;                                                                       // 1603
           //modify options for child elements                                                                         // 1604
           this.options.selector = false;                                                                              // 1605
           this.options.autotext = 'never';                                                                            // 1606
           //listen toggle events                                                                                      // 1607
           this.$element.on(this.options.toggle + '.editable', selector, $.proxy(function(e){                          // 1608
               var $target = $(e.target);                                                                              // 1609
               if(!$target.data('editable')) {                                                                         // 1610
                   //if delegated element initially empty, we need to clear it's text (that was manually set to `empty` by user)
                   //see https://github.com/vitalets/x-editable/issues/137                                             // 1612
                   if($target.hasClass(this.options.emptyclass)) {                                                     // 1613
                      $target.empty();                                                                                 // 1614
                   }                                                                                                   // 1615
                   $target.editable(this.options).trigger(e);                                                          // 1616
               }                                                                                                       // 1617
           }, this));                                                                                                  // 1618
        },                                                                                                             // 1619
                                                                                                                       // 1620
        /*                                                                                                             // 1621
        Renders value into element's text.                                                                             // 1622
        Can call custom display method from options.                                                                   // 1623
        Can return deferred object.                                                                                    // 1624
        @method render()                                                                                               // 1625
        @param {mixed} response server response (if exist) to pass into display function                               // 1626
        */                                                                                                             // 1627
        render: function(response) {                                                                                   // 1628
            //do not display anything                                                                                  // 1629
            if(this.options.display === false) {                                                                       // 1630
                return;                                                                                                // 1631
            }                                                                                                          // 1632
                                                                                                                       // 1633
            //if input has `value2htmlFinal` method, we pass callback in third param to be called when source is loaded
            if(this.input.value2htmlFinal) {                                                                           // 1635
                return this.input.value2html(this.value, this.$element[0], this.options.display, response);            // 1636
            //if display method defined --> use it                                                                     // 1637
            } else if(typeof this.options.display === 'function') {                                                    // 1638
                return this.options.display.call(this.$element[0], this.value, response);                              // 1639
            //else use input's original value2html() method                                                            // 1640
            } else {                                                                                                   // 1641
                return this.input.value2html(this.value, this.$element[0]);                                            // 1642
            }                                                                                                          // 1643
        },                                                                                                             // 1644
                                                                                                                       // 1645
        /**                                                                                                            // 1646
        Enables editable                                                                                               // 1647
        @method enable()                                                                                               // 1648
        **/                                                                                                            // 1649
        enable: function() {                                                                                           // 1650
            this.options.disabled = false;                                                                             // 1651
            this.$element.removeClass('editable-disabled');                                                            // 1652
            this.handleEmpty(this.isEmpty);                                                                            // 1653
            if(this.options.toggle !== 'manual') {                                                                     // 1654
                if(this.$element.attr('tabindex') === '-1') {                                                          // 1655
                    this.$element.removeAttr('tabindex');                                                              // 1656
                }                                                                                                      // 1657
            }                                                                                                          // 1658
        },                                                                                                             // 1659
                                                                                                                       // 1660
        /**                                                                                                            // 1661
        Disables editable                                                                                              // 1662
        @method disable()                                                                                              // 1663
        **/                                                                                                            // 1664
        disable: function() {                                                                                          // 1665
            this.options.disabled = true;                                                                              // 1666
            this.hide();                                                                                               // 1667
            this.$element.addClass('editable-disabled');                                                               // 1668
            this.handleEmpty(this.isEmpty);                                                                            // 1669
            //do not stop focus on this element                                                                        // 1670
            this.$element.attr('tabindex', -1);                                                                        // 1671
        },                                                                                                             // 1672
                                                                                                                       // 1673
        /**                                                                                                            // 1674
        Toggles enabled / disabled state of editable element                                                           // 1675
        @method toggleDisabled()                                                                                       // 1676
        **/                                                                                                            // 1677
        toggleDisabled: function() {                                                                                   // 1678
            if(this.options.disabled) {                                                                                // 1679
                this.enable();                                                                                         // 1680
            } else {                                                                                                   // 1681
                this.disable();                                                                                        // 1682
            }                                                                                                          // 1683
        },                                                                                                             // 1684
                                                                                                                       // 1685
        /**                                                                                                            // 1686
        Sets new option                                                                                                // 1687
                                                                                                                       // 1688
        @method option(key, value)                                                                                     // 1689
        @param {string|object} key option name or object with several options                                          // 1690
        @param {mixed} value option new value                                                                          // 1691
        @example                                                                                                       // 1692
        $('.editable').editable('option', 'pk', 2);                                                                    // 1693
        **/                                                                                                            // 1694
        option: function(key, value) {                                                                                 // 1695
            //set option(s) by object                                                                                  // 1696
            if(key && typeof key === 'object') {                                                                       // 1697
               $.each(key, $.proxy(function(k, v){                                                                     // 1698
                  this.option($.trim(k), v);                                                                           // 1699
               }, this));                                                                                              // 1700
               return;                                                                                                 // 1701
            }                                                                                                          // 1702
                                                                                                                       // 1703
            //set option by string                                                                                     // 1704
            this.options[key] = value;                                                                                 // 1705
                                                                                                                       // 1706
            //disabled                                                                                                 // 1707
            if(key === 'disabled') {                                                                                   // 1708
               return value ? this.disable() : this.enable();                                                          // 1709
            }                                                                                                          // 1710
                                                                                                                       // 1711
            //value                                                                                                    // 1712
            if(key === 'value') {                                                                                      // 1713
                this.setValue(value);                                                                                  // 1714
            }                                                                                                          // 1715
                                                                                                                       // 1716
            //transfer new option to container!                                                                        // 1717
            if(this.container) {                                                                                       // 1718
                this.container.option(key, value);                                                                     // 1719
            }                                                                                                          // 1720
                                                                                                                       // 1721
            //pass option to input directly (as it points to the same in form)                                         // 1722
            if(this.input.option) {                                                                                    // 1723
                this.input.option(key, value);                                                                         // 1724
            }                                                                                                          // 1725
                                                                                                                       // 1726
        },                                                                                                             // 1727
                                                                                                                       // 1728
        /*                                                                                                             // 1729
        * set emptytext if element is empty                                                                            // 1730
        */                                                                                                             // 1731
        handleEmpty: function (isEmpty) {                                                                              // 1732
            //do not handle empty if we do not display anything                                                        // 1733
            if(this.options.display === false) {                                                                       // 1734
                return;                                                                                                // 1735
            }                                                                                                          // 1736
                                                                                                                       // 1737
            /*                                                                                                         // 1738
            isEmpty may be set directly as param of method.                                                            // 1739
            It is required when we enable/disable field and can't rely on content                                      // 1740
            as node content is text: "Empty" that is not empty %)                                                      // 1741
            */                                                                                                         // 1742
            if(isEmpty !== undefined) {                                                                                // 1743
                this.isEmpty = isEmpty;                                                                                // 1744
            } else {                                                                                                   // 1745
                //detect empty                                                                                         // 1746
                //for some inputs we need more smart check                                                             // 1747
                //e.g. wysihtml5 may have <br>, <p></p>, <img>                                                         // 1748
                if(typeof(this.input.isEmpty) === 'function') {                                                        // 1749
                    this.isEmpty = this.input.isEmpty(this.$element);                                                  // 1750
                } else {                                                                                               // 1751
                    this.isEmpty = $.trim(this.$element.html()) === '';                                                // 1752
                }                                                                                                      // 1753
            }                                                                                                          // 1754
                                                                                                                       // 1755
            //emptytext shown only for enabled                                                                         // 1756
            if(!this.options.disabled) {                                                                               // 1757
                if (this.isEmpty) {                                                                                    // 1758
                    this.$element.html(this.options.emptytext);                                                        // 1759
                    if(this.options.emptyclass) {                                                                      // 1760
                        this.$element.addClass(this.options.emptyclass);                                               // 1761
                    }                                                                                                  // 1762
                } else if(this.options.emptyclass) {                                                                   // 1763
                    this.$element.removeClass(this.options.emptyclass);                                                // 1764
                }                                                                                                      // 1765
            } else {                                                                                                   // 1766
                //below required if element disable property was changed                                               // 1767
                if(this.isEmpty) {                                                                                     // 1768
                    this.$element.empty();                                                                             // 1769
                    if(this.options.emptyclass) {                                                                      // 1770
                        this.$element.removeClass(this.options.emptyclass);                                            // 1771
                    }                                                                                                  // 1772
                }                                                                                                      // 1773
            }                                                                                                          // 1774
        },                                                                                                             // 1775
                                                                                                                       // 1776
        /**                                                                                                            // 1777
        Shows container with form                                                                                      // 1778
        @method show()                                                                                                 // 1779
        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.  // 1780
        **/                                                                                                            // 1781
        show: function (closeAll) {                                                                                    // 1782
            if(this.options.disabled) {                                                                                // 1783
                return;                                                                                                // 1784
            }                                                                                                          // 1785
                                                                                                                       // 1786
            //init editableContainer: popover, tooltip, inline, etc..                                                  // 1787
            if(!this.container) {                                                                                      // 1788
                var containerOptions = $.extend({}, this.options, {                                                    // 1789
                    value: this.value,                                                                                 // 1790
                    input: this.input //pass input to form (as it is already created)                                  // 1791
                });                                                                                                    // 1792
                this.$element.editableContainer(containerOptions);                                                     // 1793
                //listen `save` event                                                                                  // 1794
                this.$element.on("save.internal", $.proxy(this.save, this));                                           // 1795
                this.container = this.$element.data('editableContainer');                                              // 1796
            } else if(this.container.tip().is(':visible')) {                                                           // 1797
                return;                                                                                                // 1798
            }                                                                                                          // 1799
                                                                                                                       // 1800
            //show container                                                                                           // 1801
            this.container.show(closeAll);                                                                             // 1802
        },                                                                                                             // 1803
                                                                                                                       // 1804
        /**                                                                                                            // 1805
        Hides container with form                                                                                      // 1806
        @method hide()                                                                                                 // 1807
        **/                                                                                                            // 1808
        hide: function () {                                                                                            // 1809
            if(this.container) {                                                                                       // 1810
                this.container.hide();                                                                                 // 1811
            }                                                                                                          // 1812
        },                                                                                                             // 1813
                                                                                                                       // 1814
        /**                                                                                                            // 1815
        Toggles container visibility (show / hide)                                                                     // 1816
        @method toggle()                                                                                               // 1817
        @param {boolean} closeAll Whether to close all other editable containers when showing this one. Default true.  // 1818
        **/                                                                                                            // 1819
        toggle: function(closeAll) {                                                                                   // 1820
            if(this.container && this.container.tip().is(':visible')) {                                                // 1821
                this.hide();                                                                                           // 1822
            } else {                                                                                                   // 1823
                this.show(closeAll);                                                                                   // 1824
            }                                                                                                          // 1825
        },                                                                                                             // 1826
                                                                                                                       // 1827
        /*                                                                                                             // 1828
        * called when form was submitted                                                                               // 1829
        */                                                                                                             // 1830
        save: function(e, params) {                                                                                    // 1831
            //mark element with unsaved class if needed                                                                // 1832
            if(this.options.unsavedclass) {                                                                            // 1833
                /*                                                                                                     // 1834
                 Add unsaved css to element if:                                                                        // 1835
                  - url is not user's function                                                                         // 1836
                  - value was not sent to server                                                                       // 1837
                  - params.response === undefined, that means data was not sent                                        // 1838
                  - value changed                                                                                      // 1839
                */                                                                                                     // 1840
                var sent = false;                                                                                      // 1841
                sent = sent || typeof this.options.url === 'function';                                                 // 1842
                sent = sent || this.options.display === false;                                                         // 1843
                sent = sent || params.response !== undefined;                                                          // 1844
                sent = sent || (this.options.savenochange && this.input.value2str(this.value) !== this.input.value2str(params.newValue)); 
                                                                                                                       // 1846
                if(sent) {                                                                                             // 1847
                    this.$element.removeClass(this.options.unsavedclass);                                              // 1848
                } else {                                                                                               // 1849
                    this.$element.addClass(this.options.unsavedclass);                                                 // 1850
                }                                                                                                      // 1851
            }                                                                                                          // 1852
                                                                                                                       // 1853
            //highlight when saving                                                                                    // 1854
            if(this.options.highlight) {                                                                               // 1855
                var $e = this.$element,                                                                                // 1856
                    bgColor = $e.css('background-color');                                                              // 1857
                                                                                                                       // 1858
                $e.css('background-color', this.options.highlight);                                                    // 1859
                setTimeout(function(){                                                                                 // 1860
                    if(bgColor === 'transparent') {                                                                    // 1861
                        bgColor = '';                                                                                  // 1862
                    }                                                                                                  // 1863
                    $e.css('background-color', bgColor);                                                               // 1864
                    $e.addClass('editable-bg-transition');                                                             // 1865
                    setTimeout(function(){                                                                             // 1866
                       $e.removeClass('editable-bg-transition');                                                       // 1867
                    }, 1700);                                                                                          // 1868
                }, 10);                                                                                                // 1869
            }                                                                                                          // 1870
                                                                                                                       // 1871
            //set new value                                                                                            // 1872
            this.setValue(params.newValue, false, params.response);                                                    // 1873
                                                                                                                       // 1874
            /**                                                                                                        // 1875
            Fired when new value was submitted. You can use <code>$(this).data('editable')</code> to access to editable instance
                                                                                                                       // 1877
            @event save                                                                                                // 1878
            @param {Object} event event object                                                                         // 1879
            @param {Object} params additional params                                                                   // 1880
            @param {mixed} params.newValue submitted value                                                             // 1881
            @param {Object} params.response ajax response                                                              // 1882
            @example                                                                                                   // 1883
            $('#username').on('save', function(e, params) {                                                            // 1884
                alert('Saved value: ' + params.newValue);                                                              // 1885
            });                                                                                                        // 1886
            **/                                                                                                        // 1887
            //event itself is triggered by editableContainer. Description here is only for documentation               // 1888
        },                                                                                                             // 1889
                                                                                                                       // 1890
        validate: function () {                                                                                        // 1891
            if (typeof this.options.validate === 'function') {                                                         // 1892
                return this.options.validate.call(this, this.value);                                                   // 1893
            }                                                                                                          // 1894
        },                                                                                                             // 1895
                                                                                                                       // 1896
        /**                                                                                                            // 1897
        Sets new value of editable                                                                                     // 1898
        @method setValue(value, convertStr)                                                                            // 1899
        @param {mixed} value new value                                                                                 // 1900
        @param {boolean} convertStr whether to convert value from string to internal format                            // 1901
        **/                                                                                                            // 1902
        setValue: function(value, convertStr, response) {                                                              // 1903
            if(convertStr) {                                                                                           // 1904
                this.value = this.input.str2value(value);                                                              // 1905
            } else {                                                                                                   // 1906
                this.value = value;                                                                                    // 1907
            }                                                                                                          // 1908
            if(this.container) {                                                                                       // 1909
                this.container.option('value', this.value);                                                            // 1910
            }                                                                                                          // 1911
            $.when(this.render(response))                                                                              // 1912
            .then($.proxy(function() {                                                                                 // 1913
                this.handleEmpty();                                                                                    // 1914
            }, this));                                                                                                 // 1915
        },                                                                                                             // 1916
                                                                                                                       // 1917
        /**                                                                                                            // 1918
        Activates input of visible container (e.g. set focus)                                                          // 1919
        @method activate()                                                                                             // 1920
        **/                                                                                                            // 1921
        activate: function() {                                                                                         // 1922
            if(this.container) {                                                                                       // 1923
               this.container.activate();                                                                              // 1924
            }                                                                                                          // 1925
        },                                                                                                             // 1926
                                                                                                                       // 1927
        /**                                                                                                            // 1928
        Removes editable feature from element                                                                          // 1929
        @method destroy()                                                                                              // 1930
        **/                                                                                                            // 1931
        destroy: function() {                                                                                          // 1932
            this.disable();                                                                                            // 1933
                                                                                                                       // 1934
            if(this.container) {                                                                                       // 1935
               this.container.destroy();                                                                               // 1936
            }                                                                                                          // 1937
                                                                                                                       // 1938
            this.input.destroy();                                                                                      // 1939
                                                                                                                       // 1940
            if(this.options.toggle !== 'manual') {                                                                     // 1941
                this.$element.removeClass('editable-click');                                                           // 1942
                this.$element.off(this.options.toggle + '.editable');                                                  // 1943
            }                                                                                                          // 1944
                                                                                                                       // 1945
            this.$element.off("save.internal");                                                                        // 1946
                                                                                                                       // 1947
            this.$element.removeClass('editable editable-open editable-disabled');                                     // 1948
            this.$element.removeData('editable');                                                                      // 1949
        }                                                                                                              // 1950
    };                                                                                                                 // 1951
                                                                                                                       // 1952
    /* EDITABLE PLUGIN DEFINITION                                                                                      // 1953
    * ======================= */                                                                                       // 1954
                                                                                                                       // 1955
    /**                                                                                                                // 1956
    jQuery method to initialize editable element.                                                                      // 1957
                                                                                                                       // 1958
    @method $().editable(options)                                                                                      // 1959
    @params {Object} options                                                                                           // 1960
    @example                                                                                                           // 1961
    $('#username').editable({                                                                                          // 1962
        type: 'text',                                                                                                  // 1963
        url: '/post',                                                                                                  // 1964
        pk: 1                                                                                                          // 1965
    });                                                                                                                // 1966
    **/                                                                                                                // 1967
    $.fn.editable = function (option) {                                                                                // 1968
        //special API methods returning non-jquery object                                                              // 1969
        var result = {}, args = arguments, datakey = 'editable';                                                       // 1970
        switch (option) {                                                                                              // 1971
            /**                                                                                                        // 1972
            Runs client-side validation for all matched editables                                                      // 1973
                                                                                                                       // 1974
            @method validate()                                                                                         // 1975
            @returns {Object} validation errors map                                                                    // 1976
            @example                                                                                                   // 1977
            $('#username, #fullname').editable('validate');                                                            // 1978
            // possible result:                                                                                        // 1979
            {                                                                                                          // 1980
              username: "username is required",                                                                        // 1981
              fullname: "fullname should be minimum 3 letters length"                                                  // 1982
            }                                                                                                          // 1983
            **/                                                                                                        // 1984
            case 'validate':                                                                                           // 1985
                this.each(function () {                                                                                // 1986
                    var $this = $(this), data = $this.data(datakey), error;                                            // 1987
                    if (data && (error = data.validate())) {                                                           // 1988
                        result[data.options.name] = error;                                                             // 1989
                    }                                                                                                  // 1990
                });                                                                                                    // 1991
            return result;                                                                                             // 1992
                                                                                                                       // 1993
            /**                                                                                                        // 1994
            Returns current values of editable elements.                                                               // 1995
            Note that it returns an **object** with name-value pairs, not a value itself. It allows to get data from several elements.    
            If value of some editable is `null` or `undefined` it is excluded from result object.                      // 1997
            When param `isSingle` is set to **true** - it is supposed you have single element and will return value of editable instead of object.   
                                                                                                                       // 1999
            @method getValue()                                                                                         // 2000
            @param {bool} isSingle whether to return just value of single element                                      // 2001
            @returns {Object} object of element names and values                                                       // 2002
            @example                                                                                                   // 2003
            $('#username, #fullname').editable('getValue');                                                            // 2004
            //result:                                                                                                  // 2005
            {                                                                                                          // 2006
            username: "superuser",                                                                                     // 2007
            fullname: "John"                                                                                           // 2008
            }                                                                                                          // 2009
            //isSingle = true                                                                                          // 2010
            $('#username').editable('getValue', true);                                                                 // 2011
            //result "superuser"                                                                                       // 2012
            **/                                                                                                        // 2013
            case 'getValue':                                                                                           // 2014
                if(arguments.length === 2 && arguments[1] === true) { //isSingle = true                                // 2015
                    result = this.eq(0).data(datakey).value;                                                           // 2016
                } else {                                                                                               // 2017
                    this.each(function () {                                                                            // 2018
                        var $this = $(this), data = $this.data(datakey);                                               // 2019
                        if (data && data.value !== undefined && data.value !== null) {                                 // 2020
                            result[data.options.name] = data.input.value2submit(data.value);                           // 2021
                        }                                                                                              // 2022
                    });                                                                                                // 2023
                }                                                                                                      // 2024
            return result;                                                                                             // 2025
                                                                                                                       // 2026
            /**                                                                                                        // 2027
            This method collects values from several editable elements and submit them all to server.                  // 2028
            Internally it runs client-side validation for all fields and submits only in case of success.              // 2029
            See <a href="#newrecord">creating new records</a> for details.                                             // 2030
            Since 1.5.1 `submit` can be applied to single element to send data programmatically. In that case          // 2031
            `url`, `success` and `error` is taken from initial options and you can just call `$('#username').editable('submit')`. 
                                                                                                                       // 2033
            @method submit(options)                                                                                    // 2034
            @param {object} options                                                                                    // 2035
            @param {object} options.url url to submit data                                                             // 2036
            @param {object} options.data additional data to submit                                                     // 2037
            @param {object} options.ajaxOptions additional ajax options                                                // 2038
            @param {function} options.error(obj) error handler                                                         // 2039
            @param {function} options.success(obj,config) success handler                                              // 2040
            @returns {Object} jQuery object                                                                            // 2041
            **/                                                                                                        // 2042
            case 'submit':  //collects value, validate and submit to server for creating new record                    // 2043
                var config = arguments[1] || {},                                                                       // 2044
                $elems = this,                                                                                         // 2045
                errors = this.editable('validate');                                                                    // 2046
                                                                                                                       // 2047
                // validation ok                                                                                       // 2048
                if($.isEmptyObject(errors)) {                                                                          // 2049
                    var ajaxOptions = {};                                                                              // 2050
                                                                                                                       // 2051
                    // for single element use url, success etc from options                                            // 2052
                    if($elems.length === 1) {                                                                          // 2053
                        var editable = $elems.data('editable');                                                        // 2054
                        //standard params                                                                              // 2055
                        var params = {                                                                                 // 2056
                            name: editable.options.name || '',                                                         // 2057
                            value: editable.input.value2submit(editable.value),                                        // 2058
                            pk: (typeof editable.options.pk === 'function') ?                                          // 2059
                                editable.options.pk.call(editable.options.scope) :                                     // 2060
                                editable.options.pk                                                                    // 2061
                        };                                                                                             // 2062
                                                                                                                       // 2063
                        //additional params                                                                            // 2064
                        if(typeof editable.options.params === 'function') {                                            // 2065
                            params = editable.options.params.call(editable.options.scope, params);                     // 2066
                        } else {                                                                                       // 2067
                            //try parse json in single quotes (from data-params attribute)                             // 2068
                            editable.options.params = $.fn.editableutils.tryParseJson(editable.options.params, true);   
                            $.extend(params, editable.options.params);                                                 // 2070
                        }                                                                                              // 2071
                                                                                                                       // 2072
                        ajaxOptions = {                                                                                // 2073
                            url: editable.options.url,                                                                 // 2074
                            data: params,                                                                              // 2075
                            type: 'POST'                                                                               // 2076
                        };                                                                                             // 2077
                                                                                                                       // 2078
                        // use success / error from options                                                            // 2079
                        config.success = config.success || editable.options.success;                                   // 2080
                        config.error = config.error || editable.options.error;                                         // 2081
                                                                                                                       // 2082
                    // multiple elements                                                                               // 2083
                    } else {                                                                                           // 2084
                        var values = this.editable('getValue');                                                        // 2085
                                                                                                                       // 2086
                        ajaxOptions = {                                                                                // 2087
                            url: config.url,                                                                           // 2088
                            data: values,                                                                              // 2089
                            type: 'POST'                                                                               // 2090
                        };                                                                                             // 2091
                    }                                                                                                  // 2092
                                                                                                                       // 2093
                    // ajax success callabck (response 200 OK)                                                         // 2094
                    ajaxOptions.success = typeof config.success === 'function' ? function(response) {                  // 2095
                            config.success.call($elems, response, config);                                             // 2096
                        } : $.noop;                                                                                    // 2097
                                                                                                                       // 2098
                    // ajax error callabck                                                                             // 2099
                    ajaxOptions.error = typeof config.error === 'function' ? function() {                              // 2100
                             config.error.apply($elems, arguments);                                                    // 2101
                        } : $.noop;                                                                                    // 2102
                                                                                                                       // 2103
                    // extend ajaxOptions                                                                              // 2104
                    if(config.ajaxOptions) {                                                                           // 2105
                        $.extend(ajaxOptions, config.ajaxOptions);                                                     // 2106
                    }                                                                                                  // 2107
                                                                                                                       // 2108
                    // extra data                                                                                      // 2109
                    if(config.data) {                                                                                  // 2110
                        $.extend(ajaxOptions.data, config.data);                                                       // 2111
                    }                                                                                                  // 2112
                                                                                                                       // 2113
                    // perform ajax request                                                                            // 2114
                    $.ajax(ajaxOptions);                                                                               // 2115
                } else { //client-side validation error                                                                // 2116
                    if(typeof config.error === 'function') {                                                           // 2117
                        config.error.call($elems, errors);                                                             // 2118
                    }                                                                                                  // 2119
                }                                                                                                      // 2120
            return this;                                                                                               // 2121
        }                                                                                                              // 2122
                                                                                                                       // 2123
        //return jquery object                                                                                         // 2124
        return this.each(function () {                                                                                 // 2125
            var $this = $(this),                                                                                       // 2126
                data = $this.data(datakey),                                                                            // 2127
                options = typeof option === 'object' && option;                                                        // 2128
                                                                                                                       // 2129
            //for delegated targets do not store `editable` object for element                                         // 2130
            //it's allows several different selectors.                                                                 // 2131
            //see: https://github.com/vitalets/x-editable/issues/312                                                   // 2132
            if(options && options.selector) {                                                                          // 2133
                data = new Editable(this, options);                                                                    // 2134
                return;                                                                                                // 2135
            }                                                                                                          // 2136
                                                                                                                       // 2137
            if (!data) {                                                                                               // 2138
                $this.data(datakey, (data = new Editable(this, options)));                                             // 2139
            }                                                                                                          // 2140
                                                                                                                       // 2141
            if (typeof option === 'string') { //call method                                                            // 2142
                data[option].apply(data, Array.prototype.slice.call(args, 1));                                         // 2143
            }                                                                                                          // 2144
        });                                                                                                            // 2145
    };                                                                                                                 // 2146
                                                                                                                       // 2147
                                                                                                                       // 2148
    $.fn.editable.defaults = {                                                                                         // 2149
        /**                                                                                                            // 2150
        Type of input. Can be <code>text|textarea|select|date|checklist</code> and more                                // 2151
                                                                                                                       // 2152
        @property type                                                                                                 // 2153
        @type string                                                                                                   // 2154
        @default 'text'                                                                                                // 2155
        **/                                                                                                            // 2156
        type: 'text',                                                                                                  // 2157
        /**                                                                                                            // 2158
        Sets disabled state of editable                                                                                // 2159
                                                                                                                       // 2160
        @property disabled                                                                                             // 2161
        @type boolean                                                                                                  // 2162
        @default false                                                                                                 // 2163
        **/                                                                                                            // 2164
        disabled: false,                                                                                               // 2165
        /**                                                                                                            // 2166
        How to toggle editable. Can be <code>click|dblclick|mouseenter|manual</code>.                                  // 2167
        When set to <code>manual</code> you should manually call <code>show/hide</code> methods of editable.           // 2168
        **Note**: if you call <code>show</code> or <code>toggle</code> inside **click** handler of some DOM element,   // 2169
        you need to apply <code>e.stopPropagation()</code> because containers are being closed on any click on document.
                                                                                                                       // 2171
        @example                                                                                                       // 2172
        $('#edit-button').click(function(e) {                                                                          // 2173
            e.stopPropagation();                                                                                       // 2174
            $('#username').editable('toggle');                                                                         // 2175
        });                                                                                                            // 2176
                                                                                                                       // 2177
        @property toggle                                                                                               // 2178
        @type string                                                                                                   // 2179
        @default 'click'                                                                                               // 2180
        **/                                                                                                            // 2181
        toggle: 'click',                                                                                               // 2182
        /**                                                                                                            // 2183
        Text shown when element is empty.                                                                              // 2184
                                                                                                                       // 2185
        @property emptytext                                                                                            // 2186
        @type string                                                                                                   // 2187
        @default 'Empty'                                                                                               // 2188
        **/                                                                                                            // 2189
        emptytext: 'Empty',                                                                                            // 2190
        /**                                                                                                            // 2191
        Allows to automatically set element's text based on it's value. Can be <code>auto|always|never</code>. Useful for select and date.
        For example, if dropdown list is <code>{1: 'a', 2: 'b'}</code> and element's value set to <code>1</code>, it's html will be automatically set to <code>'a'</code>.  
        <code>auto</code> - text will be automatically set only if element is empty.                                   // 2194
        <code>always|never</code> - always(never) try to set element's text.                                           // 2195
                                                                                                                       // 2196
        @property autotext                                                                                             // 2197
        @type string                                                                                                   // 2198
        @default 'auto'                                                                                                // 2199
        **/                                                                                                            // 2200
        autotext: 'auto',                                                                                              // 2201
        /**                                                                                                            // 2202
        Initial value of input. If not set, taken from element's text.                                                 // 2203
        Note, that if element's text is empty - text is automatically generated from value and can be customized (see `autotext` option).  
        For example, to display currency sign:                                                                         // 2205
        @example                                                                                                       // 2206
        <a id="price" data-type="text" data-value="100"></a>                                                           // 2207
        <script>                                                                                                       // 2208
        $('#price').editable({                                                                                         // 2209
            ...                                                                                                        // 2210
            display: function(value) {                                                                                 // 2211
              $(this).text(value + '$');                                                                               // 2212
            }                                                                                                          // 2213
        })                                                                                                             // 2214
        </script>                                                                                                      // 2215
                                                                                                                       // 2216
        @property value                                                                                                // 2217
        @type mixed                                                                                                    // 2218
        @default element's text                                                                                        // 2219
        **/                                                                                                            // 2220
        value: null,                                                                                                   // 2221
        /**                                                                                                            // 2222
        Callback to perform custom displaying of value in element's text.                                              // 2223
        If `null`, default input's display used.                                                                       // 2224
        If `false`, no displaying methods will be called, element's text will never change.                            // 2225
        Runs under element's scope.                                                                                    // 2226
        _**Parameters:**_                                                                                              // 2227
                                                                                                                       // 2228
        * `value` current value to be displayed                                                                        // 2229
        * `response` server response (if display called after ajax submit), since 1.4.0                                // 2230
                                                                                                                       // 2231
        For _inputs with source_ (select, checklist) parameters are different:                                         // 2232
                                                                                                                       // 2233
        * `value` current value to be displayed                                                                        // 2234
        * `sourceData` array of items for current input (e.g. dropdown items)                                          // 2235
        * `response` server response (if display called after ajax submit), since 1.4.0                                // 2236
                                                                                                                       // 2237
        To get currently selected items use `$.fn.editableutils.itemsByValue(value, sourceData)`.                      // 2238
                                                                                                                       // 2239
        @property display                                                                                              // 2240
        @type function|boolean                                                                                         // 2241
        @default null                                                                                                  // 2242
        @since 1.2.0                                                                                                   // 2243
        @example                                                                                                       // 2244
        display: function(value, sourceData) {                                                                         // 2245
           //display checklist as comma-separated values                                                               // 2246
           var html = [],                                                                                              // 2247
               checked = $.fn.editableutils.itemsByValue(value, sourceData);                                           // 2248
                                                                                                                       // 2249
           if(checked.length) {                                                                                        // 2250
               $.each(checked, function(i, v) { html.push($.fn.editableutils.escape(v.text)); });                      // 2251
               $(this).html(html.join(', '));                                                                          // 2252
           } else {                                                                                                    // 2253
               $(this).empty();                                                                                        // 2254
           }                                                                                                           // 2255
        }                                                                                                              // 2256
        **/                                                                                                            // 2257
        display: null,                                                                                                 // 2258
        /**                                                                                                            // 2259
        Css class applied when editable text is empty.                                                                 // 2260
                                                                                                                       // 2261
        @property emptyclass                                                                                           // 2262
        @type string                                                                                                   // 2263
        @since 1.4.1                                                                                                   // 2264
        @default editable-empty                                                                                        // 2265
        **/                                                                                                            // 2266
        emptyclass: 'editable-empty',                                                                                  // 2267
        /**                                                                                                            // 2268
        Css class applied when value was stored but not sent to server (`pk` is empty or `send = 'never'`).            // 2269
        You may set it to `null` if you work with editables locally and submit them together.                          // 2270
                                                                                                                       // 2271
        @property unsavedclass                                                                                         // 2272
        @type string                                                                                                   // 2273
        @since 1.4.1                                                                                                   // 2274
        @default editable-unsaved                                                                                      // 2275
        **/                                                                                                            // 2276
        unsavedclass: 'editable-unsaved',                                                                              // 2277
        /**                                                                                                            // 2278
        If selector is provided, editable will be delegated to the specified targets.                                  // 2279
        Usefull for dynamically generated DOM elements.                                                                // 2280
        **Please note**, that delegated targets can't be initialized with `emptytext` and `autotext` options,          // 2281
        as they actually become editable only after first click.                                                       // 2282
        You should manually set class `editable-click` to these elements.                                              // 2283
        Also, if element originally empty you should add class `editable-empty`, set `data-value=""` and write emptytext into element:
                                                                                                                       // 2285
        @property selector                                                                                             // 2286
        @type string                                                                                                   // 2287
        @since 1.4.1                                                                                                   // 2288
        @default null                                                                                                  // 2289
        @example                                                                                                       // 2290
        <div id="user">                                                                                                // 2291
          <!-- empty -->                                                                                               // 2292
          <a href="#" data-name="username" data-type="text" class="editable-click editable-empty" data-value="" title="Username">Empty</a>
          <!-- non-empty -->                                                                                           // 2294
          <a href="#" data-name="group" data-type="select" data-source="/groups" data-value="1" class="editable-click" title="Group">Operator</a>
        </div>                                                                                                         // 2296
                                                                                                                       // 2297
        <script>                                                                                                       // 2298
        $('#user').editable({                                                                                          // 2299
            selector: 'a',                                                                                             // 2300
            url: '/post',                                                                                              // 2301
            pk: 1                                                                                                      // 2302
        });                                                                                                            // 2303
        </script>                                                                                                      // 2304
        **/                                                                                                            // 2305
        selector: null,                                                                                                // 2306
        /**                                                                                                            // 2307
        Color used to highlight element after update. Implemented via CSS3 transition, works in modern browsers.       // 2308
                                                                                                                       // 2309
        @property highlight                                                                                            // 2310
        @type string|boolean                                                                                           // 2311
        @since 1.4.5                                                                                                   // 2312
        @default #FFFF80                                                                                               // 2313
        **/                                                                                                            // 2314
        highlight: '#FFFF80'                                                                                           // 2315
    };                                                                                                                 // 2316
                                                                                                                       // 2317
}(window.jQuery));                                                                                                     // 2318
                                                                                                                       // 2319
/**                                                                                                                    // 2320
AbstractInput - base class for all editable inputs.                                                                    // 2321
It defines interface to be implemented by any input type.                                                              // 2322
To create your own input you can inherit from this class.                                                              // 2323
                                                                                                                       // 2324
@class abstractinput                                                                                                   // 2325
**/                                                                                                                    // 2326
(function ($) {                                                                                                        // 2327
    "use strict";                                                                                                      // 2328
                                                                                                                       // 2329
    //types                                                                                                            // 2330
    $.fn.editabletypes = {};                                                                                           // 2331
                                                                                                                       // 2332
    var AbstractInput = function () { };                                                                               // 2333
                                                                                                                       // 2334
    AbstractInput.prototype = {                                                                                        // 2335
       /**                                                                                                             // 2336
        Initializes input                                                                                              // 2337
                                                                                                                       // 2338
        @method init()                                                                                                 // 2339
        **/                                                                                                            // 2340
       init: function(type, options, defaults) {                                                                       // 2341
           this.type = type;                                                                                           // 2342
           this.options = $.extend({}, defaults, options);                                                             // 2343
       },                                                                                                              // 2344
                                                                                                                       // 2345
       /*                                                                                                              // 2346
       this method called before render to init $tpl that is inserted in DOM                                           // 2347
       */                                                                                                              // 2348
       prerender: function() {                                                                                         // 2349
           this.$tpl = $(this.options.tpl); //whole tpl as jquery object                                               // 2350
           this.$input = this.$tpl;         //control itself, can be changed in render method                          // 2351
           this.$clear = null;              //clear button                                                             // 2352
           this.error = null;               //error message, if input cannot be rendered                               // 2353
       },                                                                                                              // 2354
                                                                                                                       // 2355
       /**                                                                                                             // 2356
        Renders input from tpl. Can return jQuery deferred object.                                                     // 2357
        Can be overwritten in child objects                                                                            // 2358
                                                                                                                       // 2359
        @method render()                                                                                               // 2360
       **/                                                                                                             // 2361
       render: function() {                                                                                            // 2362
                                                                                                                       // 2363
       },                                                                                                              // 2364
                                                                                                                       // 2365
       /**                                                                                                             // 2366
        Sets element's html by value.                                                                                  // 2367
                                                                                                                       // 2368
        @method value2html(value, element)                                                                             // 2369
        @param {mixed} value                                                                                           // 2370
        @param {DOMElement} element                                                                                    // 2371
       **/                                                                                                             // 2372
       value2html: function(value, element) {                                                                          // 2373
           $(element)[this.options.escape ? 'text' : 'html']($.trim(value));                                           // 2374
       },                                                                                                              // 2375
                                                                                                                       // 2376
       /**                                                                                                             // 2377
        Converts element's html to value                                                                               // 2378
                                                                                                                       // 2379
        @method html2value(html)                                                                                       // 2380
        @param {string} html                                                                                           // 2381
        @returns {mixed}                                                                                               // 2382
       **/                                                                                                             // 2383
       html2value: function(html) {                                                                                    // 2384
           return $('<div>').html(html).text();                                                                        // 2385
       },                                                                                                              // 2386
                                                                                                                       // 2387
       /**                                                                                                             // 2388
        Converts value to string (for internal compare). For submitting to server used value2submit().                 // 2389
                                                                                                                       // 2390
        @method value2str(value)                                                                                       // 2391
        @param {mixed} value                                                                                           // 2392
        @returns {string}                                                                                              // 2393
       **/                                                                                                             // 2394
       value2str: function(value) {                                                                                    // 2395
           return value;                                                                                               // 2396
       },                                                                                                              // 2397
                                                                                                                       // 2398
       /**                                                                                                             // 2399
        Converts string received from server into value. Usually from `data-value` attribute.                          // 2400
                                                                                                                       // 2401
        @method str2value(str)                                                                                         // 2402
        @param {string} str                                                                                            // 2403
        @returns {mixed}                                                                                               // 2404
       **/                                                                                                             // 2405
       str2value: function(str) {                                                                                      // 2406
           return str;                                                                                                 // 2407
       },                                                                                                              // 2408
                                                                                                                       // 2409
       /**                                                                                                             // 2410
        Converts value for submitting to server. Result can be string or object.                                       // 2411
                                                                                                                       // 2412
        @method value2submit(value)                                                                                    // 2413
        @param {mixed} value                                                                                           // 2414
        @returns {mixed}                                                                                               // 2415
       **/                                                                                                             // 2416
       value2submit: function(value) {                                                                                 // 2417
           return value;                                                                                               // 2418
       },                                                                                                              // 2419
                                                                                                                       // 2420
       /**                                                                                                             // 2421
        Sets value of input.                                                                                           // 2422
                                                                                                                       // 2423
        @method value2input(value)                                                                                     // 2424
        @param {mixed} value                                                                                           // 2425
       **/                                                                                                             // 2426
       value2input: function(value) {                                                                                  // 2427
           this.$input.val(value);                                                                                     // 2428
       },                                                                                                              // 2429
                                                                                                                       // 2430
       /**                                                                                                             // 2431
        Returns value of input. Value can be object (e.g. datepicker)                                                  // 2432
                                                                                                                       // 2433
        @method input2value()                                                                                          // 2434
       **/                                                                                                             // 2435
       input2value: function() {                                                                                       // 2436
           return this.$input.val();                                                                                   // 2437
       },                                                                                                              // 2438
                                                                                                                       // 2439
       /**                                                                                                             // 2440
        Activates input. For text it sets focus.                                                                       // 2441
                                                                                                                       // 2442
        @method activate()                                                                                             // 2443
       **/                                                                                                             // 2444
       activate: function() {                                                                                          // 2445
           if(this.$input.is(':visible')) {                                                                            // 2446
               this.$input.focus();                                                                                    // 2447
           }                                                                                                           // 2448
       },                                                                                                              // 2449
                                                                                                                       // 2450
       /**                                                                                                             // 2451
        Creates input.                                                                                                 // 2452
                                                                                                                       // 2453
        @method clear()                                                                                                // 2454
       **/                                                                                                             // 2455
       clear: function() {                                                                                             // 2456
           this.$input.val(null);                                                                                      // 2457
       },                                                                                                              // 2458
                                                                                                                       // 2459
       /**                                                                                                             // 2460
        method to escape html.                                                                                         // 2461
       **/                                                                                                             // 2462
       escape: function(str) {                                                                                         // 2463
           return $('<div>').text(str).html();                                                                         // 2464
       },                                                                                                              // 2465
                                                                                                                       // 2466
       /**                                                                                                             // 2467
        attach handler to automatically submit form when value changed (useful when buttons not shown)                 // 2468
       **/                                                                                                             // 2469
       autosubmit: function() {                                                                                        // 2470
                                                                                                                       // 2471
       },                                                                                                              // 2472
                                                                                                                       // 2473
       /**                                                                                                             // 2474
       Additional actions when destroying element                                                                      // 2475
       **/                                                                                                             // 2476
       destroy: function() {                                                                                           // 2477
       },                                                                                                              // 2478
                                                                                                                       // 2479
       // -------- helper functions --------                                                                           // 2480
       setClass: function() {                                                                                          // 2481
           if(this.options.inputclass) {                                                                               // 2482
               this.$input.addClass(this.options.inputclass);                                                          // 2483
           }                                                                                                           // 2484
       },                                                                                                              // 2485
                                                                                                                       // 2486
       setAttr: function(attr) {                                                                                       // 2487
           if (this.options[attr] !== undefined && this.options[attr] !== null) {                                      // 2488
               this.$input.attr(attr, this.options[attr]);                                                             // 2489
           }                                                                                                           // 2490
       },                                                                                                              // 2491
                                                                                                                       // 2492
       option: function(key, value) {                                                                                  // 2493
            this.options[key] = value;                                                                                 // 2494
       }                                                                                                               // 2495
                                                                                                                       // 2496
    };                                                                                                                 // 2497
                                                                                                                       // 2498
    AbstractInput.defaults = {                                                                                         // 2499
        /**                                                                                                            // 2500
        HTML template of input. Normally you should not change it.                                                     // 2501
                                                                                                                       // 2502
        @property tpl                                                                                                  // 2503
        @type string                                                                                                   // 2504
        @default ''                                                                                                    // 2505
        **/                                                                                                            // 2506
        tpl: '',                                                                                                       // 2507
        /**                                                                                                            // 2508
        CSS class automatically applied to input                                                                       // 2509
                                                                                                                       // 2510
        @property inputclass                                                                                           // 2511
        @type string                                                                                                   // 2512
        @default null                                                                                                  // 2513
        **/                                                                                                            // 2514
        inputclass: null,                                                                                              // 2515
                                                                                                                       // 2516
        /**                                                                                                            // 2517
        If `true` - html will be escaped in content of element via $.text() method.                                    // 2518
        If `false` - html will not be escaped, $.html() used.                                                          // 2519
        When you use own `display` function, this option obviosly has no effect.                                       // 2520
                                                                                                                       // 2521
        @property escape                                                                                               // 2522
        @type boolean                                                                                                  // 2523
        @since 1.5.0                                                                                                   // 2524
        @default true                                                                                                  // 2525
        **/                                                                                                            // 2526
        escape: true,                                                                                                  // 2527
                                                                                                                       // 2528
        //scope for external methods (e.g. source defined as function)                                                 // 2529
        //for internal use only                                                                                        // 2530
        scope: null,                                                                                                   // 2531
                                                                                                                       // 2532
        //need to re-declare showbuttons here to get it's value from common config (passed only options existing in defaults)
        showbuttons: true                                                                                              // 2534
    };                                                                                                                 // 2535
                                                                                                                       // 2536
    $.extend($.fn.editabletypes, {abstractinput: AbstractInput});                                                      // 2537
                                                                                                                       // 2538
}(window.jQuery));                                                                                                     // 2539
                                                                                                                       // 2540
/**                                                                                                                    // 2541
List - abstract class for inputs that have source option loaded from js array or via ajax                              // 2542
                                                                                                                       // 2543
@class list                                                                                                            // 2544
@extends abstractinput                                                                                                 // 2545
**/                                                                                                                    // 2546
(function ($) {                                                                                                        // 2547
    "use strict";                                                                                                      // 2548
                                                                                                                       // 2549
    var List = function (options) {                                                                                    // 2550
                                                                                                                       // 2551
    };                                                                                                                 // 2552
                                                                                                                       // 2553
    $.fn.editableutils.inherit(List, $.fn.editabletypes.abstractinput);                                                // 2554
                                                                                                                       // 2555
    $.extend(List.prototype, {                                                                                         // 2556
        render: function () {                                                                                          // 2557
            var deferred = $.Deferred();                                                                               // 2558
                                                                                                                       // 2559
            this.error = null;                                                                                         // 2560
            this.onSourceReady(function () {                                                                           // 2561
                this.renderList();                                                                                     // 2562
                deferred.resolve();                                                                                    // 2563
            }, function () {                                                                                           // 2564
                this.error = this.options.sourceError;                                                                 // 2565
                deferred.resolve();                                                                                    // 2566
            });                                                                                                        // 2567
                                                                                                                       // 2568
            return deferred.promise();                                                                                 // 2569
        },                                                                                                             // 2570
                                                                                                                       // 2571
        html2value: function (html) {                                                                                  // 2572
            return null; //can't set value by text                                                                     // 2573
        },                                                                                                             // 2574
                                                                                                                       // 2575
        value2html: function (value, element, display, response) {                                                     // 2576
            var deferred = $.Deferred(),                                                                               // 2577
                success = function () {                                                                                // 2578
                    if(typeof display === 'function') {                                                                // 2579
                        //custom display method                                                                        // 2580
                        display.call(element, value, this.sourceData, response);                                       // 2581
                    } else {                                                                                           // 2582
                        this.value2htmlFinal(value, element);                                                          // 2583
                    }                                                                                                  // 2584
                    deferred.resolve();                                                                                // 2585
               };                                                                                                      // 2586
                                                                                                                       // 2587
            //for null value just call success without loading source                                                  // 2588
            if(value === null) {                                                                                       // 2589
               success.call(this);                                                                                     // 2590
            } else {                                                                                                   // 2591
               this.onSourceReady(success, function () { deferred.resolve(); });                                       // 2592
            }                                                                                                          // 2593
                                                                                                                       // 2594
            return deferred.promise();                                                                                 // 2595
        },                                                                                                             // 2596
                                                                                                                       // 2597
        // ------------- additional functions ------------                                                             // 2598
                                                                                                                       // 2599
        onSourceReady: function (success, error) {                                                                     // 2600
            //run source if it function                                                                                // 2601
            var source;                                                                                                // 2602
            if ($.isFunction(this.options.source)) {                                                                   // 2603
                source = this.options.source.call(this.options.scope);                                                 // 2604
                this.sourceData = null;                                                                                // 2605
                //note: if function returns the same source as URL - sourceData will be taken from cahce and no extra request performed
            } else {                                                                                                   // 2607
                source = this.options.source;                                                                          // 2608
            }                                                                                                          // 2609
                                                                                                                       // 2610
            //if allready loaded just call success                                                                     // 2611
            if(this.options.sourceCache && $.isArray(this.sourceData)) {                                               // 2612
                success.call(this);                                                                                    // 2613
                return;                                                                                                // 2614
            }                                                                                                          // 2615
                                                                                                                       // 2616
            //try parse json in single quotes (for double quotes jquery does automatically)                            // 2617
            try {                                                                                                      // 2618
                source = $.fn.editableutils.tryParseJson(source, false);                                               // 2619
            } catch (e) {                                                                                              // 2620
                error.call(this);                                                                                      // 2621
                return;                                                                                                // 2622
            }                                                                                                          // 2623
                                                                                                                       // 2624
            //loading from url                                                                                         // 2625
            if (typeof source === 'string') {                                                                          // 2626
                //try to get sourceData from cache                                                                     // 2627
                if(this.options.sourceCache) {                                                                         // 2628
                    var cacheID = source,                                                                              // 2629
                    cache;                                                                                             // 2630
                                                                                                                       // 2631
                    if (!$(document).data(cacheID)) {                                                                  // 2632
                        $(document).data(cacheID, {});                                                                 // 2633
                    }                                                                                                  // 2634
                    cache = $(document).data(cacheID);                                                                 // 2635
                                                                                                                       // 2636
                    //check for cached data                                                                            // 2637
                    if (cache.loading === false && cache.sourceData) { //take source from cache                        // 2638
                        this.sourceData = cache.sourceData;                                                            // 2639
                        this.doPrepend();                                                                              // 2640
                        success.call(this);                                                                            // 2641
                        return;                                                                                        // 2642
                    } else if (cache.loading === true) { //cache is loading, put callback in stack to be called later  // 2643
                        cache.callbacks.push($.proxy(function () {                                                     // 2644
                            this.sourceData = cache.sourceData;                                                        // 2645
                            this.doPrepend();                                                                          // 2646
                            success.call(this);                                                                        // 2647
                        }, this));                                                                                     // 2648
                                                                                                                       // 2649
                        //also collecting error callbacks                                                              // 2650
                        cache.err_callbacks.push($.proxy(error, this));                                                // 2651
                        return;                                                                                        // 2652
                    } else { //no cache yet, activate it                                                               // 2653
                        cache.loading = true;                                                                          // 2654
                        cache.callbacks = [];                                                                          // 2655
                        cache.err_callbacks = [];                                                                      // 2656
                    }                                                                                                  // 2657
                }                                                                                                      // 2658
                                                                                                                       // 2659
                //ajaxOptions for source. Can be overwritten bt options.sourceOptions                                  // 2660
                var ajaxOptions = $.extend({                                                                           // 2661
                    url: source,                                                                                       // 2662
                    type: 'get',                                                                                       // 2663
                    cache: false,                                                                                      // 2664
                    dataType: 'json',                                                                                  // 2665
                    success: $.proxy(function (data) {                                                                 // 2666
                        if(cache) {                                                                                    // 2667
                            cache.loading = false;                                                                     // 2668
                        }                                                                                              // 2669
                        this.sourceData = this.makeArray(data);                                                        // 2670
                        if($.isArray(this.sourceData)) {                                                               // 2671
                            if(cache) {                                                                                // 2672
                                //store result in cache                                                                // 2673
                                cache.sourceData = this.sourceData;                                                    // 2674
                                //run success callbacks for other fields waiting for this source                       // 2675
                                $.each(cache.callbacks, function () { this.call(); });                                 // 2676
                            }                                                                                          // 2677
                            this.doPrepend();                                                                          // 2678
                            success.call(this);                                                                        // 2679
                        } else {                                                                                       // 2680
                            error.call(this);                                                                          // 2681
                            if(cache) {                                                                                // 2682
                                //run error callbacks for other fields waiting for this source                         // 2683
                                $.each(cache.err_callbacks, function () { this.call(); });                             // 2684
                            }                                                                                          // 2685
                        }                                                                                              // 2686
                    }, this),                                                                                          // 2687
                    error: $.proxy(function () {                                                                       // 2688
                        error.call(this);                                                                              // 2689
                        if(cache) {                                                                                    // 2690
                             cache.loading = false;                                                                    // 2691
                             //run error callbacks for other fields                                                    // 2692
                             $.each(cache.err_callbacks, function () { this.call(); });                                // 2693
                        }                                                                                              // 2694
                    }, this)                                                                                           // 2695
                }, this.options.sourceOptions);                                                                        // 2696
                                                                                                                       // 2697
                //loading sourceData from server                                                                       // 2698
                $.ajax(ajaxOptions);                                                                                   // 2699
                                                                                                                       // 2700
            } else { //options as json/array                                                                           // 2701
                this.sourceData = this.makeArray(source);                                                              // 2702
                                                                                                                       // 2703
                if($.isArray(this.sourceData)) {                                                                       // 2704
                    this.doPrepend();                                                                                  // 2705
                    success.call(this);                                                                                // 2706
                } else {                                                                                               // 2707
                    error.call(this);                                                                                  // 2708
                }                                                                                                      // 2709
            }                                                                                                          // 2710
        },                                                                                                             // 2711
                                                                                                                       // 2712
        doPrepend: function () {                                                                                       // 2713
            if(this.options.prepend === null || this.options.prepend === undefined) {                                  // 2714
                return;                                                                                                // 2715
            }                                                                                                          // 2716
                                                                                                                       // 2717
            if(!$.isArray(this.prependData)) {                                                                         // 2718
                //run prepend if it is function (once)                                                                 // 2719
                if ($.isFunction(this.options.prepend)) {                                                              // 2720
                    this.options.prepend = this.options.prepend.call(this.options.scope);                              // 2721
                }                                                                                                      // 2722
                                                                                                                       // 2723
                //try parse json in single quotes                                                                      // 2724
                this.options.prepend = $.fn.editableutils.tryParseJson(this.options.prepend, true);                    // 2725
                                                                                                                       // 2726
                //convert prepend from string to object                                                                // 2727
                if (typeof this.options.prepend === 'string') {                                                        // 2728
                    this.options.prepend = {'': this.options.prepend};                                                 // 2729
                }                                                                                                      // 2730
                                                                                                                       // 2731
                this.prependData = this.makeArray(this.options.prepend);                                               // 2732
            }                                                                                                          // 2733
                                                                                                                       // 2734
            if($.isArray(this.prependData) && $.isArray(this.sourceData)) {                                            // 2735
                this.sourceData = this.prependData.concat(this.sourceData);                                            // 2736
            }                                                                                                          // 2737
        },                                                                                                             // 2738
                                                                                                                       // 2739
        /*                                                                                                             // 2740
         renders input list                                                                                            // 2741
        */                                                                                                             // 2742
        renderList: function() {                                                                                       // 2743
            // this method should be overwritten in child class                                                        // 2744
        },                                                                                                             // 2745
                                                                                                                       // 2746
         /*                                                                                                            // 2747
         set element's html by value                                                                                   // 2748
        */                                                                                                             // 2749
        value2htmlFinal: function(value, element) {                                                                    // 2750
            // this method should be overwritten in child class                                                        // 2751
        },                                                                                                             // 2752
                                                                                                                       // 2753
        /**                                                                                                            // 2754
        * convert data to array suitable for sourceData, e.g. [{value: 1, text: 'abc'}, {...}]                         // 2755
        */                                                                                                             // 2756
        makeArray: function(data) {                                                                                    // 2757
            var count, obj, result = [], item, iterateItem;                                                            // 2758
            if(!data || typeof data === 'string') {                                                                    // 2759
                return null;                                                                                           // 2760
            }                                                                                                          // 2761
                                                                                                                       // 2762
            if($.isArray(data)) { //array                                                                              // 2763
                /*                                                                                                     // 2764
                   function to iterate inside item of array if item is object.                                         // 2765
                   Caclulates count of keys in item and store in obj.                                                  // 2766
                */                                                                                                     // 2767
                iterateItem = function (k, v) {                                                                        // 2768
                    obj = {value: k, text: v};                                                                         // 2769
                    if(count++ >= 2) {                                                                                 // 2770
                        return false;// exit from `each` if item has more than one key.                                // 2771
                    }                                                                                                  // 2772
                };                                                                                                     // 2773
                                                                                                                       // 2774
                for(var i = 0; i < data.length; i++) {                                                                 // 2775
                    item = data[i];                                                                                    // 2776
                    if(typeof item === 'object') {                                                                     // 2777
                        count = 0; //count of keys inside item                                                         // 2778
                        $.each(item, iterateItem);                                                                     // 2779
                        //case: [{val1: 'text1'}, {val2: 'text2} ...]                                                  // 2780
                        if(count === 1) {                                                                              // 2781
                            result.push(obj);                                                                          // 2782
                            //case: [{value: 1, text: 'text1'}, {value: 2, text: 'text2'}, ...]                        // 2783
                        } else if(count > 1) {                                                                         // 2784
                            //removed check of existance: item.hasOwnProperty('value') && item.hasOwnProperty('text')  // 2785
                            if(item.children) {                                                                        // 2786
                                item.children = this.makeArray(item.children);                                         // 2787
                            }                                                                                          // 2788
                            result.push(item);                                                                         // 2789
                        }                                                                                              // 2790
                    } else {                                                                                           // 2791
                        //case: ['text1', 'text2' ...]                                                                 // 2792
                        result.push({value: item, text: item});                                                        // 2793
                    }                                                                                                  // 2794
                }                                                                                                      // 2795
            } else {  //case: {val1: 'text1', val2: 'text2, ...}                                                       // 2796
                $.each(data, function (k, v) {                                                                         // 2797
                    result.push({value: k, text: v});                                                                  // 2798
                });                                                                                                    // 2799
            }                                                                                                          // 2800
            return result;                                                                                             // 2801
        },                                                                                                             // 2802
                                                                                                                       // 2803
        option: function(key, value) {                                                                                 // 2804
            this.options[key] = value;                                                                                 // 2805
            if(key === 'source') {                                                                                     // 2806
                this.sourceData = null;                                                                                // 2807
            }                                                                                                          // 2808
            if(key === 'prepend') {                                                                                    // 2809
                this.prependData = null;                                                                               // 2810
            }                                                                                                          // 2811
        }                                                                                                              // 2812
                                                                                                                       // 2813
    });                                                                                                                // 2814
                                                                                                                       // 2815
    List.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                          // 2816
        /**                                                                                                            // 2817
        Source data for list.                                                                                          // 2818
        If **array** - it should be in format: `[{value: 1, text: "text1"}, {value: 2, text: "text2"}, ...]`           // 2819
        For compability, object format is also supported: `{"1": "text1", "2": "text2" ...}` but it does not guarantee elements order.
                                                                                                                       // 2821
        If **string** - considered ajax url to load items. In that case results will be cached for fields with the same source and name. See also `sourceCache` option.
                                                                                                                       // 2823
        If **function**, it should return data in format above (since 1.4.0).                                          // 2824
                                                                                                                       // 2825
        Since 1.4.1 key `children` supported to render OPTGROUP (for **select** input only).                           // 2826
        `[{text: "group1", children: [{value: 1, text: "text1"}, {value: 2, text: "text2"}]}, ...]`                    // 2827
                                                                                                                       // 2828
		                                                                                                                     // 2829
        @property source                                                                                               // 2830
        @type string | array | object | function                                                                       // 2831
        @default null                                                                                                  // 2832
        **/                                                                                                            // 2833
        source: null,                                                                                                  // 2834
        /**                                                                                                            // 2835
        Data automatically prepended to the beginning of dropdown list.                                                // 2836
                                                                                                                       // 2837
        @property prepend                                                                                              // 2838
        @type string | array | object | function                                                                       // 2839
        @default false                                                                                                 // 2840
        **/                                                                                                            // 2841
        prepend: false,                                                                                                // 2842
        /**                                                                                                            // 2843
        Error message when list cannot be loaded (e.g. ajax error)                                                     // 2844
                                                                                                                       // 2845
        @property sourceError                                                                                          // 2846
        @type string                                                                                                   // 2847
        @default Error when loading list                                                                               // 2848
        **/                                                                                                            // 2849
        sourceError: 'Error when loading list',                                                                        // 2850
        /**                                                                                                            // 2851
        if <code>true</code> and source is **string url** - results will be cached for fields with the same source.    
        Usefull for editable column in grid to prevent extra requests.                                                 // 2853
                                                                                                                       // 2854
        @property sourceCache                                                                                          // 2855
        @type boolean                                                                                                  // 2856
        @default true                                                                                                  // 2857
        @since 1.2.0                                                                                                   // 2858
        **/                                                                                                            // 2859
        sourceCache: true,                                                                                             // 2860
        /**                                                                                                            // 2861
        Additional ajax options to be used in $.ajax() when loading list from server.                                  // 2862
        Useful to send extra parameters (`data` key) or change request method (`type` key).                            // 2863
                                                                                                                       // 2864
        @property sourceOptions                                                                                        // 2865
        @type object|function                                                                                          // 2866
        @default null                                                                                                  // 2867
        @since 1.5.0                                                                                                   // 2868
        **/                                                                                                            // 2869
        sourceOptions: null                                                                                            // 2870
    });                                                                                                                // 2871
                                                                                                                       // 2872
    $.fn.editabletypes.list = List;                                                                                    // 2873
                                                                                                                       // 2874
}(window.jQuery));                                                                                                     // 2875
                                                                                                                       // 2876
/**                                                                                                                    // 2877
Text input                                                                                                             // 2878
                                                                                                                       // 2879
@class text                                                                                                            // 2880
@extends abstractinput                                                                                                 // 2881
@final                                                                                                                 // 2882
@example                                                                                                               // 2883
<a href="#" id="username" data-type="text" data-pk="1">awesome</a>                                                     // 2884
<script>                                                                                                               // 2885
$(function(){                                                                                                          // 2886
    $('#username').editable({                                                                                          // 2887
        url: '/post',                                                                                                  // 2888
        title: 'Enter username'                                                                                        // 2889
    });                                                                                                                // 2890
});                                                                                                                    // 2891
</script>                                                                                                              // 2892
**/                                                                                                                    // 2893
(function ($) {                                                                                                        // 2894
    "use strict";                                                                                                      // 2895
                                                                                                                       // 2896
    var Text = function (options) {                                                                                    // 2897
        this.init('text', options, Text.defaults);                                                                     // 2898
    };                                                                                                                 // 2899
                                                                                                                       // 2900
    $.fn.editableutils.inherit(Text, $.fn.editabletypes.abstractinput);                                                // 2901
                                                                                                                       // 2902
    $.extend(Text.prototype, {                                                                                         // 2903
        render: function() {                                                                                           // 2904
           this.renderClear();                                                                                         // 2905
           this.setClass();                                                                                            // 2906
           this.setAttr('placeholder');                                                                                // 2907
        },                                                                                                             // 2908
                                                                                                                       // 2909
        activate: function() {                                                                                         // 2910
            if(this.$input.is(':visible')) {                                                                           // 2911
                this.$input.focus();                                                                                   // 2912
                $.fn.editableutils.setCursorPosition(this.$input.get(0), this.$input.val().length);                    // 2913
                if(this.toggleClear) {                                                                                 // 2914
                    this.toggleClear();                                                                                // 2915
                }                                                                                                      // 2916
            }                                                                                                          // 2917
        },                                                                                                             // 2918
                                                                                                                       // 2919
        //render clear button                                                                                          // 2920
        renderClear:  function() {                                                                                     // 2921
           if (this.options.clear) {                                                                                   // 2922
               this.$clear = $('<span class="editable-clear-x"></span>');                                              // 2923
               this.$input.after(this.$clear)                                                                          // 2924
                          .css('padding-right', 24)                                                                    // 2925
                          .keyup($.proxy(function(e) {                                                                 // 2926
                              //arrows, enter, tab, etc                                                                // 2927
                              if(~$.inArray(e.keyCode, [40,38,9,13,27])) {                                             // 2928
                                return;                                                                                // 2929
                              }                                                                                        // 2930
                                                                                                                       // 2931
                              clearTimeout(this.t);                                                                    // 2932
                              var that = this;                                                                         // 2933
                              this.t = setTimeout(function() {                                                         // 2934
                                that.toggleClear(e);                                                                   // 2935
                              }, 100);                                                                                 // 2936
                                                                                                                       // 2937
                          }, this))                                                                                    // 2938
                          .parent().css('position', 'relative');                                                       // 2939
                                                                                                                       // 2940
               this.$clear.click($.proxy(this.clear, this));                                                           // 2941
           }                                                                                                           // 2942
        },                                                                                                             // 2943
                                                                                                                       // 2944
        postrender: function() {                                                                                       // 2945
            /*                                                                                                         // 2946
            //now `clear` is positioned via css                                                                        // 2947
            if(this.$clear) {                                                                                          // 2948
                //can position clear button only here, when form is shown and height can be calculated                 // 2949
//                var h = this.$input.outerHeight(true) || 20,                                                         // 2950
                var h = this.$clear.parent().height(),                                                                 // 2951
                    delta = (h - this.$clear.height()) / 2;                                                            // 2952
                                                                                                                       // 2953
                //this.$clear.css({bottom: delta, right: delta});                                                      // 2954
            }                                                                                                          // 2955
            */                                                                                                         // 2956
        },                                                                                                             // 2957
                                                                                                                       // 2958
        //show / hide clear button                                                                                     // 2959
        toggleClear: function(e) {                                                                                     // 2960
            if(!this.$clear) {                                                                                         // 2961
                return;                                                                                                // 2962
            }                                                                                                          // 2963
                                                                                                                       // 2964
            var len = this.$input.val().length,                                                                        // 2965
                visible = this.$clear.is(':visible');                                                                  // 2966
                                                                                                                       // 2967
            if(len && !visible) {                                                                                      // 2968
                this.$clear.show();                                                                                    // 2969
            }                                                                                                          // 2970
                                                                                                                       // 2971
            if(!len && visible) {                                                                                      // 2972
                this.$clear.hide();                                                                                    // 2973
            }                                                                                                          // 2974
        },                                                                                                             // 2975
                                                                                                                       // 2976
        clear: function() {                                                                                            // 2977
           this.$clear.hide();                                                                                         // 2978
           this.$input.val('').focus();                                                                                // 2979
        }                                                                                                              // 2980
    });                                                                                                                // 2981
                                                                                                                       // 2982
    Text.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                          // 2983
        /**                                                                                                            // 2984
        @property tpl                                                                                                  // 2985
        @default <input type="text">                                                                                   // 2986
        **/                                                                                                            // 2987
        tpl: '<input type="text">',                                                                                    // 2988
        /**                                                                                                            // 2989
        Placeholder attribute of input. Shown when input is empty.                                                     // 2990
                                                                                                                       // 2991
        @property placeholder                                                                                          // 2992
        @type string                                                                                                   // 2993
        @default null                                                                                                  // 2994
        **/                                                                                                            // 2995
        placeholder: null,                                                                                             // 2996
                                                                                                                       // 2997
        /**                                                                                                            // 2998
        Whether to show `clear` button                                                                                 // 2999
                                                                                                                       // 3000
        @property clear                                                                                                // 3001
        @type boolean                                                                                                  // 3002
        @default true                                                                                                  // 3003
        **/                                                                                                            // 3004
        clear: true                                                                                                    // 3005
    });                                                                                                                // 3006
                                                                                                                       // 3007
    $.fn.editabletypes.text = Text;                                                                                    // 3008
                                                                                                                       // 3009
}(window.jQuery));                                                                                                     // 3010
                                                                                                                       // 3011
/**                                                                                                                    // 3012
Textarea input                                                                                                         // 3013
                                                                                                                       // 3014
@class textarea                                                                                                        // 3015
@extends abstractinput                                                                                                 // 3016
@final                                                                                                                 // 3017
@example                                                                                                               // 3018
<a href="#" id="comments" data-type="textarea" data-pk="1">awesome comment!</a>                                        // 3019
<script>                                                                                                               // 3020
$(function(){                                                                                                          // 3021
    $('#comments').editable({                                                                                          // 3022
        url: '/post',                                                                                                  // 3023
        title: 'Enter comments',                                                                                       // 3024
        rows: 10                                                                                                       // 3025
    });                                                                                                                // 3026
});                                                                                                                    // 3027
</script>                                                                                                              // 3028
**/                                                                                                                    // 3029
(function ($) {                                                                                                        // 3030
    "use strict";                                                                                                      // 3031
                                                                                                                       // 3032
    var Textarea = function (options) {                                                                                // 3033
        this.init('textarea', options, Textarea.defaults);                                                             // 3034
    };                                                                                                                 // 3035
                                                                                                                       // 3036
    $.fn.editableutils.inherit(Textarea, $.fn.editabletypes.abstractinput);                                            // 3037
                                                                                                                       // 3038
    $.extend(Textarea.prototype, {                                                                                     // 3039
        render: function () {                                                                                          // 3040
            this.setClass();                                                                                           // 3041
            this.setAttr('placeholder');                                                                               // 3042
            this.setAttr('rows');                                                                                      // 3043
                                                                                                                       // 3044
            //ctrl + enter                                                                                             // 3045
            this.$input.keydown(function (e) {                                                                         // 3046
                if (e.ctrlKey && e.which === 13) {                                                                     // 3047
                    $(this).closest('form').submit();                                                                  // 3048
                }                                                                                                      // 3049
            });                                                                                                        // 3050
        },                                                                                                             // 3051
                                                                                                                       // 3052
       //using `white-space: pre-wrap` solves \n  <--> BR conversion very elegant!                                     // 3053
       /*                                                                                                              // 3054
       value2html: function(value, element) {                                                                          // 3055
            var html = '', lines;                                                                                      // 3056
            if(value) {                                                                                                // 3057
                lines = value.split("\n");                                                                             // 3058
                for (var i = 0; i < lines.length; i++) {                                                               // 3059
                    lines[i] = $('<div>').text(lines[i]).html();                                                       // 3060
                }                                                                                                      // 3061
                html = lines.join('<br>');                                                                             // 3062
            }                                                                                                          // 3063
            $(element).html(html);                                                                                     // 3064
        },                                                                                                             // 3065
                                                                                                                       // 3066
        html2value: function(html) {                                                                                   // 3067
            if(!html) {                                                                                                // 3068
                return '';                                                                                             // 3069
            }                                                                                                          // 3070
                                                                                                                       // 3071
            var regex = new RegExp(String.fromCharCode(10), 'g');                                                      // 3072
            var lines = html.split(/<br\s*\/?>/i);                                                                     // 3073
            for (var i = 0; i < lines.length; i++) {                                                                   // 3074
                var text = $('<div>').html(lines[i]).text();                                                           // 3075
                                                                                                                       // 3076
                // Remove newline characters (\n) to avoid them being converted by value2html() method                 // 3077
                // thus adding extra <br> tags                                                                         // 3078
                text = text.replace(regex, '');                                                                        // 3079
                                                                                                                       // 3080
                lines[i] = text;                                                                                       // 3081
            }                                                                                                          // 3082
            return lines.join("\n");                                                                                   // 3083
        },                                                                                                             // 3084
         */                                                                                                            // 3085
        activate: function() {                                                                                         // 3086
            $.fn.editabletypes.text.prototype.activate.call(this);                                                     // 3087
        }                                                                                                              // 3088
    });                                                                                                                // 3089
                                                                                                                       // 3090
    Textarea.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                      // 3091
        /**                                                                                                            // 3092
        @property tpl                                                                                                  // 3093
        @default <textarea></textarea>                                                                                 // 3094
        **/                                                                                                            // 3095
        tpl:'<textarea></textarea>',                                                                                   // 3096
        /**                                                                                                            // 3097
        @property inputclass                                                                                           // 3098
        @default input-large                                                                                           // 3099
        **/                                                                                                            // 3100
        inputclass: 'input-large',                                                                                     // 3101
        /**                                                                                                            // 3102
        Placeholder attribute of input. Shown when input is empty.                                                     // 3103
                                                                                                                       // 3104
        @property placeholder                                                                                          // 3105
        @type string                                                                                                   // 3106
        @default null                                                                                                  // 3107
        **/                                                                                                            // 3108
        placeholder: null,                                                                                             // 3109
        /**                                                                                                            // 3110
        Number of rows in textarea                                                                                     // 3111
                                                                                                                       // 3112
        @property rows                                                                                                 // 3113
        @type integer                                                                                                  // 3114
        @default 7                                                                                                     // 3115
        **/                                                                                                            // 3116
        rows: 7                                                                                                        // 3117
    });                                                                                                                // 3118
                                                                                                                       // 3119
    $.fn.editabletypes.textarea = Textarea;                                                                            // 3120
                                                                                                                       // 3121
}(window.jQuery));                                                                                                     // 3122
                                                                                                                       // 3123
/**                                                                                                                    // 3124
Select (dropdown)                                                                                                      // 3125
                                                                                                                       // 3126
@class select                                                                                                          // 3127
@extends list                                                                                                          // 3128
@final                                                                                                                 // 3129
@example                                                                                                               // 3130
<a href="#" id="status" data-type="select" data-pk="1" data-url="/post" data-title="Select status"></a>                // 3131
<script>                                                                                                               // 3132
$(function(){                                                                                                          // 3133
    $('#status').editable({                                                                                            // 3134
        value: 2,                                                                                                      // 3135
        source: [                                                                                                      // 3136
              {value: 1, text: 'Active'},                                                                              // 3137
              {value: 2, text: 'Blocked'},                                                                             // 3138
              {value: 3, text: 'Deleted'}                                                                              // 3139
           ]                                                                                                           // 3140
    });                                                                                                                // 3141
});                                                                                                                    // 3142
</script>                                                                                                              // 3143
**/                                                                                                                    // 3144
(function ($) {                                                                                                        // 3145
    "use strict";                                                                                                      // 3146
                                                                                                                       // 3147
    var Select = function (options) {                                                                                  // 3148
        this.init('select', options, Select.defaults);                                                                 // 3149
    };                                                                                                                 // 3150
                                                                                                                       // 3151
    $.fn.editableutils.inherit(Select, $.fn.editabletypes.list);                                                       // 3152
                                                                                                                       // 3153
    $.extend(Select.prototype, {                                                                                       // 3154
        renderList: function() {                                                                                       // 3155
            this.$input.empty();                                                                                       // 3156
                                                                                                                       // 3157
            var fillItems = function($el, data) {                                                                      // 3158
                var attr;                                                                                              // 3159
                if($.isArray(data)) {                                                                                  // 3160
                    for(var i=0; i<data.length; i++) {                                                                 // 3161
                        attr = {};                                                                                     // 3162
                        if(data[i].children) {                                                                         // 3163
                            attr.label = data[i].text;                                                                 // 3164
                            $el.append(fillItems($('<optgroup>', attr), data[i].children));                            // 3165
                        } else {                                                                                       // 3166
                            attr.value = data[i].value;                                                                // 3167
                            if(data[i].disabled) {                                                                     // 3168
                                attr.disabled = true;                                                                  // 3169
                            }                                                                                          // 3170
                            $el.append($('<option>', attr).text(data[i].text));                                        // 3171
                        }                                                                                              // 3172
                    }                                                                                                  // 3173
                }                                                                                                      // 3174
                return $el;                                                                                            // 3175
            };                                                                                                         // 3176
                                                                                                                       // 3177
            fillItems(this.$input, this.sourceData);                                                                   // 3178
                                                                                                                       // 3179
            this.setClass();                                                                                           // 3180
                                                                                                                       // 3181
            //enter submit                                                                                             // 3182
            this.$input.on('keydown.editable', function (e) {                                                          // 3183
                if (e.which === 13) {                                                                                  // 3184
                    $(this).closest('form').submit();                                                                  // 3185
                }                                                                                                      // 3186
            });                                                                                                        // 3187
        },                                                                                                             // 3188
                                                                                                                       // 3189
        value2htmlFinal: function(value, element) {                                                                    // 3190
            var text = '',                                                                                             // 3191
                items = $.fn.editableutils.itemsByValue(value, this.sourceData);                                       // 3192
                                                                                                                       // 3193
            if(items.length) {                                                                                         // 3194
                text = items[0].text;                                                                                  // 3195
            }                                                                                                          // 3196
                                                                                                                       // 3197
            //$(element).text(text);                                                                                   // 3198
            $.fn.editabletypes.abstractinput.prototype.value2html.call(this, text, element);                           // 3199
        },                                                                                                             // 3200
                                                                                                                       // 3201
        autosubmit: function() {                                                                                       // 3202
            this.$input.off('keydown.editable').on('change.editable', function(){                                      // 3203
                $(this).closest('form').submit();                                                                      // 3204
            });                                                                                                        // 3205
        }                                                                                                              // 3206
    });                                                                                                                // 3207
                                                                                                                       // 3208
    Select.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {                                                 // 3209
        /**                                                                                                            // 3210
        @property tpl                                                                                                  // 3211
        @default <select></select>                                                                                     // 3212
        **/                                                                                                            // 3213
        tpl:'<select></select>'                                                                                        // 3214
    });                                                                                                                // 3215
                                                                                                                       // 3216
    $.fn.editabletypes.select = Select;                                                                                // 3217
                                                                                                                       // 3218
}(window.jQuery));                                                                                                     // 3219
                                                                                                                       // 3220
/**                                                                                                                    // 3221
List of checkboxes.                                                                                                    // 3222
Internally value stored as javascript array of values.                                                                 // 3223
                                                                                                                       // 3224
@class checklist                                                                                                       // 3225
@extends list                                                                                                          // 3226
@final                                                                                                                 // 3227
@example                                                                                                               // 3228
<a href="#" id="options" data-type="checklist" data-pk="1" data-url="/post" data-title="Select options"></a>           // 3229
<script>                                                                                                               // 3230
$(function(){                                                                                                          // 3231
    $('#options').editable({                                                                                           // 3232
        value: [2, 3],                                                                                                 // 3233
        source: [                                                                                                      // 3234
              {value: 1, text: 'option1'},                                                                             // 3235
              {value: 2, text: 'option2'},                                                                             // 3236
              {value: 3, text: 'option3'}                                                                              // 3237
           ]                                                                                                           // 3238
    });                                                                                                                // 3239
});                                                                                                                    // 3240
</script>                                                                                                              // 3241
**/                                                                                                                    // 3242
(function ($) {                                                                                                        // 3243
    "use strict";                                                                                                      // 3244
                                                                                                                       // 3245
    var Checklist = function (options) {                                                                               // 3246
        this.init('checklist', options, Checklist.defaults);                                                           // 3247
    };                                                                                                                 // 3248
                                                                                                                       // 3249
    $.fn.editableutils.inherit(Checklist, $.fn.editabletypes.list);                                                    // 3250
                                                                                                                       // 3251
    $.extend(Checklist.prototype, {                                                                                    // 3252
        renderList: function() {                                                                                       // 3253
            var $label, $div;                                                                                          // 3254
                                                                                                                       // 3255
            this.$tpl.empty();                                                                                         // 3256
                                                                                                                       // 3257
            if(!$.isArray(this.sourceData)) {                                                                          // 3258
                return;                                                                                                // 3259
            }                                                                                                          // 3260
                                                                                                                       // 3261
            for(var i=0; i<this.sourceData.length; i++) {                                                              // 3262
                $label = $('<label>').append($('<input>', {                                                            // 3263
                                           type: 'checkbox',                                                           // 3264
                                           value: this.sourceData[i].value                                             // 3265
                                     }))                                                                               // 3266
                                     .append($('<span>').text(' '+this.sourceData[i].text));                           // 3267
                                                                                                                       // 3268
                $('<div>').append($label).appendTo(this.$tpl);                                                         // 3269
            }                                                                                                          // 3270
                                                                                                                       // 3271
            this.$input = this.$tpl.find('input[type="checkbox"]');                                                    // 3272
            this.setClass();                                                                                           // 3273
        },                                                                                                             // 3274
                                                                                                                       // 3275
       value2str: function(value) {                                                                                    // 3276
           return $.isArray(value) ? value.sort().join($.trim(this.options.separator)) : '';                           // 3277
       },                                                                                                              // 3278
                                                                                                                       // 3279
       //parse separated string                                                                                        // 3280
        str2value: function(str) {                                                                                     // 3281
           var reg, value = null;                                                                                      // 3282
           if(typeof str === 'string' && str.length) {                                                                 // 3283
               reg = new RegExp('\\s*'+$.trim(this.options.separator)+'\\s*');                                         // 3284
               value = str.split(reg);                                                                                 // 3285
           } else if($.isArray(str)) {                                                                                 // 3286
               value = str;                                                                                            // 3287
           } else {                                                                                                    // 3288
               value = [str];                                                                                          // 3289
           }                                                                                                           // 3290
           return value;                                                                                               // 3291
        },                                                                                                             // 3292
                                                                                                                       // 3293
       //set checked on required checkboxes                                                                            // 3294
       value2input: function(value) {                                                                                  // 3295
            this.$input.prop('checked', false);                                                                        // 3296
            if($.isArray(value) && value.length) {                                                                     // 3297
               this.$input.each(function(i, el) {                                                                      // 3298
                   var $el = $(el);                                                                                    // 3299
                   // cannot use $.inArray as it performs strict comparison                                            // 3300
                   $.each(value, function(j, val){                                                                     // 3301
                       /*jslint eqeq: true*/                                                                           // 3302
                       if($el.val() == val) {                                                                          // 3303
                       /*jslint eqeq: false*/                                                                          // 3304
                           $el.prop('checked', true);                                                                  // 3305
                       }                                                                                               // 3306
                   });                                                                                                 // 3307
               });                                                                                                     // 3308
            }                                                                                                          // 3309
        },                                                                                                             // 3310
                                                                                                                       // 3311
       input2value: function() {                                                                                       // 3312
           var checked = [];                                                                                           // 3313
           this.$input.filter(':checked').each(function(i, el) {                                                       // 3314
               checked.push($(el).val());                                                                              // 3315
           });                                                                                                         // 3316
           return checked;                                                                                             // 3317
       },                                                                                                              // 3318
                                                                                                                       // 3319
       //collect text of checked boxes                                                                                 // 3320
        value2htmlFinal: function(value, element) {                                                                    // 3321
           var html = [],                                                                                              // 3322
               checked = $.fn.editableutils.itemsByValue(value, this.sourceData),                                      // 3323
               escape = this.options.escape;                                                                           // 3324
                                                                                                                       // 3325
           if(checked.length) {                                                                                        // 3326
               $.each(checked, function(i, v) {                                                                        // 3327
                   var text = escape ? $.fn.editableutils.escape(v.text) : v.text;                                     // 3328
                   html.push(text);                                                                                    // 3329
               });                                                                                                     // 3330
               $(element).html(html.join('<br>'));                                                                     // 3331
           } else {                                                                                                    // 3332
               $(element).empty();                                                                                     // 3333
           }                                                                                                           // 3334
        },                                                                                                             // 3335
                                                                                                                       // 3336
       activate: function() {                                                                                          // 3337
           this.$input.first().focus();                                                                                // 3338
       },                                                                                                              // 3339
                                                                                                                       // 3340
       autosubmit: function() {                                                                                        // 3341
           this.$input.on('keydown', function(e){                                                                      // 3342
               if (e.which === 13) {                                                                                   // 3343
                   $(this).closest('form').submit();                                                                   // 3344
               }                                                                                                       // 3345
           });                                                                                                         // 3346
       }                                                                                                               // 3347
    });                                                                                                                // 3348
                                                                                                                       // 3349
    Checklist.defaults = $.extend({}, $.fn.editabletypes.list.defaults, {                                              // 3350
        /**                                                                                                            // 3351
        @property tpl                                                                                                  // 3352
        @default <div></div>                                                                                           // 3353
        **/                                                                                                            // 3354
        tpl:'<div class="editable-checklist"></div>',                                                                  // 3355
                                                                                                                       // 3356
        /**                                                                                                            // 3357
        @property inputclass                                                                                           // 3358
        @type string                                                                                                   // 3359
        @default null                                                                                                  // 3360
        **/                                                                                                            // 3361
        inputclass: null,                                                                                              // 3362
                                                                                                                       // 3363
        /**                                                                                                            // 3364
        Separator of values when reading from `data-value` attribute                                                   // 3365
                                                                                                                       // 3366
        @property separator                                                                                            // 3367
        @type string                                                                                                   // 3368
        @default ','                                                                                                   // 3369
        **/                                                                                                            // 3370
        separator: ','                                                                                                 // 3371
    });                                                                                                                // 3372
                                                                                                                       // 3373
    $.fn.editabletypes.checklist = Checklist;                                                                          // 3374
                                                                                                                       // 3375
}(window.jQuery));                                                                                                     // 3376
                                                                                                                       // 3377
/**                                                                                                                    // 3378
HTML5 input types.                                                                                                     // 3379
Following types are supported:                                                                                         // 3380
                                                                                                                       // 3381
* password                                                                                                             // 3382
* email                                                                                                                // 3383
* url                                                                                                                  // 3384
* tel                                                                                                                  // 3385
* number                                                                                                               // 3386
* range                                                                                                                // 3387
* time                                                                                                                 // 3388
                                                                                                                       // 3389
Learn more about html5 inputs:                                                                                         // 3390
http://www.w3.org/wiki/HTML5_form_additions                                                                            // 3391
To check browser compatibility please see:                                                                             // 3392
https://developer.mozilla.org/en-US/docs/HTML/Element/Input                                                            // 3393
                                                                                                                       // 3394
@class html5types                                                                                                      // 3395
@extends text                                                                                                          // 3396
@final                                                                                                                 // 3397
@since 1.3.0                                                                                                           // 3398
@example                                                                                                               // 3399
<a href="#" id="email" data-type="email" data-pk="1">admin@example.com</a>                                             // 3400
<script>                                                                                                               // 3401
$(function(){                                                                                                          // 3402
    $('#email').editable({                                                                                             // 3403
        url: '/post',                                                                                                  // 3404
        title: 'Enter email'                                                                                           // 3405
    });                                                                                                                // 3406
});                                                                                                                    // 3407
</script>                                                                                                              // 3408
**/                                                                                                                    // 3409
                                                                                                                       // 3410
/**                                                                                                                    // 3411
@property tpl                                                                                                          // 3412
@default depends on type                                                                                               // 3413
**/                                                                                                                    // 3414
                                                                                                                       // 3415
/*                                                                                                                     // 3416
Password                                                                                                               // 3417
*/                                                                                                                     // 3418
(function ($) {                                                                                                        // 3419
    "use strict";                                                                                                      // 3420
                                                                                                                       // 3421
    var Password = function (options) {                                                                                // 3422
        this.init('password', options, Password.defaults);                                                             // 3423
    };                                                                                                                 // 3424
    $.fn.editableutils.inherit(Password, $.fn.editabletypes.text);                                                     // 3425
    $.extend(Password.prototype, {                                                                                     // 3426
       //do not display password, show '[hidden]' instead                                                              // 3427
       value2html: function(value, element) {                                                                          // 3428
           if(value) {                                                                                                 // 3429
               $(element).text('[hidden]');                                                                            // 3430
           } else {                                                                                                    // 3431
               $(element).empty();                                                                                     // 3432
           }                                                                                                           // 3433
       },                                                                                                              // 3434
       //as password not displayed, should not set value by html                                                       // 3435
       html2value: function(html) {                                                                                    // 3436
           return null;                                                                                                // 3437
       }                                                                                                               // 3438
    });                                                                                                                // 3439
    Password.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {                                               // 3440
        tpl: '<input type="password">'                                                                                 // 3441
    });                                                                                                                // 3442
    $.fn.editabletypes.password = Password;                                                                            // 3443
}(window.jQuery));                                                                                                     // 3444
                                                                                                                       // 3445
                                                                                                                       // 3446
/*                                                                                                                     // 3447
Email                                                                                                                  // 3448
*/                                                                                                                     // 3449
(function ($) {                                                                                                        // 3450
    "use strict";                                                                                                      // 3451
                                                                                                                       // 3452
    var Email = function (options) {                                                                                   // 3453
        this.init('email', options, Email.defaults);                                                                   // 3454
    };                                                                                                                 // 3455
    $.fn.editableutils.inherit(Email, $.fn.editabletypes.text);                                                        // 3456
    Email.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {                                                  // 3457
        tpl: '<input type="email">'                                                                                    // 3458
    });                                                                                                                // 3459
    $.fn.editabletypes.email = Email;                                                                                  // 3460
}(window.jQuery));                                                                                                     // 3461
                                                                                                                       // 3462
                                                                                                                       // 3463
/*                                                                                                                     // 3464
Url                                                                                                                    // 3465
*/                                                                                                                     // 3466
(function ($) {                                                                                                        // 3467
    "use strict";                                                                                                      // 3468
                                                                                                                       // 3469
    var Url = function (options) {                                                                                     // 3470
        this.init('url', options, Url.defaults);                                                                       // 3471
    };                                                                                                                 // 3472
    $.fn.editableutils.inherit(Url, $.fn.editabletypes.text);                                                          // 3473
    Url.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {                                                    // 3474
        tpl: '<input type="url">'                                                                                      // 3475
    });                                                                                                                // 3476
    $.fn.editabletypes.url = Url;                                                                                      // 3477
}(window.jQuery));                                                                                                     // 3478
                                                                                                                       // 3479
                                                                                                                       // 3480
/*                                                                                                                     // 3481
Tel                                                                                                                    // 3482
*/                                                                                                                     // 3483
(function ($) {                                                                                                        // 3484
    "use strict";                                                                                                      // 3485
                                                                                                                       // 3486
    var Tel = function (options) {                                                                                     // 3487
        this.init('tel', options, Tel.defaults);                                                                       // 3488
    };                                                                                                                 // 3489
    $.fn.editableutils.inherit(Tel, $.fn.editabletypes.text);                                                          // 3490
    Tel.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {                                                    // 3491
        tpl: '<input type="tel">'                                                                                      // 3492
    });                                                                                                                // 3493
    $.fn.editabletypes.tel = Tel;                                                                                      // 3494
}(window.jQuery));                                                                                                     // 3495
                                                                                                                       // 3496
                                                                                                                       // 3497
/*                                                                                                                     // 3498
Number                                                                                                                 // 3499
*/                                                                                                                     // 3500
(function ($) {                                                                                                        // 3501
    "use strict";                                                                                                      // 3502
                                                                                                                       // 3503
    var NumberInput = function (options) {                                                                             // 3504
        this.init('number', options, NumberInput.defaults);                                                            // 3505
    };                                                                                                                 // 3506
    $.fn.editableutils.inherit(NumberInput, $.fn.editabletypes.text);                                                  // 3507
    $.extend(NumberInput.prototype, {                                                                                  // 3508
         render: function () {                                                                                         // 3509
            NumberInput.superclass.render.call(this);                                                                  // 3510
            this.setAttr('min');                                                                                       // 3511
            this.setAttr('max');                                                                                       // 3512
            this.setAttr('step');                                                                                      // 3513
        },                                                                                                             // 3514
        postrender: function() {                                                                                       // 3515
            if(this.$clear) {                                                                                          // 3516
                //increase right ffset  for up/down arrows                                                             // 3517
                this.$clear.css({right: 24});                                                                          // 3518
                /*                                                                                                     // 3519
                //can position clear button only here, when form is shown and height can be calculated                 // 3520
                var h = this.$input.outerHeight(true) || 20,                                                           // 3521
                    delta = (h - this.$clear.height()) / 2;                                                            // 3522
                                                                                                                       // 3523
                //add 12px to offset right for up/down arrows                                                          // 3524
                this.$clear.css({top: delta, right: delta + 16});                                                      // 3525
                */                                                                                                     // 3526
            }                                                                                                          // 3527
        }                                                                                                              // 3528
    });                                                                                                                // 3529
    NumberInput.defaults = $.extend({}, $.fn.editabletypes.text.defaults, {                                            // 3530
        tpl: '<input type="number">',                                                                                  // 3531
        inputclass: 'input-mini',                                                                                      // 3532
        min: null,                                                                                                     // 3533
        max: null,                                                                                                     // 3534
        step: null                                                                                                     // 3535
    });                                                                                                                // 3536
    $.fn.editabletypes.number = NumberInput;                                                                           // 3537
}(window.jQuery));                                                                                                     // 3538
                                                                                                                       // 3539
                                                                                                                       // 3540
/*                                                                                                                     // 3541
Range (inherit from number)                                                                                            // 3542
*/                                                                                                                     // 3543
(function ($) {                                                                                                        // 3544
    "use strict";                                                                                                      // 3545
                                                                                                                       // 3546
    var Range = function (options) {                                                                                   // 3547
        this.init('range', options, Range.defaults);                                                                   // 3548
    };                                                                                                                 // 3549
    $.fn.editableutils.inherit(Range, $.fn.editabletypes.number);                                                      // 3550
    $.extend(Range.prototype, {                                                                                        // 3551
        render: function () {                                                                                          // 3552
            this.$input = this.$tpl.filter('input');                                                                   // 3553
                                                                                                                       // 3554
            this.setClass();                                                                                           // 3555
            this.setAttr('min');                                                                                       // 3556
            this.setAttr('max');                                                                                       // 3557
            this.setAttr('step');                                                                                      // 3558
                                                                                                                       // 3559
            this.$input.on('input', function(){                                                                        // 3560
                $(this).siblings('output').text($(this).val());                                                        // 3561
            });                                                                                                        // 3562
        },                                                                                                             // 3563
        activate: function() {                                                                                         // 3564
            this.$input.focus();                                                                                       // 3565
        }                                                                                                              // 3566
    });                                                                                                                // 3567
    Range.defaults = $.extend({}, $.fn.editabletypes.number.defaults, {                                                // 3568
        tpl: '<input type="range"><output style="width: 30px; display: inline-block"></output>',                       // 3569
        inputclass: 'input-medium'                                                                                     // 3570
    });                                                                                                                // 3571
    $.fn.editabletypes.range = Range;                                                                                  // 3572
}(window.jQuery));                                                                                                     // 3573
                                                                                                                       // 3574
/*                                                                                                                     // 3575
Time                                                                                                                   // 3576
*/                                                                                                                     // 3577
(function ($) {                                                                                                        // 3578
    "use strict";                                                                                                      // 3579
                                                                                                                       // 3580
    var Time = function (options) {                                                                                    // 3581
        this.init('time', options, Time.defaults);                                                                     // 3582
    };                                                                                                                 // 3583
    //inherit from abstract, as inheritance from text gives selection error.                                           // 3584
    $.fn.editableutils.inherit(Time, $.fn.editabletypes.abstractinput);                                                // 3585
    $.extend(Time.prototype, {                                                                                         // 3586
        render: function() {                                                                                           // 3587
           this.setClass();                                                                                            // 3588
        }                                                                                                              // 3589
    });                                                                                                                // 3590
    Time.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                          // 3591
        tpl: '<input type="time">'                                                                                     // 3592
    });                                                                                                                // 3593
    $.fn.editabletypes.time = Time;                                                                                    // 3594
}(window.jQuery));                                                                                                     // 3595
                                                                                                                       // 3596
/**                                                                                                                    // 3597
Select2 input. Based on amazing work of Igor Vaynberg https://github.com/ivaynberg/select2.                            // 3598
Please see [original select2 docs](http://ivaynberg.github.com/select2) for detailed description and options.          // 3599
                                                                                                                       // 3600
You should manually download and include select2 distributive:                                                         // 3601
                                                                                                                       // 3602
    <link href="select2/select2.css" rel="stylesheet" type="text/css"></link>                                          // 3603
    <script src="select2/select2.js"></script>                                                                         // 3604
                                                                                                                       // 3605
To make it **bootstrap-styled** you can use css from [here](https://github.com/t0m/select2-bootstrap-css):             // 3606
                                                                                                                       // 3607
    <link href="select2-bootstrap.css" rel="stylesheet" type="text/css"></link>                                        // 3608
                                                                                                                       // 3609
**Note:** currently `autotext` feature does not work for select2 with `ajax` remote source.                            // 3610
You need initially put both `data-value` and element's text youself:                                                   // 3611
                                                                                                                       // 3612
    <a href="#" data-type="select2" data-value="1">Text1</a>                                                           // 3613
                                                                                                                       // 3614
                                                                                                                       // 3615
@class select2                                                                                                         // 3616
@extends abstractinput                                                                                                 // 3617
@since 1.4.1                                                                                                           // 3618
@final                                                                                                                 // 3619
@example                                                                                                               // 3620
<a href="#" id="country" data-type="select2" data-pk="1" data-value="ru" data-url="/post" data-title="Select country"></a>
<script>                                                                                                               // 3622
$(function(){                                                                                                          // 3623
    //local source                                                                                                     // 3624
    $('#country').editable({                                                                                           // 3625
        source: [                                                                                                      // 3626
              {id: 'gb', text: 'Great Britain'},                                                                       // 3627
              {id: 'us', text: 'United States'},                                                                       // 3628
              {id: 'ru', text: 'Russia'}                                                                               // 3629
           ],                                                                                                          // 3630
        select2: {                                                                                                     // 3631
           multiple: true                                                                                              // 3632
        }                                                                                                              // 3633
    });                                                                                                                // 3634
    //remote source (simple)                                                                                           // 3635
    $('#country').editable({                                                                                           // 3636
        source: '/getCountries',                                                                                       // 3637
        select2: {                                                                                                     // 3638
            placeholder: 'Select Country',                                                                             // 3639
            minimumInputLength: 1                                                                                      // 3640
        }                                                                                                              // 3641
    });                                                                                                                // 3642
    //remote source (advanced)                                                                                         // 3643
    $('#country').editable({                                                                                           // 3644
        select2: {                                                                                                     // 3645
            placeholder: 'Select Country',                                                                             // 3646
            allowClear: true,                                                                                          // 3647
            minimumInputLength: 3,                                                                                     // 3648
            id: function (item) {                                                                                      // 3649
                return item.CountryId;                                                                                 // 3650
            },                                                                                                         // 3651
            ajax: {                                                                                                    // 3652
                url: '/getCountries',                                                                                  // 3653
                dataType: 'json',                                                                                      // 3654
                data: function (term, page) {                                                                          // 3655
                    return { query: term };                                                                            // 3656
                },                                                                                                     // 3657
                results: function (data, page) {                                                                       // 3658
                    return { results: data };                                                                          // 3659
                }                                                                                                      // 3660
            },                                                                                                         // 3661
            formatResult: function (item) {                                                                            // 3662
                return item.CountryName;                                                                               // 3663
            },                                                                                                         // 3664
            formatSelection: function (item) {                                                                         // 3665
                return item.CountryName;                                                                               // 3666
            },                                                                                                         // 3667
            initSelection: function (element, callback) {                                                              // 3668
                return $.get('/getCountryById', { query: element.val() }, function (data) {                            // 3669
                    callback(data);                                                                                    // 3670
                });                                                                                                    // 3671
            }                                                                                                          // 3672
        }                                                                                                              // 3673
    });                                                                                                                // 3674
});                                                                                                                    // 3675
</script>                                                                                                              // 3676
**/                                                                                                                    // 3677
(function ($) {                                                                                                        // 3678
    "use strict";                                                                                                      // 3679
                                                                                                                       // 3680
    var Constructor = function (options) {                                                                             // 3681
        this.init('select2', options, Constructor.defaults);                                                           // 3682
                                                                                                                       // 3683
        options.select2 = options.select2 || {};                                                                       // 3684
                                                                                                                       // 3685
        this.sourceData = null;                                                                                        // 3686
                                                                                                                       // 3687
        //placeholder                                                                                                  // 3688
        if(options.placeholder) {                                                                                      // 3689
            options.select2.placeholder = options.placeholder;                                                         // 3690
        }                                                                                                              // 3691
                                                                                                                       // 3692
        //if not `tags` mode, use source                                                                               // 3693
        if(!options.select2.tags && options.source) {                                                                  // 3694
            var source = options.source;                                                                               // 3695
            //if source is function, call it (once!)                                                                   // 3696
            if ($.isFunction(options.source)) {                                                                        // 3697
                source = options.source.call(options.scope);                                                           // 3698
            }                                                                                                          // 3699
                                                                                                                       // 3700
            if (typeof source === 'string') {                                                                          // 3701
                options.select2.ajax = options.select2.ajax || {};                                                     // 3702
                //some default ajax params                                                                             // 3703
                if(!options.select2.ajax.data) {                                                                       // 3704
                    options.select2.ajax.data = function(term) {return { query:term };};                               // 3705
                }                                                                                                      // 3706
                if(!options.select2.ajax.results) {                                                                    // 3707
                    options.select2.ajax.results = function(data) { return {results:data };};                          // 3708
                }                                                                                                      // 3709
                options.select2.ajax.url = source;                                                                     // 3710
            } else {                                                                                                   // 3711
                //check format and convert x-editable format to select2 format (if needed)                             // 3712
                this.sourceData = this.convertSource(source);                                                          // 3713
                options.select2.data = this.sourceData;                                                                // 3714
            }                                                                                                          // 3715
        }                                                                                                              // 3716
                                                                                                                       // 3717
        //overriding objects in config (as by default jQuery extend() is not recursive)                                // 3718
        this.options.select2 = $.extend({}, Constructor.defaults.select2, options.select2);                            // 3719
                                                                                                                       // 3720
        //detect whether it is multi-valued                                                                            // 3721
        this.isMultiple = this.options.select2.tags || this.options.select2.multiple;                                  // 3722
        this.isRemote = ('ajax' in this.options.select2);                                                              // 3723
                                                                                                                       // 3724
        //store function returning ID of item                                                                          // 3725
        //should be here as used inautotext for local source                                                           // 3726
        this.idFunc = this.options.select2.id;                                                                         // 3727
        if (typeof(this.idFunc) !== "function") {                                                                      // 3728
            var idKey = this.idFunc || 'id';                                                                           // 3729
            this.idFunc = function (e) { return e[idKey]; };                                                           // 3730
        }                                                                                                              // 3731
                                                                                                                       // 3732
        //store function that renders text in select2                                                                  // 3733
        this.formatSelection = this.options.select2.formatSelection;                                                   // 3734
        if (typeof(this.formatSelection) !== "function") {                                                             // 3735
            this.formatSelection = function (e) { return e.text; };                                                    // 3736
        }                                                                                                              // 3737
    };                                                                                                                 // 3738
                                                                                                                       // 3739
    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);                                         // 3740
                                                                                                                       // 3741
    $.extend(Constructor.prototype, {                                                                                  // 3742
        render: function() {                                                                                           // 3743
            this.setClass();                                                                                           // 3744
                                                                                                                       // 3745
            //can not apply select2 here as it calls initSelection                                                     // 3746
            //over input that does not have correct value yet.                                                         // 3747
            //apply select2 only in value2input                                                                        // 3748
            //this.$input.select2(this.options.select2);                                                               // 3749
                                                                                                                       // 3750
            //when data is loaded via ajax, we need to know when it's done to populate listData                        // 3751
            if(this.isRemote) {                                                                                        // 3752
                //listen to loaded event to populate data                                                              // 3753
                this.$input.on('select2-loaded', $.proxy(function(e) {                                                 // 3754
                    this.sourceData = e.items.results;                                                                 // 3755
                }, this));                                                                                             // 3756
            }                                                                                                          // 3757
                                                                                                                       // 3758
            //trigger resize of editableform to re-position container in multi-valued mode                             // 3759
            if(this.isMultiple) {                                                                                      // 3760
               this.$input.on('change', function() {                                                                   // 3761
                   $(this).closest('form').parent().triggerHandler('resize');                                          // 3762
               });                                                                                                     // 3763
            }                                                                                                          // 3764
       },                                                                                                              // 3765
                                                                                                                       // 3766
       value2html: function(value, element) {                                                                          // 3767
           var text = '', data,                                                                                        // 3768
               that = this;                                                                                            // 3769
                                                                                                                       // 3770
           if(this.options.select2.tags) { //in tags mode just assign value                                            // 3771
              data = value;                                                                                            // 3772
              //data = $.fn.editableutils.itemsByValue(value, this.options.select2.tags, this.idFunc);                 // 3773
           } else if(this.sourceData) {                                                                                // 3774
              data = $.fn.editableutils.itemsByValue(value, this.sourceData, this.idFunc);                             // 3775
           } else {                                                                                                    // 3776
              //can not get list of possible values                                                                    // 3777
              //(e.g. autotext for select2 with ajax source)                                                           // 3778
           }                                                                                                           // 3779
                                                                                                                       // 3780
           //data may be array (when multiple values allowed)                                                          // 3781
           if($.isArray(data)) {                                                                                       // 3782
               //collect selected data and show with separator                                                         // 3783
               text = [];                                                                                              // 3784
               $.each(data, function(k, v){                                                                            // 3785
                   text.push(v && typeof v === 'object' ? that.formatSelection(v) : v);                                // 3786
               });                                                                                                     // 3787
           } else if(data) {                                                                                           // 3788
               text = that.formatSelection(data);                                                                      // 3789
           }                                                                                                           // 3790
                                                                                                                       // 3791
           text = $.isArray(text) ? text.join(this.options.viewseparator) : text;                                      // 3792
                                                                                                                       // 3793
           //$(element).text(text);                                                                                    // 3794
           Constructor.superclass.value2html.call(this, text, element);                                                // 3795
       },                                                                                                              // 3796
                                                                                                                       // 3797
       html2value: function(html) {                                                                                    // 3798
           return this.options.select2.tags ? this.str2value(html, this.options.viewseparator) : null;                 // 3799
       },                                                                                                              // 3800
                                                                                                                       // 3801
       value2input: function(value) {                                                                                  // 3802
           // if value array => join it anyway                                                                         // 3803
           if($.isArray(value)) {                                                                                      // 3804
              value = value.join(this.getSeparator());                                                                 // 3805
           }                                                                                                           // 3806
                                                                                                                       // 3807
           //for remote source just set value, text is updated by initSelection                                        // 3808
           if(!this.$input.data('select2')) {                                                                          // 3809
               this.$input.val(value);                                                                                 // 3810
               this.$input.select2(this.options.select2);                                                              // 3811
           } else {                                                                                                    // 3812
               //second argument needed to separate initial change from user's click (for autosubmit)                  // 3813
               this.$input.val(value).trigger('change', true);                                                         // 3814
                                                                                                                       // 3815
               //Uncaught Error: cannot call val() if initSelection() is not defined                                   // 3816
               //this.$input.select2('val', value);                                                                    // 3817
           }                                                                                                           // 3818
                                                                                                                       // 3819
           // if defined remote source AND no multiple mode AND no user's initSelection provided -->                   // 3820
           // we should somehow get text for provided id.                                                              // 3821
           // The solution is to use element's text as text for that id (exclude empty)                                // 3822
           if(this.isRemote && !this.isMultiple && !this.options.select2.initSelection) {                              // 3823
               // customId and customText are methods to extract `id` and `text` from data object                      // 3824
               // we can use this workaround only if user did not define these methods                                 // 3825
               // otherwise we cant construct data object                                                              // 3826
               var customId = this.options.select2.id,                                                                 // 3827
                   customText = this.options.select2.formatSelection;                                                  // 3828
                                                                                                                       // 3829
               if(!customId && !customText) {                                                                          // 3830
                   var $el = $(this.options.scope);                                                                    // 3831
                   if (!$el.data('editable').isEmpty) {                                                                // 3832
                       var data = {id: value, text: $el.text()};                                                       // 3833
                       this.$input.select2('data', data);                                                              // 3834
                   }                                                                                                   // 3835
               }                                                                                                       // 3836
           }                                                                                                           // 3837
       },                                                                                                              // 3838
                                                                                                                       // 3839
       input2value: function() {                                                                                       // 3840
           return this.$input.select2('val');                                                                          // 3841
       },                                                                                                              // 3842
                                                                                                                       // 3843
       str2value: function(str, separator) {                                                                           // 3844
            if(typeof str !== 'string' || !this.isMultiple) {                                                          // 3845
                return str;                                                                                            // 3846
            }                                                                                                          // 3847
                                                                                                                       // 3848
            separator = separator || this.getSeparator();                                                              // 3849
                                                                                                                       // 3850
            var val, i, l;                                                                                             // 3851
                                                                                                                       // 3852
            if (str === null || str.length < 1) {                                                                      // 3853
                return null;                                                                                           // 3854
            }                                                                                                          // 3855
            val = str.split(separator);                                                                                // 3856
            for (i = 0, l = val.length; i < l; i = i + 1) {                                                            // 3857
                val[i] = $.trim(val[i]);                                                                               // 3858
            }                                                                                                          // 3859
                                                                                                                       // 3860
            return val;                                                                                                // 3861
       },                                                                                                              // 3862
                                                                                                                       // 3863
        autosubmit: function() {                                                                                       // 3864
            this.$input.on('change', function(e, isInitial){                                                           // 3865
                if(!isInitial) {                                                                                       // 3866
                  $(this).closest('form').submit();                                                                    // 3867
                }                                                                                                      // 3868
            });                                                                                                        // 3869
        },                                                                                                             // 3870
                                                                                                                       // 3871
        getSeparator: function() {                                                                                     // 3872
            return this.options.select2.separator || $.fn.select2.defaults.separator;                                  // 3873
        },                                                                                                             // 3874
                                                                                                                       // 3875
        /*                                                                                                             // 3876
        Converts source from x-editable format: {value: 1, text: "1"} to                                               // 3877
        select2 format: {id: 1, text: "1"}                                                                             // 3878
        */                                                                                                             // 3879
        convertSource: function(source) {                                                                              // 3880
            if($.isArray(source) && source.length && source[0].value !== undefined) {                                  // 3881
                for(var i = 0; i<source.length; i++) {                                                                 // 3882
                    if(source[i].value !== undefined) {                                                                // 3883
                        source[i].id = source[i].value;                                                                // 3884
                        delete source[i].value;                                                                        // 3885
                    }                                                                                                  // 3886
                }                                                                                                      // 3887
            }                                                                                                          // 3888
            return source;                                                                                             // 3889
        },                                                                                                             // 3890
                                                                                                                       // 3891
        destroy: function() {                                                                                          // 3892
            if(this.$input.data('select2')) {                                                                          // 3893
                this.$input.select2('destroy');                                                                        // 3894
            }                                                                                                          // 3895
        }                                                                                                              // 3896
                                                                                                                       // 3897
    });                                                                                                                // 3898
                                                                                                                       // 3899
    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                   // 3900
        /**                                                                                                            // 3901
        @property tpl                                                                                                  // 3902
        @default <input type="hidden">                                                                                 // 3903
        **/                                                                                                            // 3904
        tpl:'<input type="hidden">',                                                                                   // 3905
        /**                                                                                                            // 3906
        Configuration of select2. [Full list of options](http://ivaynberg.github.com/select2).                         // 3907
                                                                                                                       // 3908
        @property select2                                                                                              // 3909
        @type object                                                                                                   // 3910
        @default null                                                                                                  // 3911
        **/                                                                                                            // 3912
        select2: null,                                                                                                 // 3913
        /**                                                                                                            // 3914
        Placeholder attribute of select                                                                                // 3915
                                                                                                                       // 3916
        @property placeholder                                                                                          // 3917
        @type string                                                                                                   // 3918
        @default null                                                                                                  // 3919
        **/                                                                                                            // 3920
        placeholder: null,                                                                                             // 3921
        /**                                                                                                            // 3922
        Source data for select. It will be assigned to select2 `data` property and kept here just for convenience.     // 3923
        Please note, that format is different from simple `select` input: use 'id' instead of 'value'.                 // 3924
        E.g. `[{id: 1, text: "text1"}, {id: 2, text: "text2"}, ...]`.                                                  // 3925
                                                                                                                       // 3926
        @property source                                                                                               // 3927
        @type array|string|function                                                                                    // 3928
        @default null                                                                                                  // 3929
        **/                                                                                                            // 3930
        source: null,                                                                                                  // 3931
        /**                                                                                                            // 3932
        Separator used to display tags.                                                                                // 3933
                                                                                                                       // 3934
        @property viewseparator                                                                                        // 3935
        @type string                                                                                                   // 3936
        @default ', '                                                                                                  // 3937
        **/                                                                                                            // 3938
        viewseparator: ', '                                                                                            // 3939
    });                                                                                                                // 3940
                                                                                                                       // 3941
    $.fn.editabletypes.select2 = Constructor;                                                                          // 3942
                                                                                                                       // 3943
}(window.jQuery));                                                                                                     // 3944
                                                                                                                       // 3945
/**                                                                                                                    // 3946
* Combodate - 1.0.5                                                                                                    // 3947
* Dropdown date and time picker.                                                                                       // 3948
* Converts text input into dropdowns to pick day, month, year, hour, minute and second.                                // 3949
* Uses momentjs as datetime library http://momentjs.com.                                                               // 3950
* For i18n include corresponding file from https://github.com/timrwood/moment/tree/master/lang                         // 3951
*                                                                                                                      // 3952
* Confusion at noon and midnight - see http://en.wikipedia.org/wiki/12-hour_clock#Confusion_at_noon_and_midnight       // 3953
* In combodate:                                                                                                        // 3954
* 12:00 pm --> 12:00 (24-h format, midday)                                                                             // 3955
* 12:00 am --> 00:00 (24-h format, midnight, start of day)                                                             // 3956
*                                                                                                                      // 3957
* Differs from momentjs parse rules:                                                                                   // 3958
* 00:00 pm, 12:00 pm --> 12:00 (24-h format, day not change)                                                           // 3959
* 00:00 am, 12:00 am --> 00:00 (24-h format, day not change)                                                           // 3960
*                                                                                                                      // 3961
*                                                                                                                      // 3962
* Author: Vitaliy Potapov                                                                                              // 3963
* Project page: http://github.com/vitalets/combodate                                                                   // 3964
* Copyright (c) 2012 Vitaliy Potapov. Released under MIT License.                                                      // 3965
**/                                                                                                                    // 3966
(function ($) {                                                                                                        // 3967
                                                                                                                       // 3968
    var Combodate = function (element, options) {                                                                      // 3969
        this.$element = $(element);                                                                                    // 3970
        if(!this.$element.is('input')) {                                                                               // 3971
            $.error('Combodate should be applied to INPUT element');                                                   // 3972
            return;                                                                                                    // 3973
        }                                                                                                              // 3974
        this.options = $.extend({}, $.fn.combodate.defaults, options, this.$element.data());                           // 3975
        this.init();                                                                                                   // 3976
     };                                                                                                                // 3977
                                                                                                                       // 3978
    Combodate.prototype = {                                                                                            // 3979
        constructor: Combodate,                                                                                        // 3980
        init: function () {                                                                                            // 3981
            this.map = {                                                                                               // 3982
                //key   regexp    moment.method                                                                        // 3983
                day:    ['D',    'date'],                                                                              // 3984
                month:  ['M',    'month'],                                                                             // 3985
                year:   ['Y',    'year'],                                                                              // 3986
                hour:   ['[Hh]', 'hours'],                                                                             // 3987
                minute: ['m',    'minutes'],                                                                           // 3988
                second: ['s',    'seconds'],                                                                           // 3989
                ampm:   ['[Aa]', '']                                                                                   // 3990
            };                                                                                                         // 3991
                                                                                                                       // 3992
            this.$widget = $('<span class="combodate"></span>').html(this.getTemplate());                              // 3993
                                                                                                                       // 3994
            this.initCombos();                                                                                         // 3995
                                                                                                                       // 3996
            //update original input on change                                                                          // 3997
            this.$widget.on('change', 'select', $.proxy(function(e) {                                                  // 3998
                this.$element.val(this.getValue()).change();                                                           // 3999
                // update days count if month or year changes                                                          // 4000
                if (this.options.smartDays) {                                                                          // 4001
                    if ($(e.target).is('.month') || $(e.target).is('.year')) {                                         // 4002
                        this.fillCombo('day');                                                                         // 4003
                    }                                                                                                  // 4004
                }                                                                                                      // 4005
            }, this));                                                                                                 // 4006
                                                                                                                       // 4007
            this.$widget.find('select').css('width', 'auto');                                                          // 4008
                                                                                                                       // 4009
            // hide original input and insert widget                                                                   // 4010
            this.$element.hide().after(this.$widget);                                                                  // 4011
                                                                                                                       // 4012
            // set initial value                                                                                       // 4013
            this.setValue(this.$element.val() || this.options.value);                                                  // 4014
        },                                                                                                             // 4015
                                                                                                                       // 4016
        /*                                                                                                             // 4017
         Replace tokens in template with <select> elements                                                             // 4018
        */                                                                                                             // 4019
        getTemplate: function() {                                                                                      // 4020
            var tpl = this.options.template;                                                                           // 4021
                                                                                                                       // 4022
            //first pass                                                                                               // 4023
            $.each(this.map, function(k, v) {                                                                          // 4024
                v = v[0];                                                                                              // 4025
                var r = new RegExp(v+'+'),                                                                             // 4026
                    token = v.length > 1 ? v.substring(1, 2) : v;                                                      // 4027
                                                                                                                       // 4028
                tpl = tpl.replace(r, '{'+token+'}');                                                                   // 4029
            });                                                                                                        // 4030
                                                                                                                       // 4031
            //replace spaces with &nbsp;                                                                               // 4032
            tpl = tpl.replace(/ /g, '&nbsp;');                                                                         // 4033
                                                                                                                       // 4034
            //second pass                                                                                              // 4035
            $.each(this.map, function(k, v) {                                                                          // 4036
                v = v[0];                                                                                              // 4037
                var token = v.length > 1 ? v.substring(1, 2) : v;                                                      // 4038
                                                                                                                       // 4039
                tpl = tpl.replace('{'+token+'}', '<select class="'+k+'"></select>');                                   // 4040
            });                                                                                                        // 4041
                                                                                                                       // 4042
            return tpl;                                                                                                // 4043
        },                                                                                                             // 4044
                                                                                                                       // 4045
        /*                                                                                                             // 4046
         Initialize combos that presents in template                                                                   // 4047
        */                                                                                                             // 4048
        initCombos: function() {                                                                                       // 4049
            for (var k in this.map) {                                                                                  // 4050
                var $c = this.$widget.find('.'+k);                                                                     // 4051
                // set properties like this.$day, this.$month etc.                                                     // 4052
                this['$'+k] = $c.length ? $c : null;                                                                   // 4053
                // fill with items                                                                                     // 4054
                this.fillCombo(k);                                                                                     // 4055
            }                                                                                                          // 4056
        },                                                                                                             // 4057
                                                                                                                       // 4058
        /*                                                                                                             // 4059
         Fill combo with items                                                                                         // 4060
        */                                                                                                             // 4061
        fillCombo: function(k) {                                                                                       // 4062
            var $combo = this['$'+k];                                                                                  // 4063
            if (!$combo) {                                                                                             // 4064
                return;                                                                                                // 4065
            }                                                                                                          // 4066
                                                                                                                       // 4067
            // define method name to fill items, e.g `fillDays`                                                        // 4068
            var f = 'fill' + k.charAt(0).toUpperCase() + k.slice(1);                                                   // 4069
            var items = this[f]();                                                                                     // 4070
            var value = $combo.val();                                                                                  // 4071
                                                                                                                       // 4072
            $combo.empty();                                                                                            // 4073
            for(var i=0; i<items.length; i++) {                                                                        // 4074
                $combo.append('<option value="'+items[i][0]+'">'+items[i][1]+'</option>');                             // 4075
            }                                                                                                          // 4076
                                                                                                                       // 4077
            $combo.val(value);                                                                                         // 4078
        },                                                                                                             // 4079
                                                                                                                       // 4080
        /*                                                                                                             // 4081
         Initialize items of combos. Handles `firstItem` option                                                        // 4082
        */                                                                                                             // 4083
        fillCommon: function(key) {                                                                                    // 4084
            var values = [],                                                                                           // 4085
                relTime;                                                                                               // 4086
                                                                                                                       // 4087
            if(this.options.firstItem === 'name') {                                                                    // 4088
                //need both to support moment ver < 2 and  >= 2                                                        // 4089
                relTime = moment.relativeTime || moment.langData()._relativeTime;                                      // 4090
                var header = typeof relTime[key] === 'function' ? relTime[key](1, true, key, false) : relTime[key];    // 4091
                //take last entry (see momentjs lang files structure)                                                  // 4092
                header = header.split(' ').reverse()[0];                                                               // 4093
                values.push(['', header]);                                                                             // 4094
            } else if(this.options.firstItem === 'empty') {                                                            // 4095
                values.push(['', '']);                                                                                 // 4096
            }                                                                                                          // 4097
            return values;                                                                                             // 4098
        },                                                                                                             // 4099
                                                                                                                       // 4100
                                                                                                                       // 4101
        /*                                                                                                             // 4102
        fill day                                                                                                       // 4103
        */                                                                                                             // 4104
        fillDay: function() {                                                                                          // 4105
            var items = this.fillCommon('d'), name, i,                                                                 // 4106
                twoDigit = this.options.template.indexOf('DD') !== -1,                                                 // 4107
                daysCount = 31;                                                                                        // 4108
                                                                                                                       // 4109
            // detect days count (depends on month and year)                                                           // 4110
            // originally https://github.com/vitalets/combodate/pull/7                                                 // 4111
            if (this.options.smartDays && this.$month && this.$year) {                                                 // 4112
                var month = parseInt(this.$month.val(), 10);                                                           // 4113
                var year = parseInt(this.$year.val(), 10);                                                             // 4114
                                                                                                                       // 4115
                if (!isNaN(month) && !isNaN(year)) {                                                                   // 4116
                    daysCount = moment([year, month]).daysInMonth();                                                   // 4117
                }                                                                                                      // 4118
            }                                                                                                          // 4119
                                                                                                                       // 4120
            for (i = 1; i <= daysCount; i++) {                                                                         // 4121
                name = twoDigit ? this.leadZero(i) : i;                                                                // 4122
                items.push([i, name]);                                                                                 // 4123
            }                                                                                                          // 4124
            return items;                                                                                              // 4125
        },                                                                                                             // 4126
                                                                                                                       // 4127
        /*                                                                                                             // 4128
        fill month                                                                                                     // 4129
        */                                                                                                             // 4130
        fillMonth: function() {                                                                                        // 4131
            var items = this.fillCommon('M'), name, i,                                                                 // 4132
                longNames = this.options.template.indexOf('MMMM') !== -1,                                              // 4133
                shortNames = this.options.template.indexOf('MMM') !== -1,                                              // 4134
                twoDigit = this.options.template.indexOf('MM') !== -1;                                                 // 4135
                                                                                                                       // 4136
            for(i=0; i<=11; i++) {                                                                                     // 4137
                if(longNames) {                                                                                        // 4138
                    //see https://github.com/timrwood/momentjs.com/pull/36                                             // 4139
                    name = moment().date(1).month(i).format('MMMM');                                                   // 4140
                } else if(shortNames) {                                                                                // 4141
                    name = moment().date(1).month(i).format('MMM');                                                    // 4142
                } else if(twoDigit) {                                                                                  // 4143
                    name = this.leadZero(i+1);                                                                         // 4144
                } else {                                                                                               // 4145
                    name = i+1;                                                                                        // 4146
                }                                                                                                      // 4147
                items.push([i, name]);                                                                                 // 4148
            }                                                                                                          // 4149
            return items;                                                                                              // 4150
        },                                                                                                             // 4151
                                                                                                                       // 4152
        /*                                                                                                             // 4153
        fill year                                                                                                      // 4154
        */                                                                                                             // 4155
        fillYear: function() {                                                                                         // 4156
            var items = [], name, i,                                                                                   // 4157
                longNames = this.options.template.indexOf('YYYY') !== -1;                                              // 4158
                                                                                                                       // 4159
            for(i=this.options.maxYear; i>=this.options.minYear; i--) {                                                // 4160
                name = longNames ? i : (i+'').substring(2);                                                            // 4161
                items[this.options.yearDescending ? 'push' : 'unshift']([i, name]);                                    // 4162
            }                                                                                                          // 4163
                                                                                                                       // 4164
            items = this.fillCommon('y').concat(items);                                                                // 4165
                                                                                                                       // 4166
            return items;                                                                                              // 4167
        },                                                                                                             // 4168
                                                                                                                       // 4169
        /*                                                                                                             // 4170
        fill hour                                                                                                      // 4171
        */                                                                                                             // 4172
        fillHour: function() {                                                                                         // 4173
            var items = this.fillCommon('h'), name, i,                                                                 // 4174
                h12 = this.options.template.indexOf('h') !== -1,                                                       // 4175
                h24 = this.options.template.indexOf('H') !== -1,                                                       // 4176
                twoDigit = this.options.template.toLowerCase().indexOf('hh') !== -1,                                   // 4177
                min = h12 ? 1 : 0,                                                                                     // 4178
                max = h12 ? 12 : 23;                                                                                   // 4179
                                                                                                                       // 4180
            for(i=min; i<=max; i++) {                                                                                  // 4181
                name = twoDigit ? this.leadZero(i) : i;                                                                // 4182
                items.push([i, name]);                                                                                 // 4183
            }                                                                                                          // 4184
            return items;                                                                                              // 4185
        },                                                                                                             // 4186
                                                                                                                       // 4187
        /*                                                                                                             // 4188
        fill minute                                                                                                    // 4189
        */                                                                                                             // 4190
        fillMinute: function() {                                                                                       // 4191
            var items = this.fillCommon('m'), name, i,                                                                 // 4192
                twoDigit = this.options.template.indexOf('mm') !== -1;                                                 // 4193
                                                                                                                       // 4194
            for(i=0; i<=59; i+= this.options.minuteStep) {                                                             // 4195
                name = twoDigit ? this.leadZero(i) : i;                                                                // 4196
                items.push([i, name]);                                                                                 // 4197
            }                                                                                                          // 4198
            return items;                                                                                              // 4199
        },                                                                                                             // 4200
                                                                                                                       // 4201
        /*                                                                                                             // 4202
        fill second                                                                                                    // 4203
        */                                                                                                             // 4204
        fillSecond: function() {                                                                                       // 4205
            var items = this.fillCommon('s'), name, i,                                                                 // 4206
                twoDigit = this.options.template.indexOf('ss') !== -1;                                                 // 4207
                                                                                                                       // 4208
            for(i=0; i<=59; i+= this.options.secondStep) {                                                             // 4209
                name = twoDigit ? this.leadZero(i) : i;                                                                // 4210
                items.push([i, name]);                                                                                 // 4211
            }                                                                                                          // 4212
            return items;                                                                                              // 4213
        },                                                                                                             // 4214
                                                                                                                       // 4215
        /*                                                                                                             // 4216
        fill ampm                                                                                                      // 4217
        */                                                                                                             // 4218
        fillAmpm: function() {                                                                                         // 4219
            var ampmL = this.options.template.indexOf('a') !== -1,                                                     // 4220
                ampmU = this.options.template.indexOf('A') !== -1,                                                     // 4221
                items = [                                                                                              // 4222
                    ['am', ampmL ? 'am' : 'AM'],                                                                       // 4223
                    ['pm', ampmL ? 'pm' : 'PM']                                                                        // 4224
                ];                                                                                                     // 4225
            return items;                                                                                              // 4226
        },                                                                                                             // 4227
                                                                                                                       // 4228
        /*                                                                                                             // 4229
         Returns current date value from combos.                                                                       // 4230
         If format not specified - `options.format` used.                                                              // 4231
         If format = `null` - Moment object returned.                                                                  // 4232
        */                                                                                                             // 4233
        getValue: function(format) {                                                                                   // 4234
            var dt, values = {},                                                                                       // 4235
                that = this,                                                                                           // 4236
                notSelected = false;                                                                                   // 4237
                                                                                                                       // 4238
            //getting selected values                                                                                  // 4239
            $.each(this.map, function(k, v) {                                                                          // 4240
                if(k === 'ampm') {                                                                                     // 4241
                    return;                                                                                            // 4242
                }                                                                                                      // 4243
                var def = k === 'day' ? 1 : 0;                                                                         // 4244
                                                                                                                       // 4245
                values[k] = that['$'+k] ? parseInt(that['$'+k].val(), 10) : def;                                       // 4246
                                                                                                                       // 4247
                if(isNaN(values[k])) {                                                                                 // 4248
                   notSelected = true;                                                                                 // 4249
                   return false;                                                                                       // 4250
                }                                                                                                      // 4251
            });                                                                                                        // 4252
                                                                                                                       // 4253
            //if at least one visible combo not selected - return empty string                                         // 4254
            if(notSelected) {                                                                                          // 4255
               return '';                                                                                              // 4256
            }                                                                                                          // 4257
                                                                                                                       // 4258
            //convert hours 12h --> 24h                                                                                // 4259
            if(this.$ampm) {                                                                                           // 4260
                //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)   // 4261
                if(values.hour === 12) {                                                                               // 4262
                    values.hour = this.$ampm.val() === 'am' ? 0 : 12;                                                  // 4263
                } else {                                                                                               // 4264
                    values.hour = this.$ampm.val() === 'am' ? values.hour : values.hour+12;                            // 4265
                }                                                                                                      // 4266
            }                                                                                                          // 4267
                                                                                                                       // 4268
            dt = moment([values.year, values.month, values.day, values.hour, values.minute, values.second]);           // 4269
                                                                                                                       // 4270
            //highlight invalid date                                                                                   // 4271
            this.highlight(dt);                                                                                        // 4272
                                                                                                                       // 4273
            format = format === undefined ? this.options.format : format;                                              // 4274
            if(format === null) {                                                                                      // 4275
               return dt.isValid() ? dt : null;                                                                        // 4276
            } else {                                                                                                   // 4277
               return dt.isValid() ? dt.format(format) : '';                                                           // 4278
            }                                                                                                          // 4279
        },                                                                                                             // 4280
                                                                                                                       // 4281
        setValue: function(value) {                                                                                    // 4282
            if(!value) {                                                                                               // 4283
                return;                                                                                                // 4284
            }                                                                                                          // 4285
                                                                                                                       // 4286
            var dt = typeof value === 'string' ? moment(value, this.options.format) : moment(value),                   // 4287
                that = this,                                                                                           // 4288
                values = {};                                                                                           // 4289
                                                                                                                       // 4290
            //function to find nearest value in select options                                                         // 4291
            function getNearest($select, value) {                                                                      // 4292
                var delta = {};                                                                                        // 4293
                $select.children('option').each(function(i, opt){                                                      // 4294
                    var optValue = $(opt).attr('value'),                                                               // 4295
                    distance;                                                                                          // 4296
                                                                                                                       // 4297
                    if(optValue === '') return;                                                                        // 4298
                    distance = Math.abs(optValue - value);                                                             // 4299
                    if(typeof delta.distance === 'undefined' || distance < delta.distance) {                           // 4300
                        delta = {value: optValue, distance: distance};                                                 // 4301
                    }                                                                                                  // 4302
                });                                                                                                    // 4303
                return delta.value;                                                                                    // 4304
            }                                                                                                          // 4305
                                                                                                                       // 4306
            if(dt.isValid()) {                                                                                         // 4307
                //read values from date object                                                                         // 4308
                $.each(this.map, function(k, v) {                                                                      // 4309
                    if(k === 'ampm') {                                                                                 // 4310
                       return;                                                                                         // 4311
                    }                                                                                                  // 4312
                    values[k] = dt[v[1]]();                                                                            // 4313
                });                                                                                                    // 4314
                                                                                                                       // 4315
                if(this.$ampm) {                                                                                       // 4316
                    //12:00 pm --> 12:00 (24-h format, midday), 12:00 am --> 00:00 (24-h format, midnight, start of day)
                    if(values.hour >= 12) {                                                                            // 4318
                        values.ampm = 'pm';                                                                            // 4319
                        if(values.hour > 12) {                                                                         // 4320
                            values.hour -= 12;                                                                         // 4321
                        }                                                                                              // 4322
                    } else {                                                                                           // 4323
                        values.ampm = 'am';                                                                            // 4324
                        if(values.hour === 0) {                                                                        // 4325
                            values.hour = 12;                                                                          // 4326
                        }                                                                                              // 4327
                    }                                                                                                  // 4328
                }                                                                                                      // 4329
                                                                                                                       // 4330
                $.each(values, function(k, v) {                                                                        // 4331
                    //call val() for each existing combo, e.g. this.$hour.val()                                        // 4332
                    if(that['$'+k]) {                                                                                  // 4333
                                                                                                                       // 4334
                        if(k === 'minute' && that.options.minuteStep > 1 && that.options.roundTime) {                  // 4335
                           v = getNearest(that['$'+k], v);                                                             // 4336
                        }                                                                                              // 4337
                                                                                                                       // 4338
                        if(k === 'second' && that.options.secondStep > 1 && that.options.roundTime) {                  // 4339
                           v = getNearest(that['$'+k], v);                                                             // 4340
                        }                                                                                              // 4341
                                                                                                                       // 4342
                        that['$'+k].val(v);                                                                            // 4343
                    }                                                                                                  // 4344
                });                                                                                                    // 4345
                                                                                                                       // 4346
                // update days count                                                                                   // 4347
                if (this.options.smartDays) {                                                                          // 4348
                    this.fillCombo('day');                                                                             // 4349
                }                                                                                                      // 4350
                                                                                                                       // 4351
               this.$element.val(dt.format(this.options.format)).change();                                             // 4352
            }                                                                                                          // 4353
        },                                                                                                             // 4354
                                                                                                                       // 4355
        /*                                                                                                             // 4356
         highlight combos if date is invalid                                                                           // 4357
        */                                                                                                             // 4358
        highlight: function(dt) {                                                                                      // 4359
            if(!dt.isValid()) {                                                                                        // 4360
                if(this.options.errorClass) {                                                                          // 4361
                    this.$widget.addClass(this.options.errorClass);                                                    // 4362
                } else {                                                                                               // 4363
                    //store original border color                                                                      // 4364
                    if(!this.borderColor) {                                                                            // 4365
                        this.borderColor = this.$widget.find('select').css('border-color');                            // 4366
                    }                                                                                                  // 4367
                    this.$widget.find('select').css('border-color', 'red');                                            // 4368
                }                                                                                                      // 4369
            } else {                                                                                                   // 4370
                if(this.options.errorClass) {                                                                          // 4371
                    this.$widget.removeClass(this.options.errorClass);                                                 // 4372
                } else {                                                                                               // 4373
                    this.$widget.find('select').css('border-color', this.borderColor);                                 // 4374
                }                                                                                                      // 4375
            }                                                                                                          // 4376
        },                                                                                                             // 4377
                                                                                                                       // 4378
        leadZero: function(v) {                                                                                        // 4379
            return v <= 9 ? '0' + v : v;                                                                               // 4380
        },                                                                                                             // 4381
                                                                                                                       // 4382
        destroy: function() {                                                                                          // 4383
            this.$widget.remove();                                                                                     // 4384
            this.$element.removeData('combodate').show();                                                              // 4385
        }                                                                                                              // 4386
                                                                                                                       // 4387
        //todo: clear method                                                                                           // 4388
    };                                                                                                                 // 4389
                                                                                                                       // 4390
    $.fn.combodate = function ( option ) {                                                                             // 4391
        var d, args = Array.apply(null, arguments);                                                                    // 4392
        args.shift();                                                                                                  // 4393
                                                                                                                       // 4394
        //getValue returns date as string / object (not jQuery object)                                                 // 4395
        if(option === 'getValue' && this.length && (d = this.eq(0).data('combodate'))) {                               // 4396
          return d.getValue.apply(d, args);                                                                            // 4397
        }                                                                                                              // 4398
                                                                                                                       // 4399
        return this.each(function () {                                                                                 // 4400
            var $this = $(this),                                                                                       // 4401
            data = $this.data('combodate'),                                                                            // 4402
            options = typeof option == 'object' && option;                                                             // 4403
            if (!data) {                                                                                               // 4404
                $this.data('combodate', (data = new Combodate(this, options)));                                        // 4405
            }                                                                                                          // 4406
            if (typeof option == 'string' && typeof data[option] == 'function') {                                      // 4407
                data[option].apply(data, args);                                                                        // 4408
            }                                                                                                          // 4409
        });                                                                                                            // 4410
    };                                                                                                                 // 4411
                                                                                                                       // 4412
    $.fn.combodate.defaults = {                                                                                        // 4413
         //in this format value stored in original input                                                               // 4414
        format: 'DD-MM-YYYY HH:mm',                                                                                    // 4415
        //in this format items in dropdowns are displayed                                                              // 4416
        template: 'D / MMM / YYYY   H : mm',                                                                           // 4417
        //initial value, can be `new Date()`                                                                           // 4418
        value: null,                                                                                                   // 4419
        minYear: 1970,                                                                                                 // 4420
        maxYear: 2015,                                                                                                 // 4421
        yearDescending: true,                                                                                          // 4422
        minuteStep: 5,                                                                                                 // 4423
        secondStep: 1,                                                                                                 // 4424
        firstItem: 'empty', //'name', 'empty', 'none'                                                                  // 4425
        errorClass: null,                                                                                              // 4426
        roundTime: true, // whether to round minutes and seconds if step > 1                                           // 4427
        smartDays: false // whether days in combo depend on selected month: 31, 30, 28                                 // 4428
    };                                                                                                                 // 4429
                                                                                                                       // 4430
}(window.jQuery));                                                                                                     // 4431
/**                                                                                                                    // 4432
Combodate input - dropdown date and time picker.                                                                       // 4433
Based on [combodate](http://vitalets.github.com/combodate) plugin (included). To use it you should manually include [momentjs](http://momentjs.com).
                                                                                                                       // 4435
    <script src="js/moment.min.js"></script>                                                                           // 4436
                                                                                                                       // 4437
Allows to input:                                                                                                       // 4438
                                                                                                                       // 4439
* only date                                                                                                            // 4440
* only time                                                                                                            // 4441
* both date and time                                                                                                   // 4442
                                                                                                                       // 4443
Please note, that format is taken from momentjs and **not compatible** with bootstrap-datepicker / jquery UI datepicker.  
Internally value stored as `momentjs` object.                                                                          // 4445
                                                                                                                       // 4446
@class combodate                                                                                                       // 4447
@extends abstractinput                                                                                                 // 4448
@final                                                                                                                 // 4449
@since 1.4.0                                                                                                           // 4450
@example                                                                                                               // 4451
<a href="#" id="dob" data-type="combodate" data-pk="1" data-url="/post" data-value="1984-05-15" data-title="Select date"></a>
<script>                                                                                                               // 4453
$(function(){                                                                                                          // 4454
    $('#dob').editable({                                                                                               // 4455
        format: 'YYYY-MM-DD',                                                                                          // 4456
        viewformat: 'DD.MM.YYYY',                                                                                      // 4457
        template: 'D / MMMM / YYYY',                                                                                   // 4458
        combodate: {                                                                                                   // 4459
                minYear: 2000,                                                                                         // 4460
                maxYear: 2015,                                                                                         // 4461
                minuteStep: 1                                                                                          // 4462
           }                                                                                                           // 4463
        }                                                                                                              // 4464
    });                                                                                                                // 4465
});                                                                                                                    // 4466
</script>                                                                                                              // 4467
**/                                                                                                                    // 4468
                                                                                                                       // 4469
/*global moment*/                                                                                                      // 4470
                                                                                                                       // 4471
(function ($) {                                                                                                        // 4472
    "use strict";                                                                                                      // 4473
                                                                                                                       // 4474
    var Constructor = function (options) {                                                                             // 4475
        this.init('combodate', options, Constructor.defaults);                                                         // 4476
                                                                                                                       // 4477
        //by default viewformat equals to format                                                                       // 4478
        if(!this.options.viewformat) {                                                                                 // 4479
            this.options.viewformat = this.options.format;                                                             // 4480
        }                                                                                                              // 4481
                                                                                                                       // 4482
        //try parse combodate config defined as json string in data-combodate                                          // 4483
        options.combodate = $.fn.editableutils.tryParseJson(options.combodate, true);                                  // 4484
                                                                                                                       // 4485
        //overriding combodate config (as by default jQuery extend() is not recursive)                                 // 4486
        this.options.combodate = $.extend({}, Constructor.defaults.combodate, options.combodate, {                     // 4487
            format: this.options.format,                                                                               // 4488
            template: this.options.template                                                                            // 4489
        });                                                                                                            // 4490
    };                                                                                                                 // 4491
                                                                                                                       // 4492
    $.fn.editableutils.inherit(Constructor, $.fn.editabletypes.abstractinput);                                         // 4493
                                                                                                                       // 4494
    $.extend(Constructor.prototype, {                                                                                  // 4495
        render: function () {                                                                                          // 4496
            this.$input.combodate(this.options.combodate);                                                             // 4497
                                                                                                                       // 4498
            if($.fn.editableform.engine === 'bs3') {                                                                   // 4499
                this.$input.siblings().find('select').addClass('form-control');                                        // 4500
            }                                                                                                          // 4501
                                                                                                                       // 4502
            if(this.options.inputclass) {                                                                              // 4503
                this.$input.siblings().find('select').addClass(this.options.inputclass);                               // 4504
            }                                                                                                          // 4505
            //"clear" link                                                                                             // 4506
            /*                                                                                                         // 4507
            if(this.options.clear) {                                                                                   // 4508
                this.$clear = $('<a href="#"></a>').html(this.options.clear).click($.proxy(function(e){                // 4509
                    e.preventDefault();                                                                                // 4510
                    e.stopPropagation();                                                                               // 4511
                    this.clear();                                                                                      // 4512
                }, this));                                                                                             // 4513
                                                                                                                       // 4514
                this.$tpl.parent().append($('<div class="editable-clear">').append(this.$clear));                      // 4515
            }                                                                                                          // 4516
            */                                                                                                         // 4517
        },                                                                                                             // 4518
                                                                                                                       // 4519
        value2html: function(value, element) {                                                                         // 4520
            var text = value ? value.format(this.options.viewformat) : '';                                             // 4521
            //$(element).text(text);                                                                                   // 4522
            Constructor.superclass.value2html.call(this, text, element);                                               // 4523
        },                                                                                                             // 4524
                                                                                                                       // 4525
        html2value: function(html) {                                                                                   // 4526
            return html ? moment(html, this.options.viewformat) : null;                                                // 4527
        },                                                                                                             // 4528
                                                                                                                       // 4529
        value2str: function(value) {                                                                                   // 4530
            return value ? value.format(this.options.format) : '';                                                     // 4531
       },                                                                                                              // 4532
                                                                                                                       // 4533
       str2value: function(str) {                                                                                      // 4534
           return str ? moment(str, this.options.format) : null;                                                       // 4535
       },                                                                                                              // 4536
                                                                                                                       // 4537
       value2submit: function(value) {                                                                                 // 4538
           return this.value2str(value);                                                                               // 4539
       },                                                                                                              // 4540
                                                                                                                       // 4541
       value2input: function(value) {                                                                                  // 4542
           this.$input.combodate('setValue', value);                                                                   // 4543
       },                                                                                                              // 4544
                                                                                                                       // 4545
       input2value: function() {                                                                                       // 4546
           return this.$input.combodate('getValue', null);                                                             // 4547
       },                                                                                                              // 4548
                                                                                                                       // 4549
       activate: function() {                                                                                          // 4550
           this.$input.siblings('.combodate').find('select').eq(0).focus();                                            // 4551
       },                                                                                                              // 4552
                                                                                                                       // 4553
       /*                                                                                                              // 4554
       clear:  function() {                                                                                            // 4555
          this.$input.data('datepicker').date = null;                                                                  // 4556
          this.$input.find('.active').removeClass('active');                                                           // 4557
       },                                                                                                              // 4558
       */                                                                                                              // 4559
                                                                                                                       // 4560
       autosubmit: function() {                                                                                        // 4561
                                                                                                                       // 4562
       }                                                                                                               // 4563
                                                                                                                       // 4564
    });                                                                                                                // 4565
                                                                                                                       // 4566
    Constructor.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                   // 4567
        /**                                                                                                            // 4568
        @property tpl                                                                                                  // 4569
        @default <input type="text">                                                                                   // 4570
        **/                                                                                                            // 4571
        tpl:'<input type="text">',                                                                                     // 4572
        /**                                                                                                            // 4573
        @property inputclass                                                                                           // 4574
        @default null                                                                                                  // 4575
        **/                                                                                                            // 4576
        inputclass: null,                                                                                              // 4577
        /**                                                                                                            // 4578
        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>
        See list of tokens in [momentjs docs](http://momentjs.com/docs/#/parsing/string-format)                        // 4580
                                                                                                                       // 4581
        @property format                                                                                               // 4582
        @type string                                                                                                   // 4583
        @default YYYY-MM-DD                                                                                            // 4584
        **/                                                                                                            // 4585
        format:'YYYY-MM-DD',                                                                                           // 4586
        /**                                                                                                            // 4587
        Format used for displaying date. Also applied when converting date from element's text on init.                // 4588
        If not specified equals to `format`.                                                                           // 4589
                                                                                                                       // 4590
        @property viewformat                                                                                           // 4591
        @type string                                                                                                   // 4592
        @default null                                                                                                  // 4593
        **/                                                                                                            // 4594
        viewformat: null,                                                                                              // 4595
        /**                                                                                                            // 4596
        Template used for displaying dropdowns.                                                                        // 4597
                                                                                                                       // 4598
        @property template                                                                                             // 4599
        @type string                                                                                                   // 4600
        @default D / MMM / YYYY                                                                                        // 4601
        **/                                                                                                            // 4602
        template: 'D / MMM / YYYY',                                                                                    // 4603
        /**                                                                                                            // 4604
        Configuration of combodate.                                                                                    // 4605
        Full list of options: http://vitalets.github.com/combodate/#docs                                               // 4606
                                                                                                                       // 4607
        @property combodate                                                                                            // 4608
        @type object                                                                                                   // 4609
        @default null                                                                                                  // 4610
        **/                                                                                                            // 4611
        combodate: null                                                                                                // 4612
                                                                                                                       // 4613
        /*                                                                                                             // 4614
        (not implemented yet)                                                                                          // 4615
        Text shown as clear date button.                                                                               // 4616
        If <code>false</code> clear button will not be rendered.                                                       // 4617
                                                                                                                       // 4618
        @property clear                                                                                                // 4619
        @type boolean|string                                                                                           // 4620
        @default 'x clear'                                                                                             // 4621
        */                                                                                                             // 4622
        //clear: '&times; clear'                                                                                       // 4623
    });                                                                                                                // 4624
                                                                                                                       // 4625
    $.fn.editabletypes.combodate = Constructor;                                                                        // 4626
                                                                                                                       // 4627
}(window.jQuery));                                                                                                     // 4628
                                                                                                                       // 4629
/*                                                                                                                     // 4630
Editableform based on Twitter Bootstrap 3                                                                              // 4631
*/                                                                                                                     // 4632
(function ($) {                                                                                                        // 4633
    "use strict";                                                                                                      // 4634
                                                                                                                       // 4635
    //store parent methods                                                                                             // 4636
    var pInitInput = $.fn.editableform.Constructor.prototype.initInput;                                                // 4637
                                                                                                                       // 4638
    $.extend($.fn.editableform.Constructor.prototype, {                                                                // 4639
        initTemplate: function() {                                                                                     // 4640
            this.$form = $($.fn.editableform.template);                                                                // 4641
            this.$form.find('.control-group').addClass('form-group');                                                  // 4642
            this.$form.find('.editable-error-block').addClass('help-block');                                           // 4643
        },                                                                                                             // 4644
        initInput: function() {                                                                                        // 4645
            pInitInput.apply(this);                                                                                    // 4646
                                                                                                                       // 4647
            //for bs3 set default class `input-sm` to standard inputs                                                  // 4648
            var emptyInputClass = this.input.options.inputclass === null || this.input.options.inputclass === false;   // 4649
            var defaultClass = 'input-sm';                                                                             // 4650
                                                                                                                       // 4651
            //bs3 add `form-control` class to standard inputs                                                          // 4652
            var stdtypes = 'text,select,textarea,password,email,url,tel,number,range,time,typeaheadjs'.split(',');     // 4653
            if(~$.inArray(this.input.type, stdtypes)) {                                                                // 4654
                this.input.$input.addClass('form-control');                                                            // 4655
                if(emptyInputClass) {                                                                                  // 4656
                    this.input.options.inputclass = defaultClass;                                                      // 4657
                    this.input.$input.addClass(defaultClass);                                                          // 4658
                }                                                                                                      // 4659
            }                                                                                                          // 4660
                                                                                                                       // 4661
            //apply bs3 size class also to buttons (to fit size of control)                                            // 4662
            var $btn = this.$form.find('.editable-buttons');                                                           // 4663
            var classes = emptyInputClass ? [defaultClass] : this.input.options.inputclass.split(' ');                 // 4664
            for(var i=0; i<classes.length; i++) {                                                                      // 4665
                // `btn-sm` is default now                                                                             // 4666
                /*                                                                                                     // 4667
                if(classes[i].toLowerCase() === 'input-sm') {                                                          // 4668
                    $btn.find('button').addClass('btn-sm');                                                            // 4669
                }                                                                                                      // 4670
                */                                                                                                     // 4671
                if(classes[i].toLowerCase() === 'input-lg') {                                                          // 4672
                    $btn.find('button').removeClass('btn-sm').addClass('btn-lg');                                      // 4673
                }                                                                                                      // 4674
            }                                                                                                          // 4675
        }                                                                                                              // 4676
    });                                                                                                                // 4677
                                                                                                                       // 4678
    //buttons                                                                                                          // 4679
    $.fn.editableform.buttons =                                                                                        // 4680
      '<button type="submit" class="btn btn-primary btn-sm editable-submit">'+                                         // 4681
        '<i class="glyphicon glyphicon-ok"></i>'+                                                                      // 4682
      '</button>'+                                                                                                     // 4683
      '<button type="button" class="btn btn-default btn-sm editable-cancel">'+                                         // 4684
        '<i class="glyphicon glyphicon-remove"></i>'+                                                                  // 4685
      '</button>';                                                                                                     // 4686
                                                                                                                       // 4687
    //error classes                                                                                                    // 4688
    $.fn.editableform.errorGroupClass = 'has-error';                                                                   // 4689
    $.fn.editableform.errorBlockClass = null;                                                                          // 4690
    //engine                                                                                                           // 4691
    $.fn.editableform.engine = 'bs3';                                                                                  // 4692
}(window.jQuery));                                                                                                     // 4693
/**                                                                                                                    // 4694
* Editable Popover3 (for Bootstrap 3)                                                                                  // 4695
* ---------------------                                                                                                // 4696
* requires bootstrap-popover.js                                                                                        // 4697
*/                                                                                                                     // 4698
(function ($) {                                                                                                        // 4699
    "use strict";                                                                                                      // 4700
                                                                                                                       // 4701
    //extend methods                                                                                                   // 4702
    $.extend($.fn.editableContainer.Popup.prototype, {                                                                 // 4703
        containerName: 'popover',                                                                                      // 4704
        containerDataName: 'bs.popover',                                                                               // 4705
        innerCss: '.popover-content',                                                                                  // 4706
        defaults: $.fn.popover.Constructor.DEFAULTS,                                                                   // 4707
                                                                                                                       // 4708
        initContainer: function(){                                                                                     // 4709
            $.extend(this.containerOptions, {                                                                          // 4710
                trigger: 'manual',                                                                                     // 4711
                selector: false,                                                                                       // 4712
                content: ' ',                                                                                          // 4713
                template: this.defaults.template                                                                       // 4714
            });                                                                                                        // 4715
                                                                                                                       // 4716
            //as template property is used in inputs, hide it from popover                                             // 4717
            var t;                                                                                                     // 4718
            if(this.$element.data('template')) {                                                                       // 4719
               t = this.$element.data('template');                                                                     // 4720
               this.$element.removeData('template');                                                                   // 4721
            }                                                                                                          // 4722
                                                                                                                       // 4723
            this.call(this.containerOptions);                                                                          // 4724
                                                                                                                       // 4725
            if(t) {                                                                                                    // 4726
               //restore data('template')                                                                              // 4727
               this.$element.data('template', t);                                                                      // 4728
            }                                                                                                          // 4729
        },                                                                                                             // 4730
                                                                                                                       // 4731
        /* show */                                                                                                     // 4732
        innerShow: function () {                                                                                       // 4733
            this.call('show');                                                                                         // 4734
        },                                                                                                             // 4735
                                                                                                                       // 4736
        /* hide */                                                                                                     // 4737
        innerHide: function () {                                                                                       // 4738
            this.call('hide');                                                                                         // 4739
        },                                                                                                             // 4740
                                                                                                                       // 4741
        /* destroy */                                                                                                  // 4742
        innerDestroy: function() {                                                                                     // 4743
            this.call('destroy');                                                                                      // 4744
        },                                                                                                             // 4745
                                                                                                                       // 4746
        setContainerOption: function(key, value) {                                                                     // 4747
            this.container().options[key] = value;                                                                     // 4748
        },                                                                                                             // 4749
                                                                                                                       // 4750
        /**                                                                                                            // 4751
        * move popover to new position. This function mainly copied from bootstrap-popover.                            // 4752
        */                                                                                                             // 4753
        /*jshint laxcomma: true, eqeqeq: false*/                                                                       // 4754
        setPosition: function () {                                                                                     // 4755
                                                                                                                       // 4756
            (function() {                                                                                              // 4757
            /*                                                                                                         // 4758
                var $tip = this.tip()                                                                                  // 4759
                , inside                                                                                               // 4760
                , pos                                                                                                  // 4761
                , actualWidth                                                                                          // 4762
                , actualHeight                                                                                         // 4763
                , placement                                                                                            // 4764
                , tp                                                                                                   // 4765
                , tpt                                                                                                  // 4766
                , tpb                                                                                                  // 4767
                , tpl                                                                                                  // 4768
                , tpr;                                                                                                 // 4769
                                                                                                                       // 4770
                placement = typeof this.options.placement === 'function' ?                                             // 4771
                this.options.placement.call(this, $tip[0], this.$element[0]) :                                         // 4772
                this.options.placement;                                                                                // 4773
                                                                                                                       // 4774
                inside = /in/.test(placement);                                                                         // 4775
                                                                                                                       // 4776
                $tip                                                                                                   // 4777
              //  .detach()                                                                                            // 4778
              //vitalets: remove any placement class because otherwise they dont influence on re-positioning of visible popover
                .removeClass('top right bottom left')                                                                  // 4780
                .css({ top: 0, left: 0, display: 'block' });                                                           // 4781
              //  .insertAfter(this.$element);                                                                         // 4782
                                                                                                                       // 4783
                pos = this.getPosition(inside);                                                                        // 4784
                                                                                                                       // 4785
                actualWidth = $tip[0].offsetWidth;                                                                     // 4786
                actualHeight = $tip[0].offsetHeight;                                                                   // 4787
                                                                                                                       // 4788
                placement = inside ? placement.split(' ')[1] : placement;                                              // 4789
                                                                                                                       // 4790
                tpb = {top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2};                   // 4791
                tpt = {top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};                 // 4792
                tpl = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth};                // 4793
                tpr = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width};                  // 4794
                                                                                                                       // 4795
                switch (placement) {                                                                                   // 4796
                    case 'bottom':                                                                                     // 4797
                        if ((tpb.top + actualHeight) > ($(window).scrollTop() + $(window).height())) {                 // 4798
                            if (tpt.top > $(window).scrollTop()) {                                                     // 4799
                                placement = 'top';                                                                     // 4800
                            } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {      // 4801
                                placement = 'right';                                                                   // 4802
                            } else if (tpl.left > $(window).scrollLeft()) {                                            // 4803
                                placement = 'left';                                                                    // 4804
                            } else {                                                                                   // 4805
                                placement = 'right';                                                                   // 4806
                            }                                                                                          // 4807
                        }                                                                                              // 4808
                        break;                                                                                         // 4809
                    case 'top':                                                                                        // 4810
                        if (tpt.top < $(window).scrollTop()) {                                                         // 4811
                            if ((tpb.top + actualHeight) < ($(window).scrollTop() + $(window).height())) {             // 4812
                                placement = 'bottom';                                                                  // 4813
                            } else if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {      // 4814
                                placement = 'right';                                                                   // 4815
                            } else if (tpl.left > $(window).scrollLeft()) {                                            // 4816
                                placement = 'left';                                                                    // 4817
                            } else {                                                                                   // 4818
                                placement = 'right';                                                                   // 4819
                            }                                                                                          // 4820
                        }                                                                                              // 4821
                        break;                                                                                         // 4822
                    case 'left':                                                                                       // 4823
                        if (tpl.left < $(window).scrollLeft()) {                                                       // 4824
                            if ((tpr.left + actualWidth) < ($(window).scrollLeft() + $(window).width())) {             // 4825
                                placement = 'right';                                                                   // 4826
                            } else if (tpt.top > $(window).scrollTop()) {                                              // 4827
                                placement = 'top';                                                                     // 4828
                            } else if (tpt.top > $(window).scrollTop()) {                                              // 4829
                                placement = 'bottom';                                                                  // 4830
                            } else {                                                                                   // 4831
                                placement = 'right';                                                                   // 4832
                            }                                                                                          // 4833
                        }                                                                                              // 4834
                        break;                                                                                         // 4835
                    case 'right':                                                                                      // 4836
                        if ((tpr.left + actualWidth) > ($(window).scrollLeft() + $(window).width())) {                 // 4837
                            if (tpl.left > $(window).scrollLeft()) {                                                   // 4838
                                placement = 'left';                                                                    // 4839
                            } else if (tpt.top > $(window).scrollTop()) {                                              // 4840
                                placement = 'top';                                                                     // 4841
                            } else if (tpt.top > $(window).scrollTop()) {                                              // 4842
                                placement = 'bottom';                                                                  // 4843
                            }                                                                                          // 4844
                        }                                                                                              // 4845
                        break;                                                                                         // 4846
                }                                                                                                      // 4847
                                                                                                                       // 4848
                switch (placement) {                                                                                   // 4849
                    case 'bottom':                                                                                     // 4850
                        tp = tpb;                                                                                      // 4851
                        break;                                                                                         // 4852
                    case 'top':                                                                                        // 4853
                        tp = tpt;                                                                                      // 4854
                        break;                                                                                         // 4855
                    case 'left':                                                                                       // 4856
                        tp = tpl;                                                                                      // 4857
                        break;                                                                                         // 4858
                    case 'right':                                                                                      // 4859
                        tp = tpr;                                                                                      // 4860
                        break;                                                                                         // 4861
                }                                                                                                      // 4862
                                                                                                                       // 4863
                $tip                                                                                                   // 4864
                .offset(tp)                                                                                            // 4865
                .addClass(placement)                                                                                   // 4866
                .addClass('in');                                                                                       // 4867
           */                                                                                                          // 4868
                                                                                                                       // 4869
                                                                                                                       // 4870
            var $tip = this.tip();                                                                                     // 4871
                                                                                                                       // 4872
            var placement = typeof this.options.placement == 'function' ?                                              // 4873
                this.options.placement.call(this, $tip[0], this.$element[0]) :                                         // 4874
                this.options.placement;                                                                                // 4875
                                                                                                                       // 4876
            var autoToken = /\s?auto?\s?/i;                                                                            // 4877
            var autoPlace = autoToken.test(placement);                                                                 // 4878
            if (autoPlace) {                                                                                           // 4879
                placement = placement.replace(autoToken, '') || 'top';                                                 // 4880
            }                                                                                                          // 4881
                                                                                                                       // 4882
                                                                                                                       // 4883
            var pos = this.getPosition();                                                                              // 4884
            var actualWidth = $tip[0].offsetWidth;                                                                     // 4885
            var actualHeight = $tip[0].offsetHeight;                                                                   // 4886
                                                                                                                       // 4887
            if (autoPlace) {                                                                                           // 4888
                var $parent = this.$element.parent();                                                                  // 4889
                                                                                                                       // 4890
                var orgPlacement = placement;                                                                          // 4891
                var docScroll    = document.documentElement.scrollTop || document.body.scrollTop;                      // 4892
                var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth();       // 4893
                var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight();      // 4894
                var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left;                       // 4895
                                                                                                                       // 4896
                placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :
                            placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :
                            placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :
                            placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :
                            placement;                                                                                 // 4901
                                                                                                                       // 4902
                $tip                                                                                                   // 4903
                  .removeClass(orgPlacement)                                                                           // 4904
                  .addClass(placement);                                                                                // 4905
            }                                                                                                          // 4906
                                                                                                                       // 4907
                                                                                                                       // 4908
            var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight);                // 4909
                                                                                                                       // 4910
            this.applyPlacement(calculatedOffset, placement);                                                          // 4911
                                                                                                                       // 4912
                                                                                                                       // 4913
            }).call(this.container());                                                                                 // 4914
          /*jshint laxcomma: false, eqeqeq: true*/                                                                     // 4915
        }                                                                                                              // 4916
    });                                                                                                                // 4917
                                                                                                                       // 4918
}(window.jQuery));                                                                                                     // 4919
                                                                                                                       // 4920
/* =========================================================                                                           // 4921
 * bootstrap-datepicker.js                                                                                             // 4922
 * http://www.eyecon.ro/bootstrap-datepicker                                                                           // 4923
 * =========================================================                                                           // 4924
 * Copyright 2012 Stefan Petre                                                                                         // 4925
 * Improvements by Andrew Rowls                                                                                        // 4926
 *                                                                                                                     // 4927
 * Licensed under the Apache License, Version 2.0 (the "License");                                                     // 4928
 * you may not use this file except in compliance with the License.                                                    // 4929
 * You may obtain a copy of the License at                                                                             // 4930
 *                                                                                                                     // 4931
 * http://www.apache.org/licenses/LICENSE-2.0                                                                          // 4932
 *                                                                                                                     // 4933
 * Unless required by applicable law or agreed to in writing, software                                                 // 4934
 * distributed under the License is distributed on an "AS IS" BASIS,                                                   // 4935
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                            // 4936
 * See the License for the specific language governing permissions and                                                 // 4937
 * limitations under the License.                                                                                      // 4938
 * ========================================================= */                                                        // 4939
                                                                                                                       // 4940
(function( $ ) {                                                                                                       // 4941
                                                                                                                       // 4942
	function UTCDate(){                                                                                                   // 4943
		return new Date(Date.UTC.apply(Date, arguments));                                                                    // 4944
	}                                                                                                                     // 4945
	function UTCToday(){                                                                                                  // 4946
		var today = new Date();                                                                                              // 4947
		return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate());                                     // 4948
	}                                                                                                                     // 4949
                                                                                                                       // 4950
	// Picker object                                                                                                      // 4951
                                                                                                                       // 4952
	var Datepicker = function(element, options) {                                                                         // 4953
		var that = this;                                                                                                     // 4954
                                                                                                                       // 4955
		this._process_options(options);                                                                                      // 4956
                                                                                                                       // 4957
		this.element = $(element);                                                                                           // 4958
		this.isInline = false;                                                                                               // 4959
		this.isInput = this.element.is('input');                                                                             // 4960
		this.component = this.element.is('.date') ? this.element.find('.add-on, .btn') : false;                              // 4961
		this.hasInput = this.component && this.element.find('input').length;                                                 // 4962
		if(this.component && this.component.length === 0)                                                                    // 4963
			this.component = false;                                                                                             // 4964
                                                                                                                       // 4965
		this.picker = $(DPGlobal.template);                                                                                  // 4966
		this._buildEvents();                                                                                                 // 4967
		this._attachEvents();                                                                                                // 4968
                                                                                                                       // 4969
		if(this.isInline) {                                                                                                  // 4970
			this.picker.addClass('datepicker-inline').appendTo(this.element);                                                   // 4971
		} else {                                                                                                             // 4972
			this.picker.addClass('datepicker-dropdown dropdown-menu');                                                          // 4973
		}                                                                                                                    // 4974
                                                                                                                       // 4975
		if (this.o.rtl){                                                                                                     // 4976
			this.picker.addClass('datepicker-rtl');                                                                             // 4977
			this.picker.find('.prev i, .next i')                                                                                // 4978
						.toggleClass('icon-arrow-left icon-arrow-right');                                                                // 4979
		}                                                                                                                    // 4980
                                                                                                                       // 4981
                                                                                                                       // 4982
		this.viewMode = this.o.startView;                                                                                    // 4983
                                                                                                                       // 4984
		if (this.o.calendarWeeks)                                                                                            // 4985
			this.picker.find('tfoot th.today')                                                                                  // 4986
						.attr('colspan', function(i, val){                                                                               // 4987
							return parseInt(val) + 1;                                                                                       // 4988
						});                                                                                                              // 4989
                                                                                                                       // 4990
		this._allow_update = false;                                                                                          // 4991
                                                                                                                       // 4992
		this.setStartDate(this.o.startDate);                                                                                 // 4993
		this.setEndDate(this.o.endDate);                                                                                     // 4994
		this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled);                                                               // 4995
                                                                                                                       // 4996
		this.fillDow();                                                                                                      // 4997
		this.fillMonths();                                                                                                   // 4998
                                                                                                                       // 4999
		this._allow_update = true;                                                                                           // 5000
                                                                                                                       // 5001
		this.update();                                                                                                       // 5002
		this.showMode();                                                                                                     // 5003
                                                                                                                       // 5004
		if(this.isInline) {                                                                                                  // 5005
			this.show();                                                                                                        // 5006
		}                                                                                                                    // 5007
	};                                                                                                                    // 5008
                                                                                                                       // 5009
	Datepicker.prototype = {                                                                                              // 5010
		constructor: Datepicker,                                                                                             // 5011
                                                                                                                       // 5012
		_process_options: function(opts){                                                                                    // 5013
			// Store raw options for reference                                                                                  // 5014
			this._o = $.extend({}, this._o, opts);                                                                              // 5015
			// Processed options                                                                                                // 5016
			var o = this.o = $.extend({}, this._o);                                                                             // 5017
                                                                                                                       // 5018
			// Check if "de-DE" style date is available, if not language should                                                 // 5019
			// fallback to 2 letter code eg "de"                                                                                // 5020
			var lang = o.language;                                                                                              // 5021
			if (!dates[lang]) {                                                                                                 // 5022
				lang = lang.split('-')[0];                                                                                         // 5023
				if (!dates[lang])                                                                                                  // 5024
					lang = defaults.language;                                                                                         // 5025
			}                                                                                                                   // 5026
			o.language = lang;                                                                                                  // 5027
                                                                                                                       // 5028
			switch(o.startView){                                                                                                // 5029
				case 2:                                                                                                            // 5030
				case 'decade':                                                                                                     // 5031
					o.startView = 2;                                                                                                  // 5032
					break;                                                                                                            // 5033
				case 1:                                                                                                            // 5034
				case 'year':                                                                                                       // 5035
					o.startView = 1;                                                                                                  // 5036
					break;                                                                                                            // 5037
				default:                                                                                                           // 5038
					o.startView = 0;                                                                                                  // 5039
			}                                                                                                                   // 5040
                                                                                                                       // 5041
			switch (o.minViewMode) {                                                                                            // 5042
				case 1:                                                                                                            // 5043
				case 'months':                                                                                                     // 5044
					o.minViewMode = 1;                                                                                                // 5045
					break;                                                                                                            // 5046
				case 2:                                                                                                            // 5047
				case 'years':                                                                                                      // 5048
					o.minViewMode = 2;                                                                                                // 5049
					break;                                                                                                            // 5050
				default:                                                                                                           // 5051
					o.minViewMode = 0;                                                                                                // 5052
			}                                                                                                                   // 5053
                                                                                                                       // 5054
			o.startView = Math.max(o.startView, o.minViewMode);                                                                 // 5055
                                                                                                                       // 5056
			o.weekStart %= 7;                                                                                                   // 5057
			o.weekEnd = ((o.weekStart + 6) % 7);                                                                                // 5058
                                                                                                                       // 5059
			var format = DPGlobal.parseFormat(o.format)                                                                         // 5060
			if (o.startDate !== -Infinity) {                                                                                    // 5061
				o.startDate = DPGlobal.parseDate(o.startDate, format, o.language);                                                 // 5062
			}                                                                                                                   // 5063
			if (o.endDate !== Infinity) {                                                                                       // 5064
				o.endDate = DPGlobal.parseDate(o.endDate, format, o.language);                                                     // 5065
			}                                                                                                                   // 5066
                                                                                                                       // 5067
			o.daysOfWeekDisabled = o.daysOfWeekDisabled||[];                                                                    // 5068
			if (!$.isArray(o.daysOfWeekDisabled))                                                                               // 5069
				o.daysOfWeekDisabled = o.daysOfWeekDisabled.split(/[,\s]*/);                                                       // 5070
			o.daysOfWeekDisabled = $.map(o.daysOfWeekDisabled, function (d) {                                                   // 5071
				return parseInt(d, 10);                                                                                            // 5072
			});                                                                                                                 // 5073
		},                                                                                                                   // 5074
		_events: [],                                                                                                         // 5075
		_secondaryEvents: [],                                                                                                // 5076
		_applyEvents: function(evs){                                                                                         // 5077
			for (var i=0, el, ev; i<evs.length; i++){                                                                           // 5078
				el = evs[i][0];                                                                                                    // 5079
				ev = evs[i][1];                                                                                                    // 5080
				el.on(ev);                                                                                                         // 5081
			}                                                                                                                   // 5082
		},                                                                                                                   // 5083
		_unapplyEvents: function(evs){                                                                                       // 5084
			for (var i=0, el, ev; i<evs.length; i++){                                                                           // 5085
				el = evs[i][0];                                                                                                    // 5086
				ev = evs[i][1];                                                                                                    // 5087
				el.off(ev);                                                                                                        // 5088
			}                                                                                                                   // 5089
		},                                                                                                                   // 5090
		_buildEvents: function(){                                                                                            // 5091
			if (this.isInput) { // single input                                                                                 // 5092
				this._events = [                                                                                                   // 5093
					[this.element, {                                                                                                  // 5094
						focus: $.proxy(this.show, this),                                                                                 // 5095
						keyup: $.proxy(this.update, this),                                                                               // 5096
						keydown: $.proxy(this.keydown, this)                                                                             // 5097
					}]                                                                                                                // 5098
				];                                                                                                                 // 5099
			}                                                                                                                   // 5100
			else if (this.component && this.hasInput){ // component: input + button                                             // 5101
				this._events = [                                                                                                   // 5102
					// For components that are not readonly, allow keyboard nav                                                       // 5103
					[this.element.find('input'), {                                                                                    // 5104
						focus: $.proxy(this.show, this),                                                                                 // 5105
						keyup: $.proxy(this.update, this),                                                                               // 5106
						keydown: $.proxy(this.keydown, this)                                                                             // 5107
					}],                                                                                                               // 5108
					[this.component, {                                                                                                // 5109
						click: $.proxy(this.show, this)                                                                                  // 5110
					}]                                                                                                                // 5111
				];                                                                                                                 // 5112
			}                                                                                                                   // 5113
			else if (this.element.is('div')) {  // inline datepicker                                                            // 5114
				this.isInline = true;                                                                                              // 5115
			}                                                                                                                   // 5116
			else {                                                                                                              // 5117
				this._events = [                                                                                                   // 5118
					[this.element, {                                                                                                  // 5119
						click: $.proxy(this.show, this)                                                                                  // 5120
					}]                                                                                                                // 5121
				];                                                                                                                 // 5122
			}                                                                                                                   // 5123
                                                                                                                       // 5124
			this._secondaryEvents = [                                                                                           // 5125
				[this.picker, {                                                                                                    // 5126
					click: $.proxy(this.click, this)                                                                                  // 5127
				}],                                                                                                                // 5128
				[$(window), {                                                                                                      // 5129
					resize: $.proxy(this.place, this)                                                                                 // 5130
				}],                                                                                                                // 5131
				[$(document), {                                                                                                    // 5132
					mousedown: $.proxy(function (e) {                                                                                 // 5133
						// Clicked outside the datepicker, hide it                                                                       // 5134
						if (!(                                                                                                           // 5135
							this.element.is(e.target) ||                                                                                    // 5136
							this.element.find(e.target).size() ||                                                                           // 5137
							this.picker.is(e.target) ||                                                                                     // 5138
							this.picker.find(e.target).size()                                                                               // 5139
						)) {                                                                                                             // 5140
							this.hide();                                                                                                    // 5141
						}                                                                                                                // 5142
					}, this)                                                                                                          // 5143
				}]                                                                                                                 // 5144
			];                                                                                                                  // 5145
		},                                                                                                                   // 5146
		_attachEvents: function(){                                                                                           // 5147
			this._detachEvents();                                                                                               // 5148
			this._applyEvents(this._events);                                                                                    // 5149
		},                                                                                                                   // 5150
		_detachEvents: function(){                                                                                           // 5151
			this._unapplyEvents(this._events);                                                                                  // 5152
		},                                                                                                                   // 5153
		_attachSecondaryEvents: function(){                                                                                  // 5154
			this._detachSecondaryEvents();                                                                                      // 5155
			this._applyEvents(this._secondaryEvents);                                                                           // 5156
		},                                                                                                                   // 5157
		_detachSecondaryEvents: function(){                                                                                  // 5158
			this._unapplyEvents(this._secondaryEvents);                                                                         // 5159
		},                                                                                                                   // 5160
		_trigger: function(event, altdate){                                                                                  // 5161
			var date = altdate || this.date,                                                                                    // 5162
				local_date = new Date(date.getTime() + (date.getTimezoneOffset()*60000));                                          // 5163
                                                                                                                       // 5164
			this.element.trigger({                                                                                              // 5165
				type: event,                                                                                                       // 5166
				date: local_date,                                                                                                  // 5167
				format: $.proxy(function(altformat){                                                                               // 5168
					var format = altformat || this.o.format;                                                                          // 5169
					return DPGlobal.formatDate(date, format, this.o.language);                                                        // 5170
				}, this)                                                                                                           // 5171
			});                                                                                                                 // 5172
		},                                                                                                                   // 5173
                                                                                                                       // 5174
		show: function(e) {                                                                                                  // 5175
			if (!this.isInline)                                                                                                 // 5176
				this.picker.appendTo('body');                                                                                      // 5177
			this.picker.show();                                                                                                 // 5178
			this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();                           // 5179
			this.place();                                                                                                       // 5180
			this._attachSecondaryEvents();                                                                                      // 5181
			if (e) {                                                                                                            // 5182
				e.preventDefault();                                                                                                // 5183
			}                                                                                                                   // 5184
			this._trigger('show');                                                                                              // 5185
		},                                                                                                                   // 5186
                                                                                                                       // 5187
		hide: function(e){                                                                                                   // 5188
			if(this.isInline) return;                                                                                           // 5189
			if (!this.picker.is(':visible')) return;                                                                            // 5190
			this.picker.hide().detach();                                                                                        // 5191
			this._detachSecondaryEvents();                                                                                      // 5192
			this.viewMode = this.o.startView;                                                                                   // 5193
			this.showMode();                                                                                                    // 5194
                                                                                                                       // 5195
			if (                                                                                                                // 5196
				this.o.forceParse &&                                                                                               // 5197
				(                                                                                                                  // 5198
					this.isInput && this.element.val() ||                                                                             // 5199
					this.hasInput && this.element.find('input').val()                                                                 // 5200
				)                                                                                                                  // 5201
			)                                                                                                                   // 5202
				this.setValue();                                                                                                   // 5203
			this._trigger('hide');                                                                                              // 5204
		},                                                                                                                   // 5205
                                                                                                                       // 5206
		remove: function() {                                                                                                 // 5207
			this.hide();                                                                                                        // 5208
			this._detachEvents();                                                                                               // 5209
			this._detachSecondaryEvents();                                                                                      // 5210
			this.picker.remove();                                                                                               // 5211
			delete this.element.data().datepicker;                                                                              // 5212
			if (!this.isInput) {                                                                                                // 5213
				delete this.element.data().date;                                                                                   // 5214
			}                                                                                                                   // 5215
		},                                                                                                                   // 5216
                                                                                                                       // 5217
		getDate: function() {                                                                                                // 5218
			var d = this.getUTCDate();                                                                                          // 5219
			return new Date(d.getTime() + (d.getTimezoneOffset()*60000));                                                       // 5220
		},                                                                                                                   // 5221
                                                                                                                       // 5222
		getUTCDate: function() {                                                                                             // 5223
			return this.date;                                                                                                   // 5224
		},                                                                                                                   // 5225
                                                                                                                       // 5226
		setDate: function(d) {                                                                                               // 5227
			this.setUTCDate(new Date(d.getTime() - (d.getTimezoneOffset()*60000)));                                             // 5228
		},                                                                                                                   // 5229
                                                                                                                       // 5230
		setUTCDate: function(d) {                                                                                            // 5231
			this.date = d;                                                                                                      // 5232
			this.setValue();                                                                                                    // 5233
		},                                                                                                                   // 5234
                                                                                                                       // 5235
		setValue: function() {                                                                                               // 5236
			var formatted = this.getFormattedDate();                                                                            // 5237
			if (!this.isInput) {                                                                                                // 5238
				if (this.component){                                                                                               // 5239
					this.element.find('input').val(formatted);                                                                        // 5240
				}                                                                                                                  // 5241
			} else {                                                                                                            // 5242
				this.element.val(formatted);                                                                                       // 5243
			}                                                                                                                   // 5244
		},                                                                                                                   // 5245
                                                                                                                       // 5246
		getFormattedDate: function(format) {                                                                                 // 5247
			if (format === undefined)                                                                                           // 5248
				format = this.o.format;                                                                                            // 5249
			return DPGlobal.formatDate(this.date, format, this.o.language);                                                     // 5250
		},                                                                                                                   // 5251
                                                                                                                       // 5252
		setStartDate: function(startDate){                                                                                   // 5253
			this._process_options({startDate: startDate});                                                                      // 5254
			this.update();                                                                                                      // 5255
			this.updateNavArrows();                                                                                             // 5256
		},                                                                                                                   // 5257
                                                                                                                       // 5258
		setEndDate: function(endDate){                                                                                       // 5259
			this._process_options({endDate: endDate});                                                                          // 5260
			this.update();                                                                                                      // 5261
			this.updateNavArrows();                                                                                             // 5262
		},                                                                                                                   // 5263
                                                                                                                       // 5264
		setDaysOfWeekDisabled: function(daysOfWeekDisabled){                                                                 // 5265
			this._process_options({daysOfWeekDisabled: daysOfWeekDisabled});                                                    // 5266
			this.update();                                                                                                      // 5267
			this.updateNavArrows();                                                                                             // 5268
		},                                                                                                                   // 5269
                                                                                                                       // 5270
		place: function(){                                                                                                   // 5271
						if(this.isInline) return;                                                                                        // 5272
			var zIndex = parseInt(this.element.parents().filter(function() {                                                    // 5273
							return $(this).css('z-index') != 'auto';                                                                        // 5274
						}).first().css('z-index'))+10;                                                                                   // 5275
			var offset = this.component ? this.component.parent().offset() : this.element.offset();                             // 5276
			var height = this.component ? this.component.outerHeight(true) : this.element.outerHeight(true);                    // 5277
			this.picker.css({                                                                                                   // 5278
				top: offset.top + height,                                                                                          // 5279
				left: offset.left,                                                                                                 // 5280
				zIndex: zIndex                                                                                                     // 5281
			});                                                                                                                 // 5282
		},                                                                                                                   // 5283
                                                                                                                       // 5284
		_allow_update: true,                                                                                                 // 5285
		update: function(){                                                                                                  // 5286
			if (!this._allow_update) return;                                                                                    // 5287
                                                                                                                       // 5288
			var date, fromArgs = false;                                                                                         // 5289
			if(arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {           // 5290
				date = arguments[0];                                                                                               // 5291
				fromArgs = true;                                                                                                   // 5292
			} else {                                                                                                            // 5293
				date = this.isInput ? this.element.val() : this.element.data('date') || this.element.find('input').val();          // 5294
				delete this.element.data().date;                                                                                   // 5295
			}                                                                                                                   // 5296
                                                                                                                       // 5297
			this.date = DPGlobal.parseDate(date, this.o.format, this.o.language);                                               // 5298
                                                                                                                       // 5299
			if(fromArgs) this.setValue();                                                                                       // 5300
                                                                                                                       // 5301
			if (this.date < this.o.startDate) {                                                                                 // 5302
				this.viewDate = new Date(this.o.startDate);                                                                        // 5303
			} else if (this.date > this.o.endDate) {                                                                            // 5304
				this.viewDate = new Date(this.o.endDate);                                                                          // 5305
			} else {                                                                                                            // 5306
				this.viewDate = new Date(this.date);                                                                               // 5307
			}                                                                                                                   // 5308
			this.fill();                                                                                                        // 5309
		},                                                                                                                   // 5310
                                                                                                                       // 5311
		fillDow: function(){                                                                                                 // 5312
			var dowCnt = this.o.weekStart,                                                                                      // 5313
			html = '<tr>';                                                                                                      // 5314
			if(this.o.calendarWeeks){                                                                                           // 5315
				var cell = '<th class="cw">&nbsp;</th>';                                                                           // 5316
				html += cell;                                                                                                      // 5317
				this.picker.find('.datepicker-days thead tr:first-child').prepend(cell);                                           // 5318
			}                                                                                                                   // 5319
			while (dowCnt < this.o.weekStart + 7) {                                                                             // 5320
				html += '<th class="dow">'+dates[this.o.language].daysMin[(dowCnt++)%7]+'</th>';                                   // 5321
			}                                                                                                                   // 5322
			html += '</tr>';                                                                                                    // 5323
			this.picker.find('.datepicker-days thead').append(html);                                                            // 5324
		},                                                                                                                   // 5325
                                                                                                                       // 5326
		fillMonths: function(){                                                                                              // 5327
			var html = '',                                                                                                      // 5328
			i = 0;                                                                                                              // 5329
			while (i < 12) {                                                                                                    // 5330
				html += '<span class="month">'+dates[this.o.language].monthsShort[i++]+'</span>';                                  // 5331
			}                                                                                                                   // 5332
			this.picker.find('.datepicker-months td').html(html);                                                               // 5333
		},                                                                                                                   // 5334
                                                                                                                       // 5335
		setRange: function(range){                                                                                           // 5336
			if (!range || !range.length)                                                                                        // 5337
				delete this.range;                                                                                                 // 5338
			else                                                                                                                // 5339
				this.range = $.map(range, function(d){ return d.valueOf(); });                                                     // 5340
			this.fill();                                                                                                        // 5341
		},                                                                                                                   // 5342
                                                                                                                       // 5343
		getClassNames: function(date){                                                                                       // 5344
			var cls = [],                                                                                                       // 5345
				year = this.viewDate.getUTCFullYear(),                                                                             // 5346
				month = this.viewDate.getUTCMonth(),                                                                               // 5347
				currentDate = this.date.valueOf(),                                                                                 // 5348
				today = new Date();                                                                                                // 5349
			if (date.getUTCFullYear() < year || (date.getUTCFullYear() == year && date.getUTCMonth() < month)) {                // 5350
				cls.push('old');                                                                                                   // 5351
			} else if (date.getUTCFullYear() > year || (date.getUTCFullYear() == year && date.getUTCMonth() > month)) {         // 5352
				cls.push('new');                                                                                                   // 5353
			}                                                                                                                   // 5354
			// Compare internal UTC date with local today, not UTC today                                                        // 5355
			if (this.o.todayHighlight &&                                                                                        // 5356
				date.getUTCFullYear() == today.getFullYear() &&                                                                    // 5357
				date.getUTCMonth() == today.getMonth() &&                                                                          // 5358
				date.getUTCDate() == today.getDate()) {                                                                            // 5359
				cls.push('today');                                                                                                 // 5360
			}                                                                                                                   // 5361
			if (currentDate && date.valueOf() == currentDate) {                                                                 // 5362
				cls.push('active');                                                                                                // 5363
			}                                                                                                                   // 5364
			if (date.valueOf() < this.o.startDate || date.valueOf() > this.o.endDate ||                                         // 5365
				$.inArray(date.getUTCDay(), this.o.daysOfWeekDisabled) !== -1) {                                                   // 5366
				cls.push('disabled');                                                                                              // 5367
			}                                                                                                                   // 5368
			if (this.range){                                                                                                    // 5369
				if (date > this.range[0] && date < this.range[this.range.length-1]){                                               // 5370
					cls.push('range');                                                                                                // 5371
				}                                                                                                                  // 5372
				if ($.inArray(date.valueOf(), this.range) != -1){                                                                  // 5373
					cls.push('selected');                                                                                             // 5374
				}                                                                                                                  // 5375
			}                                                                                                                   // 5376
			return cls;                                                                                                         // 5377
		},                                                                                                                   // 5378
                                                                                                                       // 5379
		fill: function() {                                                                                                   // 5380
			var d = new Date(this.viewDate),                                                                                    // 5381
				year = d.getUTCFullYear(),                                                                                         // 5382
				month = d.getUTCMonth(),                                                                                           // 5383
				startYear = this.o.startDate !== -Infinity ? this.o.startDate.getUTCFullYear() : -Infinity,                        // 5384
				startMonth = this.o.startDate !== -Infinity ? this.o.startDate.getUTCMonth() : -Infinity,                          // 5385
				endYear = this.o.endDate !== Infinity ? this.o.endDate.getUTCFullYear() : Infinity,                                // 5386
				endMonth = this.o.endDate !== Infinity ? this.o.endDate.getUTCMonth() : Infinity,                                  // 5387
				currentDate = this.date && this.date.valueOf(),                                                                    // 5388
				tooltip;                                                                                                           // 5389
			this.picker.find('.datepicker-days thead th.datepicker-switch')                                                     // 5390
						.text(dates[this.o.language].months[month]+' '+year);                                                            // 5391
			this.picker.find('tfoot th.today')                                                                                  // 5392
						.text(dates[this.o.language].today)                                                                              // 5393
						.toggle(this.o.todayBtn !== false);                                                                              // 5394
			this.picker.find('tfoot th.clear')                                                                                  // 5395
						.text(dates[this.o.language].clear)                                                                              // 5396
						.toggle(this.o.clearBtn !== false);                                                                              // 5397
			this.updateNavArrows();                                                                                             // 5398
			this.fillMonths();                                                                                                  // 5399
			var prevMonth = UTCDate(year, month-1, 28,0,0,0,0),                                                                 // 5400
				day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());                                // 5401
			prevMonth.setUTCDate(day);                                                                                          // 5402
			prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.o.weekStart + 7)%7);                                       // 5403
			var nextMonth = new Date(prevMonth);                                                                                // 5404
			nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);                                                                  // 5405
			nextMonth = nextMonth.valueOf();                                                                                    // 5406
			var html = [];                                                                                                      // 5407
			var clsName;                                                                                                        // 5408
			while(prevMonth.valueOf() < nextMonth) {                                                                            // 5409
				if (prevMonth.getUTCDay() == this.o.weekStart) {                                                                   // 5410
					html.push('<tr>');                                                                                                // 5411
					if(this.o.calendarWeeks){                                                                                         // 5412
						// ISO 8601: First week contains first thursday.                                                                 // 5413
						// ISO also states week starts on Monday, but we can be more abstract here.                                      // 5414
						var                                                                                                              // 5415
							// Start of current week: based on weekstart/current date                                                       // 5416
							ws = new Date(+prevMonth + (this.o.weekStart - prevMonth.getUTCDay() - 7) % 7 * 864e5),                         // 5417
							// Thursday of this week                                                                                        // 5418
							th = new Date(+ws + (7 + 4 - ws.getUTCDay()) % 7 * 864e5),                                                      // 5419
							// First Thursday of year, year from thursday                                                                   // 5420
							yth = new Date(+(yth = UTCDate(th.getUTCFullYear(), 0, 1)) + (7 + 4 - yth.getUTCDay())%7*864e5),                // 5421
							// Calendar week: ms between thursdays, div ms per day, div 7 days                                              // 5422
							calWeek =  (th - yth) / 864e5 / 7 + 1;                                                                          // 5423
						html.push('<td class="cw">'+ calWeek +'</td>');                                                                  // 5424
                                                                                                                       // 5425
					}                                                                                                                 // 5426
				}                                                                                                                  // 5427
				clsName = this.getClassNames(prevMonth);                                                                           // 5428
				clsName.push('day');                                                                                               // 5429
                                                                                                                       // 5430
				var before = this.o.beforeShowDay(prevMonth);                                                                      // 5431
				if (before === undefined)                                                                                          // 5432
					before = {};                                                                                                      // 5433
				else if (typeof(before) === 'boolean')                                                                             // 5434
					before = {enabled: before};                                                                                       // 5435
				else if (typeof(before) === 'string')                                                                              // 5436
					before = {classes: before};                                                                                       // 5437
				if (before.enabled === false)                                                                                      // 5438
					clsName.push('disabled');                                                                                         // 5439
				if (before.classes)                                                                                                // 5440
					clsName = clsName.concat(before.classes.split(/\s+/));                                                            // 5441
				if (before.tooltip)                                                                                                // 5442
					tooltip = before.tooltip;                                                                                         // 5443
                                                                                                                       // 5444
				clsName = $.unique(clsName);                                                                                       // 5445
				html.push('<td class="'+clsName.join(' ')+'"' + (tooltip ? ' title="'+tooltip+'"' : '') + '>'+prevMonth.getUTCDate() + '</td>');
				if (prevMonth.getUTCDay() == this.o.weekEnd) {                                                                     // 5447
					html.push('</tr>');                                                                                               // 5448
				}                                                                                                                  // 5449
				prevMonth.setUTCDate(prevMonth.getUTCDate()+1);                                                                    // 5450
			}                                                                                                                   // 5451
			this.picker.find('.datepicker-days tbody').empty().append(html.join(''));                                           // 5452
			var currentYear = this.date && this.date.getUTCFullYear();                                                          // 5453
                                                                                                                       // 5454
			var months = this.picker.find('.datepicker-months')                                                                 // 5455
						.find('th:eq(1)')                                                                                                // 5456
							.text(year)                                                                                                     // 5457
							.end()                                                                                                          // 5458
						.find('span').removeClass('active');                                                                             // 5459
			if (currentYear && currentYear == year) {                                                                           // 5460
				months.eq(this.date.getUTCMonth()).addClass('active');                                                             // 5461
			}                                                                                                                   // 5462
			if (year < startYear || year > endYear) {                                                                           // 5463
				months.addClass('disabled');                                                                                       // 5464
			}                                                                                                                   // 5465
			if (year == startYear) {                                                                                            // 5466
				months.slice(0, startMonth).addClass('disabled');                                                                  // 5467
			}                                                                                                                   // 5468
			if (year == endYear) {                                                                                              // 5469
				months.slice(endMonth+1).addClass('disabled');                                                                     // 5470
			}                                                                                                                   // 5471
                                                                                                                       // 5472
			html = '';                                                                                                          // 5473
			year = parseInt(year/10, 10) * 10;                                                                                  // 5474
			var yearCont = this.picker.find('.datepicker-years')                                                                // 5475
								.find('th:eq(1)')                                                                                              // 5476
									.text(year + '-' + (year + 9))                                                                                // 5477
									.end()                                                                                                        // 5478
								.find('td');                                                                                                   // 5479
			year -= 1;                                                                                                          // 5480
			for (var i = -1; i < 11; i++) {                                                                                     // 5481
				html += '<span class="year'+(i == -1 ? ' old' : i == 10 ? ' new' : '')+(currentYear == year ? ' active' : '')+(year < startYear || year > endYear ? ' disabled' : '')+'">'+year+'</span>';
				year += 1;                                                                                                         // 5483
			}                                                                                                                   // 5484
			yearCont.html(html);                                                                                                // 5485
		},                                                                                                                   // 5486
                                                                                                                       // 5487
		updateNavArrows: function() {                                                                                        // 5488
			if (!this._allow_update) return;                                                                                    // 5489
                                                                                                                       // 5490
			var d = new Date(this.viewDate),                                                                                    // 5491
				year = d.getUTCFullYear(),                                                                                         // 5492
				month = d.getUTCMonth();                                                                                           // 5493
			switch (this.viewMode) {                                                                                            // 5494
				case 0:                                                                                                            // 5495
					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear() && month <= this.o.startDate.getUTCMonth()) {
						this.picker.find('.prev').css({visibility: 'hidden'});                                                           // 5497
					} else {                                                                                                          // 5498
						this.picker.find('.prev').css({visibility: 'visible'});                                                          // 5499
					}                                                                                                                 // 5500
					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear() && month >= this.o.endDate.getUTCMonth()) {
						this.picker.find('.next').css({visibility: 'hidden'});                                                           // 5502
					} else {                                                                                                          // 5503
						this.picker.find('.next').css({visibility: 'visible'});                                                          // 5504
					}                                                                                                                 // 5505
					break;                                                                                                            // 5506
				case 1:                                                                                                            // 5507
				case 2:                                                                                                            // 5508
					if (this.o.startDate !== -Infinity && year <= this.o.startDate.getUTCFullYear()) {                                // 5509
						this.picker.find('.prev').css({visibility: 'hidden'});                                                           // 5510
					} else {                                                                                                          // 5511
						this.picker.find('.prev').css({visibility: 'visible'});                                                          // 5512
					}                                                                                                                 // 5513
					if (this.o.endDate !== Infinity && year >= this.o.endDate.getUTCFullYear()) {                                     // 5514
						this.picker.find('.next').css({visibility: 'hidden'});                                                           // 5515
					} else {                                                                                                          // 5516
						this.picker.find('.next').css({visibility: 'visible'});                                                          // 5517
					}                                                                                                                 // 5518
					break;                                                                                                            // 5519
			}                                                                                                                   // 5520
		},                                                                                                                   // 5521
                                                                                                                       // 5522
		click: function(e) {                                                                                                 // 5523
			e.preventDefault();                                                                                                 // 5524
			var target = $(e.target).closest('span, td, th');                                                                   // 5525
			if (target.length == 1) {                                                                                           // 5526
				switch(target[0].nodeName.toLowerCase()) {                                                                         // 5527
					case 'th':                                                                                                        // 5528
						switch(target[0].className) {                                                                                    // 5529
							case 'datepicker-switch':                                                                                       // 5530
								this.showMode(1);                                                                                              // 5531
								break;                                                                                                         // 5532
							case 'prev':                                                                                                    // 5533
							case 'next':                                                                                                    // 5534
								var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);                    // 5535
								switch(this.viewMode){                                                                                         // 5536
									case 0:                                                                                                       // 5537
										this.viewDate = this.moveMonth(this.viewDate, dir);                                                          // 5538
										break;                                                                                                       // 5539
									case 1:                                                                                                       // 5540
									case 2:                                                                                                       // 5541
										this.viewDate = this.moveYear(this.viewDate, dir);                                                           // 5542
										break;                                                                                                       // 5543
								}                                                                                                              // 5544
								this.fill();                                                                                                   // 5545
								break;                                                                                                         // 5546
							case 'today':                                                                                                   // 5547
								var date = new Date();                                                                                         // 5548
								date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);                                  // 5549
                                                                                                                       // 5550
								this.showMode(-2);                                                                                             // 5551
								var which = this.o.todayBtn == 'linked' ? null : 'view';                                                       // 5552
								this._setDate(date, which);                                                                                    // 5553
								break;                                                                                                         // 5554
							case 'clear':                                                                                                   // 5555
								var element;                                                                                                   // 5556
								if (this.isInput)                                                                                              // 5557
									element = this.element;                                                                                       // 5558
								else if (this.component)                                                                                       // 5559
									element = this.element.find('input');                                                                         // 5560
								if (element)                                                                                                   // 5561
									element.val("").change();                                                                                     // 5562
								this._trigger('changeDate');                                                                                   // 5563
								this.update();                                                                                                 // 5564
								if (this.o.autoclose)                                                                                          // 5565
									this.hide();                                                                                                  // 5566
								break;                                                                                                         // 5567
						}                                                                                                                // 5568
						break;                                                                                                           // 5569
					case 'span':                                                                                                      // 5570
						if (!target.is('.disabled')) {                                                                                   // 5571
							this.viewDate.setUTCDate(1);                                                                                    // 5572
							if (target.is('.month')) {                                                                                      // 5573
								var day = 1;                                                                                                   // 5574
								var month = target.parent().find('span').index(target);                                                        // 5575
								var year = this.viewDate.getUTCFullYear();                                                                     // 5576
								this.viewDate.setUTCMonth(month);                                                                              // 5577
								this._trigger('changeMonth', this.viewDate);                                                                   // 5578
								if (this.o.minViewMode === 1) {                                                                                // 5579
									this._setDate(UTCDate(year, month, day,0,0,0,0));                                                             // 5580
								}                                                                                                              // 5581
							} else {                                                                                                        // 5582
								var year = parseInt(target.text(), 10)||0;                                                                     // 5583
								var day = 1;                                                                                                   // 5584
								var month = 0;                                                                                                 // 5585
								this.viewDate.setUTCFullYear(year);                                                                            // 5586
								this._trigger('changeYear', this.viewDate);                                                                    // 5587
								if (this.o.minViewMode === 2) {                                                                                // 5588
									this._setDate(UTCDate(year, month, day,0,0,0,0));                                                             // 5589
								}                                                                                                              // 5590
							}                                                                                                               // 5591
							this.showMode(-1);                                                                                              // 5592
							this.fill();                                                                                                    // 5593
						}                                                                                                                // 5594
						break;                                                                                                           // 5595
					case 'td':                                                                                                        // 5596
						if (target.is('.day') && !target.is('.disabled')){                                                               // 5597
							var day = parseInt(target.text(), 10)||1;                                                                       // 5598
							var year = this.viewDate.getUTCFullYear(),                                                                      // 5599
								month = this.viewDate.getUTCMonth();                                                                           // 5600
							if (target.is('.old')) {                                                                                        // 5601
								if (month === 0) {                                                                                             // 5602
									month = 11;                                                                                                   // 5603
									year -= 1;                                                                                                    // 5604
								} else {                                                                                                       // 5605
									month -= 1;                                                                                                   // 5606
								}                                                                                                              // 5607
							} else if (target.is('.new')) {                                                                                 // 5608
								if (month == 11) {                                                                                             // 5609
									month = 0;                                                                                                    // 5610
									year += 1;                                                                                                    // 5611
								} else {                                                                                                       // 5612
									month += 1;                                                                                                   // 5613
								}                                                                                                              // 5614
							}                                                                                                               // 5615
							this._setDate(UTCDate(year, month, day,0,0,0,0));                                                               // 5616
						}                                                                                                                // 5617
						break;                                                                                                           // 5618
				}                                                                                                                  // 5619
			}                                                                                                                   // 5620
		},                                                                                                                   // 5621
                                                                                                                       // 5622
		_setDate: function(date, which){                                                                                     // 5623
			if (!which || which == 'date')                                                                                      // 5624
				this.date = new Date(date);                                                                                        // 5625
			if (!which || which  == 'view')                                                                                     // 5626
				this.viewDate = new Date(date);                                                                                    // 5627
			this.fill();                                                                                                        // 5628
			this.setValue();                                                                                                    // 5629
			this._trigger('changeDate');                                                                                        // 5630
			var element;                                                                                                        // 5631
			if (this.isInput) {                                                                                                 // 5632
				element = this.element;                                                                                            // 5633
			} else if (this.component){                                                                                         // 5634
				element = this.element.find('input');                                                                              // 5635
			}                                                                                                                   // 5636
			if (element) {                                                                                                      // 5637
				element.change();                                                                                                  // 5638
				if (this.o.autoclose && (!which || which == 'date')) {                                                             // 5639
					this.hide();                                                                                                      // 5640
				}                                                                                                                  // 5641
			}                                                                                                                   // 5642
		},                                                                                                                   // 5643
                                                                                                                       // 5644
		moveMonth: function(date, dir){                                                                                      // 5645
			if (!dir) return date;                                                                                              // 5646
			var new_date = new Date(date.valueOf()),                                                                            // 5647
				day = new_date.getUTCDate(),                                                                                       // 5648
				month = new_date.getUTCMonth(),                                                                                    // 5649
				mag = Math.abs(dir),                                                                                               // 5650
				new_month, test;                                                                                                   // 5651
			dir = dir > 0 ? 1 : -1;                                                                                             // 5652
			if (mag == 1){                                                                                                      // 5653
				test = dir == -1                                                                                                   // 5654
					// If going back one month, make sure month is not current month                                                  // 5655
					// (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)                                                                   // 5656
					? function(){ return new_date.getUTCMonth() == month; }                                                           // 5657
					// If going forward one month, make sure month is as expected                                                     // 5658
					// (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)                                                                   // 5659
					: function(){ return new_date.getUTCMonth() != new_month; };                                                      // 5660
				new_month = month + dir;                                                                                           // 5661
				new_date.setUTCMonth(new_month);                                                                                   // 5662
				// Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11                                               // 5663
				if (new_month < 0 || new_month > 11)                                                                               // 5664
					new_month = (new_month + 12) % 12;                                                                                // 5665
			} else {                                                                                                            // 5666
				// For magnitudes >1, move one month at a time...                                                                  // 5667
				for (var i=0; i<mag; i++)                                                                                          // 5668
					// ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...                                                 // 5669
					new_date = this.moveMonth(new_date, dir);                                                                         // 5670
				// ...then reset the day, keeping it in the new month                                                              // 5671
				new_month = new_date.getUTCMonth();                                                                                // 5672
				new_date.setUTCDate(day);                                                                                          // 5673
				test = function(){ return new_month != new_date.getUTCMonth(); };                                                  // 5674
			}                                                                                                                   // 5675
			// Common date-resetting loop -- if date is beyond end of month, make it                                            // 5676
			// end of month                                                                                                     // 5677
			while (test()){                                                                                                     // 5678
				new_date.setUTCDate(--day);                                                                                        // 5679
				new_date.setUTCMonth(new_month);                                                                                   // 5680
			}                                                                                                                   // 5681
			return new_date;                                                                                                    // 5682
		},                                                                                                                   // 5683
                                                                                                                       // 5684
		moveYear: function(date, dir){                                                                                       // 5685
			return this.moveMonth(date, dir*12);                                                                                // 5686
		},                                                                                                                   // 5687
                                                                                                                       // 5688
		dateWithinRange: function(date){                                                                                     // 5689
			return date >= this.o.startDate && date <= this.o.endDate;                                                          // 5690
		},                                                                                                                   // 5691
                                                                                                                       // 5692
		keydown: function(e){                                                                                                // 5693
			if (this.picker.is(':not(:visible)')){                                                                              // 5694
				if (e.keyCode == 27) // allow escape to hide and re-show picker                                                    // 5695
					this.show();                                                                                                      // 5696
				return;                                                                                                            // 5697
			}                                                                                                                   // 5698
			var dateChanged = false,                                                                                            // 5699
				dir, day, month,                                                                                                   // 5700
				newDate, newViewDate;                                                                                              // 5701
			switch(e.keyCode){                                                                                                  // 5702
				case 27: // escape                                                                                                 // 5703
					this.hide();                                                                                                      // 5704
					e.preventDefault();                                                                                               // 5705
					break;                                                                                                            // 5706
				case 37: // left                                                                                                   // 5707
				case 39: // right                                                                                                  // 5708
					if (!this.o.keyboardNavigation) break;                                                                            // 5709
					dir = e.keyCode == 37 ? -1 : 1;                                                                                   // 5710
					if (e.ctrlKey){                                                                                                   // 5711
						newDate = this.moveYear(this.date, dir);                                                                         // 5712
						newViewDate = this.moveYear(this.viewDate, dir);                                                                 // 5713
					} else if (e.shiftKey){                                                                                           // 5714
						newDate = this.moveMonth(this.date, dir);                                                                        // 5715
						newViewDate = this.moveMonth(this.viewDate, dir);                                                                // 5716
					} else {                                                                                                          // 5717
						newDate = new Date(this.date);                                                                                   // 5718
						newDate.setUTCDate(this.date.getUTCDate() + dir);                                                                // 5719
						newViewDate = new Date(this.viewDate);                                                                           // 5720
						newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir);                                                        // 5721
					}                                                                                                                 // 5722
					if (this.dateWithinRange(newDate)){                                                                               // 5723
						this.date = newDate;                                                                                             // 5724
						this.viewDate = newViewDate;                                                                                     // 5725
						this.setValue();                                                                                                 // 5726
						this.update();                                                                                                   // 5727
						e.preventDefault();                                                                                              // 5728
						dateChanged = true;                                                                                              // 5729
					}                                                                                                                 // 5730
					break;                                                                                                            // 5731
				case 38: // up                                                                                                     // 5732
				case 40: // down                                                                                                   // 5733
					if (!this.o.keyboardNavigation) break;                                                                            // 5734
					dir = e.keyCode == 38 ? -1 : 1;                                                                                   // 5735
					if (e.ctrlKey){                                                                                                   // 5736
						newDate = this.moveYear(this.date, dir);                                                                         // 5737
						newViewDate = this.moveYear(this.viewDate, dir);                                                                 // 5738
					} else if (e.shiftKey){                                                                                           // 5739
						newDate = this.moveMonth(this.date, dir);                                                                        // 5740
						newViewDate = this.moveMonth(this.viewDate, dir);                                                                // 5741
					} else {                                                                                                          // 5742
						newDate = new Date(this.date);                                                                                   // 5743
						newDate.setUTCDate(this.date.getUTCDate() + dir * 7);                                                            // 5744
						newViewDate = new Date(this.viewDate);                                                                           // 5745
						newViewDate.setUTCDate(this.viewDate.getUTCDate() + dir * 7);                                                    // 5746
					}                                                                                                                 // 5747
					if (this.dateWithinRange(newDate)){                                                                               // 5748
						this.date = newDate;                                                                                             // 5749
						this.viewDate = newViewDate;                                                                                     // 5750
						this.setValue();                                                                                                 // 5751
						this.update();                                                                                                   // 5752
						e.preventDefault();                                                                                              // 5753
						dateChanged = true;                                                                                              // 5754
					}                                                                                                                 // 5755
					break;                                                                                                            // 5756
				case 13: // enter                                                                                                  // 5757
					this.hide();                                                                                                      // 5758
					e.preventDefault();                                                                                               // 5759
					break;                                                                                                            // 5760
				case 9: // tab                                                                                                     // 5761
					this.hide();                                                                                                      // 5762
					break;                                                                                                            // 5763
			}                                                                                                                   // 5764
			if (dateChanged){                                                                                                   // 5765
				this._trigger('changeDate');                                                                                       // 5766
				var element;                                                                                                       // 5767
				if (this.isInput) {                                                                                                // 5768
					element = this.element;                                                                                           // 5769
				} else if (this.component){                                                                                        // 5770
					element = this.element.find('input');                                                                             // 5771
				}                                                                                                                  // 5772
				if (element) {                                                                                                     // 5773
					element.change();                                                                                                 // 5774
				}                                                                                                                  // 5775
			}                                                                                                                   // 5776
		},                                                                                                                   // 5777
                                                                                                                       // 5778
		showMode: function(dir) {                                                                                            // 5779
			if (dir) {                                                                                                          // 5780
				this.viewMode = Math.max(this.o.minViewMode, Math.min(2, this.viewMode + dir));                                    // 5781
			}                                                                                                                   // 5782
			/*                                                                                                                  // 5783
				vitalets: fixing bug of very special conditions:                                                                   // 5784
				jquery 1.7.1 + webkit + show inline datepicker in bootstrap popover.                                               // 5785
				Method show() does not set display css correctly and datepicker is not shown.                                      // 5786
				Changed to .css('display', 'block') solve the problem.                                                             // 5787
				See https://github.com/vitalets/x-editable/issues/37                                                               // 5788
                                                                                                                       // 5789
				In jquery 1.7.2+ everything works fine.                                                                            // 5790
			*/                                                                                                                  // 5791
			//this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();              // 5792
			this.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).css('display', 'block');
			this.updateNavArrows();                                                                                             // 5794
		}                                                                                                                    // 5795
	};                                                                                                                    // 5796
                                                                                                                       // 5797
	var DateRangePicker = function(element, options){                                                                     // 5798
		this.element = $(element);                                                                                           // 5799
		this.inputs = $.map(options.inputs, function(i){ return i.jquery ? i[0] : i; });                                     // 5800
		delete options.inputs;                                                                                               // 5801
                                                                                                                       // 5802
		$(this.inputs)                                                                                                       // 5803
			.datepicker(options)                                                                                                // 5804
			.bind('changeDate', $.proxy(this.dateUpdated, this));                                                               // 5805
                                                                                                                       // 5806
		this.pickers = $.map(this.inputs, function(i){ return $(i).data('datepicker'); });                                   // 5807
		this.updateDates();                                                                                                  // 5808
	};                                                                                                                    // 5809
	DateRangePicker.prototype = {                                                                                         // 5810
		updateDates: function(){                                                                                             // 5811
			this.dates = $.map(this.pickers, function(i){ return i.date; });                                                    // 5812
			this.updateRanges();                                                                                                // 5813
		},                                                                                                                   // 5814
		updateRanges: function(){                                                                                            // 5815
			var range = $.map(this.dates, function(d){ return d.valueOf(); });                                                  // 5816
			$.each(this.pickers, function(i, p){                                                                                // 5817
				p.setRange(range);                                                                                                 // 5818
			});                                                                                                                 // 5819
		},                                                                                                                   // 5820
		dateUpdated: function(e){                                                                                            // 5821
			var dp = $(e.target).data('datepicker'),                                                                            // 5822
				new_date = dp.getUTCDate(),                                                                                        // 5823
				i = $.inArray(e.target, this.inputs),                                                                              // 5824
				l = this.inputs.length;                                                                                            // 5825
			if (i == -1) return;                                                                                                // 5826
                                                                                                                       // 5827
			if (new_date < this.dates[i]){                                                                                      // 5828
				// Date being moved earlier/left                                                                                   // 5829
				while (i>=0 && new_date < this.dates[i]){                                                                          // 5830
					this.pickers[i--].setUTCDate(new_date);                                                                           // 5831
				}                                                                                                                  // 5832
			}                                                                                                                   // 5833
			else if (new_date > this.dates[i]){                                                                                 // 5834
				// Date being moved later/right                                                                                    // 5835
				while (i<l && new_date > this.dates[i]){                                                                           // 5836
					this.pickers[i++].setUTCDate(new_date);                                                                           // 5837
				}                                                                                                                  // 5838
			}                                                                                                                   // 5839
			this.updateDates();                                                                                                 // 5840
		},                                                                                                                   // 5841
		remove: function(){                                                                                                  // 5842
			$.map(this.pickers, function(p){ p.remove(); });                                                                    // 5843
			delete this.element.data().datepicker;                                                                              // 5844
		}                                                                                                                    // 5845
	};                                                                                                                    // 5846
                                                                                                                       // 5847
	function opts_from_el(el, prefix){                                                                                    // 5848
		// Derive options from element data-attrs                                                                            // 5849
		var data = $(el).data(),                                                                                             // 5850
			out = {}, inkey,                                                                                                    // 5851
			replace = new RegExp('^' + prefix.toLowerCase() + '([A-Z])'),                                                       // 5852
			prefix = new RegExp('^' + prefix.toLowerCase());                                                                    // 5853
		for (var key in data)                                                                                                // 5854
			if (prefix.test(key)){                                                                                              // 5855
				inkey = key.replace(replace, function(_,a){ return a.toLowerCase(); });                                            // 5856
				out[inkey] = data[key];                                                                                            // 5857
			}                                                                                                                   // 5858
		return out;                                                                                                          // 5859
	}                                                                                                                     // 5860
                                                                                                                       // 5861
	function opts_from_locale(lang){                                                                                      // 5862
		// Derive options from locale plugins                                                                                // 5863
		var out = {};                                                                                                        // 5864
		// Check if "de-DE" style date is available, if not language should                                                  // 5865
		// fallback to 2 letter code eg "de"                                                                                 // 5866
		if (!dates[lang]) {                                                                                                  // 5867
			lang = lang.split('-')[0]                                                                                           // 5868
			if (!dates[lang])                                                                                                   // 5869
				return;                                                                                                            // 5870
		}                                                                                                                    // 5871
		var d = dates[lang];                                                                                                 // 5872
		$.each(locale_opts, function(i,k){                                                                                   // 5873
			if (k in d)                                                                                                         // 5874
				out[k] = d[k];                                                                                                     // 5875
		});                                                                                                                  // 5876
		return out;                                                                                                          // 5877
	}                                                                                                                     // 5878
                                                                                                                       // 5879
	var old = $.fn.datepicker;                                                                                            // 5880
	var datepicker = $.fn.datepicker = function ( option ) {                                                              // 5881
		var args = Array.apply(null, arguments);                                                                             // 5882
		args.shift();                                                                                                        // 5883
		var internal_return,                                                                                                 // 5884
			this_return;                                                                                                        // 5885
		this.each(function () {                                                                                              // 5886
			var $this = $(this),                                                                                                // 5887
				data = $this.data('datepicker'),                                                                                   // 5888
				options = typeof option == 'object' && option;                                                                     // 5889
			if (!data) {                                                                                                        // 5890
				var elopts = opts_from_el(this, 'date'),                                                                           // 5891
					// Preliminary otions                                                                                             // 5892
					xopts = $.extend({}, defaults, elopts, options),                                                                  // 5893
					locopts = opts_from_locale(xopts.language),                                                                       // 5894
					// Options priority: js args, data-attrs, locales, defaults                                                       // 5895
					opts = $.extend({}, defaults, locopts, elopts, options);                                                          // 5896
				if ($this.is('.input-daterange') || opts.inputs){                                                                  // 5897
					var ropts = {                                                                                                     // 5898
						inputs: opts.inputs || $this.find('input').toArray()                                                             // 5899
					};                                                                                                                // 5900
					$this.data('datepicker', (data = new DateRangePicker(this, $.extend(opts, ropts))));                              // 5901
				}                                                                                                                  // 5902
				else{                                                                                                              // 5903
					$this.data('datepicker', (data = new Datepicker(this, opts)));                                                    // 5904
				}                                                                                                                  // 5905
			}                                                                                                                   // 5906
			if (typeof option == 'string' && typeof data[option] == 'function') {                                               // 5907
				internal_return = data[option].apply(data, args);                                                                  // 5908
				if (internal_return !== undefined)                                                                                 // 5909
					return false;                                                                                                     // 5910
			}                                                                                                                   // 5911
		});                                                                                                                  // 5912
		if (internal_return !== undefined)                                                                                   // 5913
			return internal_return;                                                                                             // 5914
		else                                                                                                                 // 5915
			return this;                                                                                                        // 5916
	};                                                                                                                    // 5917
                                                                                                                       // 5918
	var defaults = $.fn.datepicker.defaults = {                                                                           // 5919
		autoclose: false,                                                                                                    // 5920
		beforeShowDay: $.noop,                                                                                               // 5921
		calendarWeeks: false,                                                                                                // 5922
		clearBtn: false,                                                                                                     // 5923
		daysOfWeekDisabled: [],                                                                                              // 5924
		endDate: Infinity,                                                                                                   // 5925
		forceParse: true,                                                                                                    // 5926
		format: 'mm/dd/yyyy',                                                                                                // 5927
		keyboardNavigation: true,                                                                                            // 5928
		language: 'en',                                                                                                      // 5929
		minViewMode: 0,                                                                                                      // 5930
		rtl: false,                                                                                                          // 5931
		startDate: -Infinity,                                                                                                // 5932
		startView: 0,                                                                                                        // 5933
		todayBtn: false,                                                                                                     // 5934
		todayHighlight: false,                                                                                               // 5935
		weekStart: 0                                                                                                         // 5936
	};                                                                                                                    // 5937
	var locale_opts = $.fn.datepicker.locale_opts = [                                                                     // 5938
		'format',                                                                                                            // 5939
		'rtl',                                                                                                               // 5940
		'weekStart'                                                                                                          // 5941
	];                                                                                                                    // 5942
	$.fn.datepicker.Constructor = Datepicker;                                                                             // 5943
	var dates = $.fn.datepicker.dates = {                                                                                 // 5944
		en: {                                                                                                                // 5945
			days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],                     // 5946
			daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],                                                // 5947
			daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"],                                                          // 5948
			months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
			monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],                  // 5950
			today: "Today",                                                                                                     // 5951
			clear: "Clear"                                                                                                      // 5952
		}                                                                                                                    // 5953
	};                                                                                                                    // 5954
                                                                                                                       // 5955
	var DPGlobal = {                                                                                                      // 5956
		modes: [                                                                                                             // 5957
			{                                                                                                                   // 5958
				clsName: 'days',                                                                                                   // 5959
				navFnc: 'Month',                                                                                                   // 5960
				navStep: 1                                                                                                         // 5961
			},                                                                                                                  // 5962
			{                                                                                                                   // 5963
				clsName: 'months',                                                                                                 // 5964
				navFnc: 'FullYear',                                                                                                // 5965
				navStep: 1                                                                                                         // 5966
			},                                                                                                                  // 5967
			{                                                                                                                   // 5968
				clsName: 'years',                                                                                                  // 5969
				navFnc: 'FullYear',                                                                                                // 5970
				navStep: 10                                                                                                        // 5971
		}],                                                                                                                  // 5972
		isLeapYear: function (year) {                                                                                        // 5973
			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));                                            // 5974
		},                                                                                                                   // 5975
		getDaysInMonth: function (year, month) {                                                                             // 5976
			return [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];                  // 5977
		},                                                                                                                   // 5978
		validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,                                                                            // 5979
		nonpunctuation: /[^ -\/:-@\[\u3400-\u9fff-`{-~\t\n\r]+/g,                                                            // 5980
		parseFormat: function(format){                                                                                       // 5981
			// IE treats \0 as a string end in inputs (truncating the value),                                                   // 5982
			// so it's a bad format delimiter, anyway                                                                           // 5983
			var separators = format.replace(this.validParts, '\0').split('\0'),                                                 // 5984
				parts = format.match(this.validParts);                                                                             // 5985
			if (!separators || !separators.length || !parts || parts.length === 0){                                             // 5986
				throw new Error("Invalid date format.");                                                                           // 5987
			}                                                                                                                   // 5988
			return {separators: separators, parts: parts};                                                                      // 5989
		},                                                                                                                   // 5990
		parseDate: function(date, format, language) {                                                                        // 5991
			if (date instanceof Date) return date;                                                                              // 5992
			if (typeof format === 'string')                                                                                     // 5993
				format = DPGlobal.parseFormat(format);                                                                             // 5994
			if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(date)) {                                                         // 5995
				var part_re = /([\-+]\d+)([dmwy])/,                                                                                // 5996
					parts = date.match(/([\-+]\d+)([dmwy])/g),                                                                        // 5997
					part, dir;                                                                                                        // 5998
				date = new Date();                                                                                                 // 5999
				for (var i=0; i<parts.length; i++) {                                                                               // 6000
					part = part_re.exec(parts[i]);                                                                                    // 6001
					dir = parseInt(part[1]);                                                                                          // 6002
					switch(part[2]){                                                                                                  // 6003
						case 'd':                                                                                                        // 6004
							date.setUTCDate(date.getUTCDate() + dir);                                                                       // 6005
							break;                                                                                                          // 6006
						case 'm':                                                                                                        // 6007
							date = Datepicker.prototype.moveMonth.call(Datepicker.prototype, date, dir);                                    // 6008
							break;                                                                                                          // 6009
						case 'w':                                                                                                        // 6010
							date.setUTCDate(date.getUTCDate() + dir * 7);                                                                   // 6011
							break;                                                                                                          // 6012
						case 'y':                                                                                                        // 6013
							date = Datepicker.prototype.moveYear.call(Datepicker.prototype, date, dir);                                     // 6014
							break;                                                                                                          // 6015
					}                                                                                                                 // 6016
				}                                                                                                                  // 6017
				return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);                             // 6018
			}                                                                                                                   // 6019
			var parts = date && date.match(this.nonpunctuation) || [],                                                          // 6020
				date = new Date(),                                                                                                 // 6021
				parsed = {},                                                                                                       // 6022
				setters_order = ['yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'd', 'dd'],                                                   // 6023
				setters_map = {                                                                                                    // 6024
					yyyy: function(d,v){ return d.setUTCFullYear(v); },                                                               // 6025
					yy: function(d,v){ return d.setUTCFullYear(2000+v); },                                                            // 6026
					m: function(d,v){                                                                                                 // 6027
						v -= 1;                                                                                                          // 6028
						while (v<0) v += 12;                                                                                             // 6029
						v %= 12;                                                                                                         // 6030
						d.setUTCMonth(v);                                                                                                // 6031
						while (d.getUTCMonth() != v)                                                                                     // 6032
							d.setUTCDate(d.getUTCDate()-1);                                                                                 // 6033
						return d;                                                                                                        // 6034
					},                                                                                                                // 6035
					d: function(d,v){ return d.setUTCDate(v); }                                                                       // 6036
				},                                                                                                                 // 6037
				val, filtered, part;                                                                                               // 6038
			setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];                                        // 6039
			setters_map['dd'] = setters_map['d'];                                                                               // 6040
			date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);                                       // 6041
			var fparts = format.parts.slice();                                                                                  // 6042
			// Remove noop parts                                                                                                // 6043
			if (parts.length != fparts.length) {                                                                                // 6044
				fparts = $(fparts).filter(function(i,p){                                                                           // 6045
					return $.inArray(p, setters_order) !== -1;                                                                        // 6046
				}).toArray();                                                                                                      // 6047
			}                                                                                                                   // 6048
			// Process remainder                                                                                                // 6049
			if (parts.length == fparts.length) {                                                                                // 6050
				for (var i=0, cnt = fparts.length; i < cnt; i++) {                                                                 // 6051
					val = parseInt(parts[i], 10);                                                                                     // 6052
					part = fparts[i];                                                                                                 // 6053
					if (isNaN(val)) {                                                                                                 // 6054
						switch(part) {                                                                                                   // 6055
							case 'MM':                                                                                                      // 6056
								filtered = $(dates[language].months).filter(function(){                                                        // 6057
									var m = this.slice(0, parts[i].length),                                                                       // 6058
										p = parts[i].slice(0, m.length);                                                                             // 6059
									return m == p;                                                                                                // 6060
								});                                                                                                            // 6061
								val = $.inArray(filtered[0], dates[language].months) + 1;                                                      // 6062
								break;                                                                                                         // 6063
							case 'M':                                                                                                       // 6064
								filtered = $(dates[language].monthsShort).filter(function(){                                                   // 6065
									var m = this.slice(0, parts[i].length),                                                                       // 6066
										p = parts[i].slice(0, m.length);                                                                             // 6067
									return m == p;                                                                                                // 6068
								});                                                                                                            // 6069
								val = $.inArray(filtered[0], dates[language].monthsShort) + 1;                                                 // 6070
								break;                                                                                                         // 6071
						}                                                                                                                // 6072
					}                                                                                                                 // 6073
					parsed[part] = val;                                                                                               // 6074
				}                                                                                                                  // 6075
				for (var i=0, s; i<setters_order.length; i++){                                                                     // 6076
					s = setters_order[i];                                                                                             // 6077
					if (s in parsed && !isNaN(parsed[s]))                                                                             // 6078
						setters_map[s](date, parsed[s]);                                                                                 // 6079
				}                                                                                                                  // 6080
			}                                                                                                                   // 6081
			return date;                                                                                                        // 6082
		},                                                                                                                   // 6083
		formatDate: function(date, format, language){                                                                        // 6084
			if (typeof format === 'string')                                                                                     // 6085
				format = DPGlobal.parseFormat(format);                                                                             // 6086
			var val = {                                                                                                         // 6087
				d: date.getUTCDate(),                                                                                              // 6088
				D: dates[language].daysShort[date.getUTCDay()],                                                                    // 6089
				DD: dates[language].days[date.getUTCDay()],                                                                        // 6090
				m: date.getUTCMonth() + 1,                                                                                         // 6091
				M: dates[language].monthsShort[date.getUTCMonth()],                                                                // 6092
				MM: dates[language].months[date.getUTCMonth()],                                                                    // 6093
				yy: date.getUTCFullYear().toString().substring(2),                                                                 // 6094
				yyyy: date.getUTCFullYear()                                                                                        // 6095
			};                                                                                                                  // 6096
			val.dd = (val.d < 10 ? '0' : '') + val.d;                                                                           // 6097
			val.mm = (val.m < 10 ? '0' : '') + val.m;                                                                           // 6098
			var date = [],                                                                                                      // 6099
				seps = $.extend([], format.separators);                                                                            // 6100
			for (var i=0, cnt = format.parts.length; i <= cnt; i++) {                                                           // 6101
				if (seps.length)                                                                                                   // 6102
					date.push(seps.shift());                                                                                          // 6103
				date.push(val[format.parts[i]]);                                                                                   // 6104
			}                                                                                                                   // 6105
			return date.join('');                                                                                               // 6106
		},                                                                                                                   // 6107
		headTemplate: '<thead>'+                                                                                             // 6108
							'<tr>'+                                                                                                         // 6109
								'<th class="prev"><i class="icon-arrow-left"/></th>'+                                                          // 6110
								'<th colspan="5" class="datepicker-switch"></th>'+                                                             // 6111
								'<th class="next"><i class="icon-arrow-right"/></th>'+                                                         // 6112
							'</tr>'+                                                                                                        // 6113
						'</thead>',                                                                                                      // 6114
		contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',                                                       // 6115
		footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'
	};                                                                                                                    // 6117
	DPGlobal.template = '<div class="datepicker">'+                                                                       // 6118
							'<div class="datepicker-days">'+                                                                                // 6119
								'<table class=" table-condensed">'+                                                                            // 6120
									DPGlobal.headTemplate+                                                                                        // 6121
									'<tbody></tbody>'+                                                                                            // 6122
									DPGlobal.footTemplate+                                                                                        // 6123
								'</table>'+                                                                                                    // 6124
							'</div>'+                                                                                                       // 6125
							'<div class="datepicker-months">'+                                                                              // 6126
								'<table class="table-condensed">'+                                                                             // 6127
									DPGlobal.headTemplate+                                                                                        // 6128
									DPGlobal.contTemplate+                                                                                        // 6129
									DPGlobal.footTemplate+                                                                                        // 6130
								'</table>'+                                                                                                    // 6131
							'</div>'+                                                                                                       // 6132
							'<div class="datepicker-years">'+                                                                               // 6133
								'<table class="table-condensed">'+                                                                             // 6134
									DPGlobal.headTemplate+                                                                                        // 6135
									DPGlobal.contTemplate+                                                                                        // 6136
									DPGlobal.footTemplate+                                                                                        // 6137
								'</table>'+                                                                                                    // 6138
							'</div>'+                                                                                                       // 6139
						'</div>';                                                                                                        // 6140
                                                                                                                       // 6141
	$.fn.datepicker.DPGlobal = DPGlobal;                                                                                  // 6142
                                                                                                                       // 6143
                                                                                                                       // 6144
	/* DATEPICKER NO CONFLICT                                                                                             // 6145
	* =================== */                                                                                              // 6146
                                                                                                                       // 6147
	$.fn.datepicker.noConflict = function(){                                                                              // 6148
		$.fn.datepicker = old;                                                                                               // 6149
		return this;                                                                                                         // 6150
	};                                                                                                                    // 6151
                                                                                                                       // 6152
                                                                                                                       // 6153
	/* DATEPICKER DATA-API                                                                                                // 6154
	* ================== */                                                                                               // 6155
                                                                                                                       // 6156
	$(document).on(                                                                                                       // 6157
		'focus.datepicker.data-api click.datepicker.data-api',                                                               // 6158
		'[data-provide="datepicker"]',                                                                                       // 6159
		function(e){                                                                                                         // 6160
			var $this = $(this);                                                                                                // 6161
			if ($this.data('datepicker')) return;                                                                               // 6162
			e.preventDefault();                                                                                                 // 6163
			// component click requires us to explicitly show it                                                                // 6164
			datepicker.call($this, 'show');                                                                                     // 6165
		}                                                                                                                    // 6166
	);                                                                                                                    // 6167
	$(function(){                                                                                                         // 6168
		//$('[data-provide="datepicker-inline"]').datepicker();                                                              // 6169
        //vit: changed to support noConflict()                                                                         // 6170
        datepicker.call($('[data-provide="datepicker-inline"]'));                                                      // 6171
	});                                                                                                                   // 6172
                                                                                                                       // 6173
}( window.jQuery ));                                                                                                   // 6174
                                                                                                                       // 6175
/**                                                                                                                    // 6176
Bootstrap-datepicker.                                                                                                  // 6177
Description and examples: https://github.com/eternicode/bootstrap-datepicker.                                          // 6178
For **i18n** you should include js file from here: https://github.com/eternicode/bootstrap-datepicker/tree/master/js/locales
and set `language` option.                                                                                             // 6180
Since 1.4.0 date has different appearance in **popup** and **inline** modes.                                           // 6181
                                                                                                                       // 6182
@class date                                                                                                            // 6183
@extends abstractinput                                                                                                 // 6184
@final                                                                                                                 // 6185
@example                                                                                                               // 6186
<a href="#" id="dob" data-type="date" data-pk="1" data-url="/post" data-title="Select date">15/05/1984</a>             // 6187
<script>                                                                                                               // 6188
$(function(){                                                                                                          // 6189
    $('#dob').editable({                                                                                               // 6190
        format: 'yyyy-mm-dd',                                                                                          // 6191
        viewformat: 'dd/mm/yyyy',                                                                                      // 6192
        datepicker: {                                                                                                  // 6193
                weekStart: 1                                                                                           // 6194
           }                                                                                                           // 6195
        }                                                                                                              // 6196
    });                                                                                                                // 6197
});                                                                                                                    // 6198
</script>                                                                                                              // 6199
**/                                                                                                                    // 6200
(function ($) {                                                                                                        // 6201
    "use strict";                                                                                                      // 6202
                                                                                                                       // 6203
    //store bootstrap-datepicker as bdateicker to exclude conflict with jQuery UI one                                  // 6204
    $.fn.bdatepicker = $.fn.datepicker.noConflict();                                                                   // 6205
    if(!$.fn.datepicker) { //if there were no other datepickers, keep also original name                               // 6206
        $.fn.datepicker = $.fn.bdatepicker;                                                                            // 6207
    }                                                                                                                  // 6208
                                                                                                                       // 6209
    var Date = function (options) {                                                                                    // 6210
        this.init('date', options, Date.defaults);                                                                     // 6211
        this.initPicker(options, Date.defaults);                                                                       // 6212
    };                                                                                                                 // 6213
                                                                                                                       // 6214
    $.fn.editableutils.inherit(Date, $.fn.editabletypes.abstractinput);                                                // 6215
                                                                                                                       // 6216
    $.extend(Date.prototype, {                                                                                         // 6217
        initPicker: function(options, defaults) {                                                                      // 6218
            //'format' is set directly from settings or data-* attributes                                              // 6219
                                                                                                                       // 6220
            //by default viewformat equals to format                                                                   // 6221
            if(!this.options.viewformat) {                                                                             // 6222
                this.options.viewformat = this.options.format;                                                         // 6223
            }                                                                                                          // 6224
                                                                                                                       // 6225
            //try parse datepicker config defined as json string in data-datepicker                                    // 6226
            options.datepicker = $.fn.editableutils.tryParseJson(options.datepicker, true);                            // 6227
                                                                                                                       // 6228
            //overriding datepicker config (as by default jQuery extend() is not recursive)                            // 6229
            //since 1.4 datepicker internally uses viewformat instead of format. Format is for submit only             // 6230
            this.options.datepicker = $.extend({}, defaults.datepicker, options.datepicker, {                          // 6231
                format: this.options.viewformat                                                                        // 6232
            });                                                                                                        // 6233
                                                                                                                       // 6234
            //language                                                                                                 // 6235
            this.options.datepicker.language = this.options.datepicker.language || 'en';                               // 6236
                                                                                                                       // 6237
            //store DPglobal                                                                                           // 6238
            this.dpg = $.fn.bdatepicker.DPGlobal;                                                                      // 6239
                                                                                                                       // 6240
            //store parsed formats                                                                                     // 6241
            this.parsedFormat = this.dpg.parseFormat(this.options.format);                                             // 6242
            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat);                                     // 6243
        },                                                                                                             // 6244
                                                                                                                       // 6245
        render: function () {                                                                                          // 6246
            this.$input.bdatepicker(this.options.datepicker);                                                          // 6247
                                                                                                                       // 6248
            //"clear" link                                                                                             // 6249
            if(this.options.clear) {                                                                                   // 6250
                this.$clear = $('<a href="#"></a>').html(this.options.clear).click($.proxy(function(e){                // 6251
                    e.preventDefault();                                                                                // 6252
                    e.stopPropagation();                                                                               // 6253
                    this.clear();                                                                                      // 6254
                }, this));                                                                                             // 6255
                                                                                                                       // 6256
                this.$tpl.parent().append($('<div class="editable-clear">').append(this.$clear));                      // 6257
            }                                                                                                          // 6258
        },                                                                                                             // 6259
                                                                                                                       // 6260
        value2html: function(value, element) {                                                                         // 6261
           var text = value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '';
           Date.superclass.value2html.call(this, text, element);                                                       // 6263
        },                                                                                                             // 6264
                                                                                                                       // 6265
        html2value: function(html) {                                                                                   // 6266
            return this.parseDate(html, this.parsedViewFormat);                                                        // 6267
        },                                                                                                             // 6268
                                                                                                                       // 6269
        value2str: function(value) {                                                                                   // 6270
            return value ? this.dpg.formatDate(value, this.parsedFormat, this.options.datepicker.language) : '';       // 6271
        },                                                                                                             // 6272
                                                                                                                       // 6273
        str2value: function(str) {                                                                                     // 6274
            return this.parseDate(str, this.parsedFormat);                                                             // 6275
        },                                                                                                             // 6276
                                                                                                                       // 6277
        value2submit: function(value) {                                                                                // 6278
            return this.value2str(value);                                                                              // 6279
        },                                                                                                             // 6280
                                                                                                                       // 6281
        value2input: function(value) {                                                                                 // 6282
            this.$input.bdatepicker('update', value);                                                                  // 6283
        },                                                                                                             // 6284
                                                                                                                       // 6285
        input2value: function() {                                                                                      // 6286
            return this.$input.data('datepicker').date;                                                                // 6287
        },                                                                                                             // 6288
                                                                                                                       // 6289
        activate: function() {                                                                                         // 6290
        },                                                                                                             // 6291
                                                                                                                       // 6292
        clear:  function() {                                                                                           // 6293
            this.$input.data('datepicker').date = null;                                                                // 6294
            this.$input.find('.active').removeClass('active');                                                         // 6295
            if(!this.options.showbuttons) {                                                                            // 6296
                this.$input.closest('form').submit();                                                                  // 6297
            }                                                                                                          // 6298
        },                                                                                                             // 6299
                                                                                                                       // 6300
        autosubmit: function() {                                                                                       // 6301
            this.$input.on('mouseup', '.day', function(e){                                                             // 6302
                if($(e.currentTarget).is('.old') || $(e.currentTarget).is('.new')) {                                   // 6303
                    return;                                                                                            // 6304
                }                                                                                                      // 6305
                var $form = $(this).closest('form');                                                                   // 6306
                setTimeout(function() {                                                                                // 6307
                    $form.submit();                                                                                    // 6308
                }, 200);                                                                                               // 6309
            });                                                                                                        // 6310
           //changedate is not suitable as it triggered when showing datepicker. see #149                              // 6311
           /*                                                                                                          // 6312
           this.$input.on('changeDate', function(e){                                                                   // 6313
               var $form = $(this).closest('form');                                                                    // 6314
               setTimeout(function() {                                                                                 // 6315
                   $form.submit();                                                                                     // 6316
               }, 200);                                                                                                // 6317
           });                                                                                                         // 6318
           */                                                                                                          // 6319
       },                                                                                                              // 6320
                                                                                                                       // 6321
       /*                                                                                                              // 6322
        For incorrect date bootstrap-datepicker returns current date that is not suitable                              // 6323
        for datefield.                                                                                                 // 6324
        This function returns null for incorrect date.                                                                 // 6325
       */                                                                                                              // 6326
       parseDate: function(str, format) {                                                                              // 6327
           var date = null, formattedBack;                                                                             // 6328
           if(str) {                                                                                                   // 6329
               date = this.dpg.parseDate(str, format, this.options.datepicker.language);                               // 6330
               if(typeof str === 'string') {                                                                           // 6331
                   formattedBack = this.dpg.formatDate(date, format, this.options.datepicker.language);                // 6332
                   if(str !== formattedBack) {                                                                         // 6333
                       date = null;                                                                                    // 6334
                   }                                                                                                   // 6335
               }                                                                                                       // 6336
           }                                                                                                           // 6337
           return date;                                                                                                // 6338
       }                                                                                                               // 6339
                                                                                                                       // 6340
    });                                                                                                                // 6341
                                                                                                                       // 6342
    Date.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                          // 6343
        /**                                                                                                            // 6344
        @property tpl                                                                                                  // 6345
        @default <div></div>                                                                                           // 6346
        **/                                                                                                            // 6347
        tpl:'<div class="editable-date well"></div>',                                                                  // 6348
        /**                                                                                                            // 6349
        @property inputclass                                                                                           // 6350
        @default null                                                                                                  // 6351
        **/                                                                                                            // 6352
        inputclass: null,                                                                                              // 6353
        /**                                                                                                            // 6354
        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>
        Possible tokens are: <code>d, dd, m, mm, yy, yyyy</code>                                                       // 6356
                                                                                                                       // 6357
        @property format                                                                                               // 6358
        @type string                                                                                                   // 6359
        @default yyyy-mm-dd                                                                                            // 6360
        **/                                                                                                            // 6361
        format:'yyyy-mm-dd',                                                                                           // 6362
        /**                                                                                                            // 6363
        Format used for displaying date. Also applied when converting date from element's text on init.                // 6364
        If not specified equals to <code>format</code>                                                                 // 6365
                                                                                                                       // 6366
        @property viewformat                                                                                           // 6367
        @type string                                                                                                   // 6368
        @default null                                                                                                  // 6369
        **/                                                                                                            // 6370
        viewformat: null,                                                                                              // 6371
        /**                                                                                                            // 6372
        Configuration of datepicker.                                                                                   // 6373
        Full list of options: http://bootstrap-datepicker.readthedocs.org/en/latest/options.html                       // 6374
                                                                                                                       // 6375
        @property datepicker                                                                                           // 6376
        @type object                                                                                                   // 6377
        @default {                                                                                                     // 6378
            weekStart: 0,                                                                                              // 6379
            startView: 0,                                                                                              // 6380
            minViewMode: 0,                                                                                            // 6381
            autoclose: false                                                                                           // 6382
        }                                                                                                              // 6383
        **/                                                                                                            // 6384
        datepicker:{                                                                                                   // 6385
            weekStart: 0,                                                                                              // 6386
            startView: 0,                                                                                              // 6387
            minViewMode: 0,                                                                                            // 6388
            autoclose: false                                                                                           // 6389
        },                                                                                                             // 6390
        /**                                                                                                            // 6391
        Text shown as clear date button.                                                                               // 6392
        If <code>false</code> clear button will not be rendered.                                                       // 6393
                                                                                                                       // 6394
        @property clear                                                                                                // 6395
        @type boolean|string                                                                                           // 6396
        @default 'x clear'                                                                                             // 6397
        **/                                                                                                            // 6398
        clear: '&times; clear'                                                                                         // 6399
    });                                                                                                                // 6400
                                                                                                                       // 6401
    $.fn.editabletypes.date = Date;                                                                                    // 6402
                                                                                                                       // 6403
}(window.jQuery));                                                                                                     // 6404
                                                                                                                       // 6405
/**                                                                                                                    // 6406
Bootstrap datefield input - modification for inline mode.                                                              // 6407
Shows normal <input type="text"> and binds popup datepicker.                                                           // 6408
Automatically shown in inline mode.                                                                                    // 6409
                                                                                                                       // 6410
@class datefield                                                                                                       // 6411
@extends date                                                                                                          // 6412
                                                                                                                       // 6413
@since 1.4.0                                                                                                           // 6414
**/                                                                                                                    // 6415
(function ($) {                                                                                                        // 6416
    "use strict";                                                                                                      // 6417
                                                                                                                       // 6418
    var DateField = function (options) {                                                                               // 6419
        this.init('datefield', options, DateField.defaults);                                                           // 6420
        this.initPicker(options, DateField.defaults);                                                                  // 6421
    };                                                                                                                 // 6422
                                                                                                                       // 6423
    $.fn.editableutils.inherit(DateField, $.fn.editabletypes.date);                                                    // 6424
                                                                                                                       // 6425
    $.extend(DateField.prototype, {                                                                                    // 6426
        render: function () {                                                                                          // 6427
            this.$input = this.$tpl.find('input');                                                                     // 6428
            this.setClass();                                                                                           // 6429
            this.setAttr('placeholder');                                                                               // 6430
                                                                                                                       // 6431
            //bootstrap-datepicker is set `bdateicker` to exclude conflict with jQuery UI one. (in date.js)            // 6432
            this.$tpl.bdatepicker(this.options.datepicker);                                                            // 6433
                                                                                                                       // 6434
            //need to disable original event handlers                                                                  // 6435
            this.$input.off('focus keydown');                                                                          // 6436
                                                                                                                       // 6437
            //update value of datepicker                                                                               // 6438
            this.$input.keyup($.proxy(function(){                                                                      // 6439
               this.$tpl.removeData('date');                                                                           // 6440
               this.$tpl.bdatepicker('update');                                                                        // 6441
            }, this));                                                                                                 // 6442
                                                                                                                       // 6443
        },                                                                                                             // 6444
                                                                                                                       // 6445
       value2input: function(value) {                                                                                  // 6446
           this.$input.val(value ? this.dpg.formatDate(value, this.parsedViewFormat, this.options.datepicker.language) : '');
           this.$tpl.bdatepicker('update');                                                                            // 6448
       },                                                                                                              // 6449
                                                                                                                       // 6450
       input2value: function() {                                                                                       // 6451
           return this.html2value(this.$input.val());                                                                  // 6452
       },                                                                                                              // 6453
                                                                                                                       // 6454
       activate: function() {                                                                                          // 6455
           $.fn.editabletypes.text.prototype.activate.call(this);                                                      // 6456
       },                                                                                                              // 6457
                                                                                                                       // 6458
       autosubmit: function() {                                                                                        // 6459
         //reset autosubmit to empty                                                                                   // 6460
       }                                                                                                               // 6461
    });                                                                                                                // 6462
                                                                                                                       // 6463
    DateField.defaults = $.extend({}, $.fn.editabletypes.date.defaults, {                                              // 6464
        /**                                                                                                            // 6465
        @property tpl                                                                                                  // 6466
        **/                                                                                                            // 6467
        tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',
        /**                                                                                                            // 6469
        @property inputclass                                                                                           // 6470
        @default 'input-small'                                                                                         // 6471
        **/                                                                                                            // 6472
        inputclass: 'input-small',                                                                                     // 6473
                                                                                                                       // 6474
        /* datepicker config */                                                                                        // 6475
        datepicker: {                                                                                                  // 6476
            weekStart: 0,                                                                                              // 6477
            startView: 0,                                                                                              // 6478
            minViewMode: 0,                                                                                            // 6479
            autoclose: true                                                                                            // 6480
        }                                                                                                              // 6481
    });                                                                                                                // 6482
                                                                                                                       // 6483
    $.fn.editabletypes.datefield = DateField;                                                                          // 6484
                                                                                                                       // 6485
}(window.jQuery));                                                                                                     // 6486
/**                                                                                                                    // 6487
Bootstrap-datetimepicker.                                                                                              // 6488
Based on [smalot bootstrap-datetimepicker plugin](https://github.com/smalot/bootstrap-datetimepicker).                 // 6489
Before usage you should manually include dependent js and css:                                                         // 6490
                                                                                                                       // 6491
    <link href="css/datetimepicker.css" rel="stylesheet" type="text/css"></link>                                       // 6492
    <script src="js/bootstrap-datetimepicker.js"></script>                                                             // 6493
                                                                                                                       // 6494
For **i18n** you should include js file from here: https://github.com/smalot/bootstrap-datetimepicker/tree/master/js/locales
and set `language` option.                                                                                             // 6496
                                                                                                                       // 6497
@class datetime                                                                                                        // 6498
@extends abstractinput                                                                                                 // 6499
@final                                                                                                                 // 6500
@since 1.4.4                                                                                                           // 6501
@example                                                                                                               // 6502
<a href="#" id="last_seen" data-type="datetime" data-pk="1" data-url="/post" title="Select date & time">15/03/2013 12:45</a>
<script>                                                                                                               // 6504
$(function(){                                                                                                          // 6505
    $('#last_seen').editable({                                                                                         // 6506
        format: 'yyyy-mm-dd hh:ii',                                                                                    // 6507
        viewformat: 'dd/mm/yyyy hh:ii',                                                                                // 6508
        datetimepicker: {                                                                                              // 6509
                weekStart: 1                                                                                           // 6510
           }                                                                                                           // 6511
        }                                                                                                              // 6512
    });                                                                                                                // 6513
});                                                                                                                    // 6514
</script>                                                                                                              // 6515
**/                                                                                                                    // 6516
(function ($) {                                                                                                        // 6517
    "use strict";                                                                                                      // 6518
                                                                                                                       // 6519
    var DateTime = function (options) {                                                                                // 6520
        this.init('datetime', options, DateTime.defaults);                                                             // 6521
        this.initPicker(options, DateTime.defaults);                                                                   // 6522
    };                                                                                                                 // 6523
                                                                                                                       // 6524
    $.fn.editableutils.inherit(DateTime, $.fn.editabletypes.abstractinput);                                            // 6525
                                                                                                                       // 6526
    $.extend(DateTime.prototype, {                                                                                     // 6527
        initPicker: function(options, defaults) {                                                                      // 6528
            //'format' is set directly from settings or data-* attributes                                              // 6529
                                                                                                                       // 6530
            //by default viewformat equals to format                                                                   // 6531
            if(!this.options.viewformat) {                                                                             // 6532
                this.options.viewformat = this.options.format;                                                         // 6533
            }                                                                                                          // 6534
                                                                                                                       // 6535
            //try parse datetimepicker config defined as json string in data-datetimepicker                            // 6536
            options.datetimepicker = $.fn.editableutils.tryParseJson(options.datetimepicker, true);                    // 6537
                                                                                                                       // 6538
            //overriding datetimepicker config (as by default jQuery extend() is not recursive)                        // 6539
            //since 1.4 datetimepicker internally uses viewformat instead of format. Format is for submit only         // 6540
            this.options.datetimepicker = $.extend({}, defaults.datetimepicker, options.datetimepicker, {              // 6541
                format: this.options.viewformat                                                                        // 6542
            });                                                                                                        // 6543
                                                                                                                       // 6544
            //language                                                                                                 // 6545
            this.options.datetimepicker.language = this.options.datetimepicker.language || 'en';                       // 6546
                                                                                                                       // 6547
            //store DPglobal                                                                                           // 6548
            this.dpg = $.fn.datetimepicker.DPGlobal;                                                                   // 6549
                                                                                                                       // 6550
            //store parsed formats                                                                                     // 6551
            this.parsedFormat = this.dpg.parseFormat(this.options.format, this.options.formatType);                    // 6552
            this.parsedViewFormat = this.dpg.parseFormat(this.options.viewformat, this.options.formatType);            // 6553
        },                                                                                                             // 6554
                                                                                                                       // 6555
        render: function () {                                                                                          // 6556
            this.$input.datetimepicker(this.options.datetimepicker);                                                   // 6557
                                                                                                                       // 6558
            //adjust container position when viewMode changes                                                          // 6559
            //see https://github.com/smalot/bootstrap-datetimepicker/pull/80                                           // 6560
            this.$input.on('changeMode', function(e) {                                                                 // 6561
                var f = $(this).closest('form').parent();                                                              // 6562
                //timeout here, otherwise container changes position before form has new size                          // 6563
                setTimeout(function(){                                                                                 // 6564
                    f.triggerHandler('resize');                                                                        // 6565
                }, 0);                                                                                                 // 6566
            });                                                                                                        // 6567
                                                                                                                       // 6568
            //"clear" link                                                                                             // 6569
            if(this.options.clear) {                                                                                   // 6570
                this.$clear = $('<a href="#"></a>').html(this.options.clear).click($.proxy(function(e){                // 6571
                    e.preventDefault();                                                                                // 6572
                    e.stopPropagation();                                                                               // 6573
                    this.clear();                                                                                      // 6574
                }, this));                                                                                             // 6575
                                                                                                                       // 6576
                this.$tpl.parent().append($('<div class="editable-clear">').append(this.$clear));                      // 6577
            }                                                                                                          // 6578
        },                                                                                                             // 6579
                                                                                                                       // 6580
        value2html: function(value, element) {                                                                         // 6581
            //formatDate works with UTCDate!                                                                           // 6582
            var text = value ? this.dpg.formatDate(this.toUTC(value), this.parsedViewFormat, this.options.datetimepicker.language, this.options.formatType) : '';
            if(element) {                                                                                              // 6584
                DateTime.superclass.value2html.call(this, text, element);                                              // 6585
            } else {                                                                                                   // 6586
                return text;                                                                                           // 6587
            }                                                                                                          // 6588
        },                                                                                                             // 6589
                                                                                                                       // 6590
        html2value: function(html) {                                                                                   // 6591
            //parseDate return utc date!                                                                               // 6592
            var value = this.parseDate(html, this.parsedViewFormat);                                                   // 6593
            return value ? this.fromUTC(value) : null;                                                                 // 6594
        },                                                                                                             // 6595
                                                                                                                       // 6596
        value2str: function(value) {                                                                                   // 6597
            //formatDate works with UTCDate!                                                                           // 6598
            return value ? this.dpg.formatDate(this.toUTC(value), this.parsedFormat, this.options.datetimepicker.language, this.options.formatType) : '';
       },                                                                                                              // 6600
                                                                                                                       // 6601
       str2value: function(str) {                                                                                      // 6602
           //parseDate return utc date!                                                                                // 6603
           var value = this.parseDate(str, this.parsedFormat);                                                         // 6604
           return value ? this.fromUTC(value) : null;                                                                  // 6605
       },                                                                                                              // 6606
                                                                                                                       // 6607
       value2submit: function(value) {                                                                                 // 6608
           return this.value2str(value);                                                                               // 6609
       },                                                                                                              // 6610
                                                                                                                       // 6611
       value2input: function(value) {                                                                                  // 6612
           if(value) {                                                                                                 // 6613
             this.$input.data('datetimepicker').setDate(value);                                                        // 6614
           }                                                                                                           // 6615
       },                                                                                                              // 6616
                                                                                                                       // 6617
       input2value: function() {                                                                                       // 6618
           //date may be cleared, in that case getDate() triggers error                                                // 6619
           var dt = this.$input.data('datetimepicker');                                                                // 6620
           return dt.date ? dt.getDate() : null;                                                                       // 6621
       },                                                                                                              // 6622
                                                                                                                       // 6623
       activate: function() {                                                                                          // 6624
       },                                                                                                              // 6625
                                                                                                                       // 6626
       clear: function() {                                                                                             // 6627
          this.$input.data('datetimepicker').date = null;                                                              // 6628
          this.$input.find('.active').removeClass('active');                                                           // 6629
          if(!this.options.showbuttons) {                                                                              // 6630
             this.$input.closest('form').submit();                                                                     // 6631
          }                                                                                                            // 6632
       },                                                                                                              // 6633
                                                                                                                       // 6634
       autosubmit: function() {                                                                                        // 6635
           this.$input.on('mouseup', '.minute', function(e){                                                           // 6636
               var $form = $(this).closest('form');                                                                    // 6637
               setTimeout(function() {                                                                                 // 6638
                   $form.submit();                                                                                     // 6639
               }, 200);                                                                                                // 6640
           });                                                                                                         // 6641
       },                                                                                                              // 6642
                                                                                                                       // 6643
       //convert date from local to utc                                                                                // 6644
       toUTC: function(value) {                                                                                        // 6645
         return value ? new Date(value.valueOf() - value.getTimezoneOffset() * 60000) : value;                         // 6646
       },                                                                                                              // 6647
                                                                                                                       // 6648
       //convert date from utc to local                                                                                // 6649
       fromUTC: function(value) {                                                                                      // 6650
         return value ? new Date(value.valueOf() + value.getTimezoneOffset() * 60000) : value;                         // 6651
       },                                                                                                              // 6652
                                                                                                                       // 6653
       /*                                                                                                              // 6654
        For incorrect date bootstrap-datetimepicker returns current date that is not suitable                          // 6655
        for datetimefield.                                                                                             // 6656
        This function returns null for incorrect date.                                                                 // 6657
       */                                                                                                              // 6658
       parseDate: function(str, format) {                                                                              // 6659
           var date = null, formattedBack;                                                                             // 6660
           if(str) {                                                                                                   // 6661
               date = this.dpg.parseDate(str, format, this.options.datetimepicker.language, this.options.formatType);  // 6662
               if(typeof str === 'string') {                                                                           // 6663
                   formattedBack = this.dpg.formatDate(date, format, this.options.datetimepicker.language, this.options.formatType);
                   if(str !== formattedBack) {                                                                         // 6665
                       date = null;                                                                                    // 6666
                   }                                                                                                   // 6667
               }                                                                                                       // 6668
           }                                                                                                           // 6669
           return date;                                                                                                // 6670
       }                                                                                                               // 6671
                                                                                                                       // 6672
    });                                                                                                                // 6673
                                                                                                                       // 6674
    DateTime.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                      // 6675
        /**                                                                                                            // 6676
        @property tpl                                                                                                  // 6677
        @default <div></div>                                                                                           // 6678
        **/                                                                                                            // 6679
        tpl:'<div class="editable-date well"></div>',                                                                  // 6680
        /**                                                                                                            // 6681
        @property inputclass                                                                                           // 6682
        @default null                                                                                                  // 6683
        **/                                                                                                            // 6684
        inputclass: null,                                                                                              // 6685
        /**                                                                                                            // 6686
        Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>
        Possible tokens are: <code>d, dd, m, mm, yy, yyyy, h, i</code>                                                 // 6688
                                                                                                                       // 6689
        @property format                                                                                               // 6690
        @type string                                                                                                   // 6691
        @default yyyy-mm-dd hh:ii                                                                                      // 6692
        **/                                                                                                            // 6693
        format:'yyyy-mm-dd hh:ii',                                                                                     // 6694
        formatType:'standard',                                                                                         // 6695
        /**                                                                                                            // 6696
        Format used for displaying date. Also applied when converting date from element's text on init.                // 6697
        If not specified equals to <code>format</code>                                                                 // 6698
                                                                                                                       // 6699
        @property viewformat                                                                                           // 6700
        @type string                                                                                                   // 6701
        @default null                                                                                                  // 6702
        **/                                                                                                            // 6703
        viewformat: null,                                                                                              // 6704
        /**                                                                                                            // 6705
        Configuration of datetimepicker.                                                                               // 6706
        Full list of options: https://github.com/smalot/bootstrap-datetimepicker                                       // 6707
                                                                                                                       // 6708
        @property datetimepicker                                                                                       // 6709
        @type object                                                                                                   // 6710
        @default { }                                                                                                   // 6711
        **/                                                                                                            // 6712
        datetimepicker:{                                                                                               // 6713
            todayHighlight: false,                                                                                     // 6714
            autoclose: false                                                                                           // 6715
        },                                                                                                             // 6716
        /**                                                                                                            // 6717
        Text shown as clear date button.                                                                               // 6718
        If <code>false</code> clear button will not be rendered.                                                       // 6719
                                                                                                                       // 6720
        @property clear                                                                                                // 6721
        @type boolean|string                                                                                           // 6722
        @default 'x clear'                                                                                             // 6723
        **/                                                                                                            // 6724
        clear: '&times; clear'                                                                                         // 6725
    });                                                                                                                // 6726
                                                                                                                       // 6727
    $.fn.editabletypes.datetime = DateTime;                                                                            // 6728
                                                                                                                       // 6729
}(window.jQuery));                                                                                                     // 6730
/**                                                                                                                    // 6731
Bootstrap datetimefield input - datetime input for inline mode.                                                        // 6732
Shows normal <input type="text"> and binds popup datetimepicker.                                                       // 6733
Automatically shown in inline mode.                                                                                    // 6734
                                                                                                                       // 6735
@class datetimefield                                                                                                   // 6736
@extends datetime                                                                                                      // 6737
                                                                                                                       // 6738
**/                                                                                                                    // 6739
(function ($) {                                                                                                        // 6740
    "use strict";                                                                                                      // 6741
                                                                                                                       // 6742
    var DateTimeField = function (options) {                                                                           // 6743
        this.init('datetimefield', options, DateTimeField.defaults);                                                   // 6744
        this.initPicker(options, DateTimeField.defaults);                                                              // 6745
    };                                                                                                                 // 6746
                                                                                                                       // 6747
    $.fn.editableutils.inherit(DateTimeField, $.fn.editabletypes.datetime);                                            // 6748
                                                                                                                       // 6749
    $.extend(DateTimeField.prototype, {                                                                                // 6750
        render: function () {                                                                                          // 6751
            this.$input = this.$tpl.find('input');                                                                     // 6752
            this.setClass();                                                                                           // 6753
            this.setAttr('placeholder');                                                                               // 6754
                                                                                                                       // 6755
            this.$tpl.datetimepicker(this.options.datetimepicker);                                                     // 6756
                                                                                                                       // 6757
            //need to disable original event handlers                                                                  // 6758
            this.$input.off('focus keydown');                                                                          // 6759
                                                                                                                       // 6760
            //update value of datepicker                                                                               // 6761
            this.$input.keyup($.proxy(function(){                                                                      // 6762
               this.$tpl.removeData('date');                                                                           // 6763
               this.$tpl.datetimepicker('update');                                                                     // 6764
            }, this));                                                                                                 // 6765
                                                                                                                       // 6766
        },                                                                                                             // 6767
                                                                                                                       // 6768
       value2input: function(value) {                                                                                  // 6769
           this.$input.val(this.value2html(value));                                                                    // 6770
           this.$tpl.datetimepicker('update');                                                                         // 6771
       },                                                                                                              // 6772
                                                                                                                       // 6773
       input2value: function() {                                                                                       // 6774
           return this.html2value(this.$input.val());                                                                  // 6775
       },                                                                                                              // 6776
                                                                                                                       // 6777
       activate: function() {                                                                                          // 6778
           $.fn.editabletypes.text.prototype.activate.call(this);                                                      // 6779
       },                                                                                                              // 6780
                                                                                                                       // 6781
       autosubmit: function() {                                                                                        // 6782
         //reset autosubmit to empty                                                                                   // 6783
       }                                                                                                               // 6784
    });                                                                                                                // 6785
                                                                                                                       // 6786
    DateTimeField.defaults = $.extend({}, $.fn.editabletypes.datetime.defaults, {                                      // 6787
        /**                                                                                                            // 6788
        @property tpl                                                                                                  // 6789
        **/                                                                                                            // 6790
        tpl:'<div class="input-append date"><input type="text"/><span class="add-on"><i class="icon-th"></i></span></div>',
        /**                                                                                                            // 6792
        @property inputclass                                                                                           // 6793
        @default 'input-medium'                                                                                        // 6794
        **/                                                                                                            // 6795
        inputclass: 'input-medium',                                                                                    // 6796
                                                                                                                       // 6797
        /* datetimepicker config */                                                                                    // 6798
        datetimepicker:{                                                                                               // 6799
            todayHighlight: false,                                                                                     // 6800
            autoclose: true                                                                                            // 6801
        }                                                                                                              // 6802
    });                                                                                                                // 6803
                                                                                                                       // 6804
    $.fn.editabletypes.datetimefield = DateTimeField;                                                                  // 6805
                                                                                                                       // 6806
}(window.jQuery));                                                                                                     // 6807
                                                                                                                       // 6808






/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/natestrauser:x-editable-bootstrap/lib/address/address.js                                                   //
// This file is in bare mode and is not in its own closure.                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
Address editable input.                                                                                                // 2
Internally value stored as {city: "Moscow", street: "Lenina", building: "15"}                                          // 3
                                                                                                                       // 4
@class address                                                                                                         // 5
@extends abstractinput                                                                                                 // 6
@final                                                                                                                 // 7
@example                                                                                                               // 8
<a href="#" id="address" data-type="address" data-pk="1">awesome</a>                                                   // 9
<script>                                                                                                               // 10
$(function(){                                                                                                          // 11
    $('#address').editable({                                                                                           // 12
        url: '/post',                                                                                                  // 13
        title: 'Enter city, street and building #',                                                                    // 14
        value: {                                                                                                       // 15
            city: "Moscow",                                                                                            // 16
            street: "Lenina",                                                                                          // 17
            building: "15"                                                                                             // 18
        }                                                                                                              // 19
    });                                                                                                                // 20
});                                                                                                                    // 21
</script>                                                                                                              // 22
**/                                                                                                                    // 23
(function ($) {                                                                                                        // 24
    "use strict";                                                                                                      // 25
                                                                                                                       // 26
    var Address = function (options) {                                                                                 // 27
        this.init('address', options, Address.defaults);                                                               // 28
    };                                                                                                                 // 29
                                                                                                                       // 30
    //inherit from Abstract input                                                                                      // 31
    $.fn.editableutils.inherit(Address, $.fn.editabletypes.abstractinput);                                             // 32
                                                                                                                       // 33
    $.extend(Address.prototype, {                                                                                      // 34
        /**                                                                                                            // 35
        Renders input from tpl                                                                                         // 36
                                                                                                                       // 37
        @method render()                                                                                               // 38
        **/                                                                                                            // 39
        render: function() {                                                                                           // 40
           this.$input = this.$tpl.find('input');                                                                      // 41
        },                                                                                                             // 42
                                                                                                                       // 43
        /**                                                                                                            // 44
        Default method to show value in element. Can be overwritten by display option.                                 // 45
                                                                                                                       // 46
        @method value2html(value, element)                                                                             // 47
        **/                                                                                                            // 48
        value2html: function(value, element) {                                                                         // 49
            if(!value) {                                                                                               // 50
                $(element).empty();                                                                                    // 51
                return;                                                                                                // 52
            }                                                                                                          // 53
            var html = $('<div>').text(value.city).html() + ', ' + $('<div>').text(value.street).html() + ' st., bld. ' + $('<div>').text(value.building).html();
            $(element).html(html);                                                                                     // 55
        },                                                                                                             // 56
                                                                                                                       // 57
        /**                                                                                                            // 58
        Gets value from element's html                                                                                 // 59
                                                                                                                       // 60
        @method html2value(html)                                                                                       // 61
        **/                                                                                                            // 62
        html2value: function(html) {                                                                                   // 63
          /*                                                                                                           // 64
            you may write parsing method to get value by element's html                                                // 65
            e.g. "Moscow, st. Lenina, bld. 15" => {city: "Moscow", street: "Lenina", building: "15"}                   // 66
            but for complex structures it's not recommended.                                                           // 67
            Better set value directly via javascript, e.g.                                                             // 68
            editable({                                                                                                 // 69
                value: {                                                                                               // 70
                    city: "Moscow",                                                                                    // 71
                    street: "Lenina",                                                                                  // 72
                    building: "15"                                                                                     // 73
                }                                                                                                      // 74
            });                                                                                                        // 75
          */                                                                                                           // 76
          return null;                                                                                                 // 77
        },                                                                                                             // 78
                                                                                                                       // 79
       /**                                                                                                             // 80
        Converts value to string.                                                                                      // 81
        It is used in internal comparing (not for sending to server).                                                  // 82
                                                                                                                       // 83
        @method value2str(value)                                                                                       // 84
       **/                                                                                                             // 85
       value2str: function(value) {                                                                                    // 86
           var str = '';                                                                                               // 87
           if(value) {                                                                                                 // 88
               for(var k in value) {                                                                                   // 89
                   str = str + k + ':' + value[k] + ';';                                                               // 90
               }                                                                                                       // 91
           }                                                                                                           // 92
           return str;                                                                                                 // 93
       },                                                                                                              // 94
                                                                                                                       // 95
       /*                                                                                                              // 96
        Converts string to value. Used for reading value from 'data-value' attribute.                                  // 97
                                                                                                                       // 98
        @method str2value(str)                                                                                         // 99
       */                                                                                                              // 100
       str2value: function(str) {                                                                                      // 101
           /*                                                                                                          // 102
           this is mainly for parsing value defined in data-value attribute.                                           // 103
           If you will always set value by javascript, no need to overwrite it                                         // 104
           */                                                                                                          // 105
           return str;                                                                                                 // 106
       },                                                                                                              // 107
                                                                                                                       // 108
       /**                                                                                                             // 109
        Sets value of input.                                                                                           // 110
                                                                                                                       // 111
        @method value2input(value)                                                                                     // 112
        @param {mixed} value                                                                                           // 113
       **/                                                                                                             // 114
       value2input: function(value) {                                                                                  // 115
           if(!value) {                                                                                                // 116
             return;                                                                                                   // 117
           }                                                                                                           // 118
           this.$input.filter('[name="city"]').val(value.city);                                                        // 119
           this.$input.filter('[name="street"]').val(value.street);                                                    // 120
           this.$input.filter('[name="building"]').val(value.building);                                                // 121
       },                                                                                                              // 122
                                                                                                                       // 123
       /**                                                                                                             // 124
        Returns value of input.                                                                                        // 125
                                                                                                                       // 126
        @method input2value()                                                                                          // 127
       **/                                                                                                             // 128
       input2value: function() {                                                                                       // 129
           return {                                                                                                    // 130
              city: this.$input.filter('[name="city"]').val(),                                                         // 131
              street: this.$input.filter('[name="street"]').val(),                                                     // 132
              building: this.$input.filter('[name="building"]').val()                                                  // 133
           };                                                                                                          // 134
       },                                                                                                              // 135
                                                                                                                       // 136
        /**                                                                                                            // 137
        Activates input: sets focus on the first field.                                                                // 138
                                                                                                                       // 139
        @method activate()                                                                                             // 140
       **/                                                                                                             // 141
       activate: function() {                                                                                          // 142
            this.$input.filter('[name="city"]').focus();                                                               // 143
       },                                                                                                              // 144
                                                                                                                       // 145
       /**                                                                                                             // 146
        Attaches handler to submit form in case of 'showbuttons=false' mode                                            // 147
                                                                                                                       // 148
        @method autosubmit()                                                                                           // 149
       **/                                                                                                             // 150
       autosubmit: function() {                                                                                        // 151
           this.$input.keydown(function (e) {                                                                          // 152
                if (e.which === 13) {                                                                                  // 153
                    $(this).closest('form').submit();                                                                  // 154
                }                                                                                                      // 155
           });                                                                                                         // 156
       }                                                                                                               // 157
    });                                                                                                                // 158
                                                                                                                       // 159
    Address.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                       // 160
        tpl: '<div class="editable-address"><label><span>City: </span><input type="text" name="city" class="input-small"></label></div>'+
             '<div class="editable-address"><label><span>Street: </span><input type="text" name="street" class="input-small"></label></div>'+
             '<div class="editable-address"><label><span>Building: </span><input type="text" name="building" class="input-mini"></label></div>',
                                                                                                                       // 164
        inputclass: ''                                                                                                 // 165
    });                                                                                                                // 166
                                                                                                                       // 167
    $.fn.editabletypes.address = Address;                                                                              // 168
                                                                                                                       // 169
}(window.jQuery));                                                                                                     // 170






/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/natestrauser:x-editable-bootstrap/lib/wysihtml5/wysihtml5.js                                               //
// This file is in bare mode and is not in its own closure.                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
Bootstrap wysihtml5 editor. Based on [bootstrap-wysihtml5](https://github.com/jhollingworth/bootstrap-wysihtml5).      // 2
You should include **manually** distributives of `wysihtml5` and `bootstrap-wysihtml5`:                                // 3
                                                                                                                       // 4
    <link href="js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.css" rel="stylesheet" type="text/css"></link>  
    <script src="js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/wysihtml5-0.3.0.min.js"></script>                   // 6
    <script src="js/inputs-ext/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.min.js"></script>         // 7
                                                                                                                       // 8
And also include `wysihtml5.js` from `inputs-ext` directory of x-editable:                                             // 9
                                                                                                                       // 10
    <script src="js/inputs-ext/wysihtml5/wysihtml5.js"></script>                                                       // 11
                                                                                                                       // 12
**Note:** It's better to use fresh bootstrap-wysihtml5 from it's [master branch](https://github.com/jhollingworth/bootstrap-wysihtml5/tree/master/src) as there is update for correct image insertion.    
                                                                                                                       // 14
@class wysihtml5                                                                                                       // 15
@extends abstractinput                                                                                                 // 16
@final                                                                                                                 // 17
@since 1.4.0                                                                                                           // 18
@example                                                                                                               // 19
<div id="comments" data-type="wysihtml5" data-pk="1"><h2>awesome</h2> comment!</div>                                   // 20
<script>                                                                                                               // 21
$(function(){                                                                                                          // 22
    $('#comments').editable({                                                                                          // 23
        url: '/post',                                                                                                  // 24
        title: 'Enter comments'                                                                                        // 25
    });                                                                                                                // 26
});                                                                                                                    // 27
</script>                                                                                                              // 28
**/                                                                                                                    // 29
(function ($) {                                                                                                        // 30
    "use strict";                                                                                                      // 31
                                                                                                                       // 32
    var Wysihtml5 = function (options) {                                                                               // 33
        this.init('wysihtml5', options, Wysihtml5.defaults);                                                           // 34
                                                                                                                       // 35
        //extend wysihtml5 manually as $.extend not recursive                                                          // 36
        this.options.wysihtml5 = $.extend({}, Wysihtml5.defaults.wysihtml5, options.wysihtml5);                        // 37
    };                                                                                                                 // 38
                                                                                                                       // 39
    $.fn.editableutils.inherit(Wysihtml5, $.fn.editabletypes.abstractinput);                                           // 40
                                                                                                                       // 41
    $.extend(Wysihtml5.prototype, {                                                                                    // 42
        render: function () {                                                                                          // 43
            var deferred = $.Deferred(),                                                                               // 44
            msieOld;                                                                                                   // 45
                                                                                                                       // 46
            //generate unique id as it required for wysihtml5                                                          // 47
            this.$input.attr('id', 'textarea_'+(new Date()).getTime());                                                // 48
                                                                                                                       // 49
            this.setClass();                                                                                           // 50
            this.setAttr('placeholder');                                                                               // 51
                                                                                                                       // 52
            //resolve deffered when widget loaded                                                                      // 53
            $.extend(this.options.wysihtml5, {                                                                         // 54
                events: {                                                                                              // 55
                  load: function() {                                                                                   // 56
                      deferred.resolve();                                                                              // 57
                  }                                                                                                    // 58
                }                                                                                                      // 59
            });                                                                                                        // 60
                                                                                                                       // 61
            this.$input.wysihtml5(this.options.wysihtml5);                                                             // 62
                                                                                                                       // 63
            /*                                                                                                         // 64
             In IE8 wysihtml5 iframe stays on the same line with buttons toolbar (inside popover).                     // 65
             The only solution I found is to add <br>. If you fine better way, please send PR.                         // 66
            */                                                                                                         // 67
            msieOld = /msie\s*(8|7|6)/.test(navigator.userAgent.toLowerCase());                                        // 68
            if(msieOld) {                                                                                              // 69
                this.$input.before('<br><br>');                                                                        // 70
            }                                                                                                          // 71
                                                                                                                       // 72
            return deferred.promise();                                                                                 // 73
        },                                                                                                             // 74
                                                                                                                       // 75
        value2html: function(value, element) {                                                                         // 76
            $(element).html(value);                                                                                    // 77
        },                                                                                                             // 78
                                                                                                                       // 79
        html2value: function(html) {                                                                                   // 80
            return html;                                                                                               // 81
        },                                                                                                             // 82
                                                                                                                       // 83
        value2input: function(value) {                                                                                 // 84
            this.$input.data("wysihtml5").editor.setValue(value, true);                                                // 85
        },                                                                                                             // 86
                                                                                                                       // 87
        activate: function() {                                                                                         // 88
            this.$input.data("wysihtml5").editor.focus();                                                              // 89
        },                                                                                                             // 90
                                                                                                                       // 91
        isEmpty: function($element) {                                                                                  // 92
            if($.trim($element.html()) === '') {                                                                       // 93
                return true;                                                                                           // 94
            } else if($.trim($element.text()) !== '') {                                                                // 95
                return false;                                                                                          // 96
            } else {                                                                                                   // 97
                //e.g. '<img>', '<br>', '<p></p>'                                                                      // 98
                return !$element.height() || !$element.width();                                                        // 99
            }                                                                                                          // 100
        }                                                                                                              // 101
    });                                                                                                                // 102
                                                                                                                       // 103
    Wysihtml5.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {                                     // 104
        /**                                                                                                            // 105
        @property tpl                                                                                                  // 106
        @default <textarea></textarea>                                                                                 // 107
        **/                                                                                                            // 108
        tpl:'<textarea></textarea>',                                                                                   // 109
        /**                                                                                                            // 110
        @property inputclass                                                                                           // 111
        @default editable-wysihtml5                                                                                    // 112
        **/                                                                                                            // 113
        inputclass: 'editable-wysihtml5',                                                                              // 114
        /**                                                                                                            // 115
        Placeholder attribute of input. Shown when input is empty.                                                     // 116
                                                                                                                       // 117
        @property placeholder                                                                                          // 118
        @type string                                                                                                   // 119
        @default null                                                                                                  // 120
        **/                                                                                                            // 121
        placeholder: null,                                                                                             // 122
        /**                                                                                                            // 123
        Wysihtml5 default options.                                                                                     // 124
        See https://github.com/jhollingworth/bootstrap-wysihtml5#options                                               // 125
                                                                                                                       // 126
        @property wysihtml5                                                                                            // 127
        @type object                                                                                                   // 128
        @default {stylesheets: false}                                                                                  // 129
        **/                                                                                                            // 130
        wysihtml5: {                                                                                                   // 131
            stylesheets: false //see https://github.com/jhollingworth/bootstrap-wysihtml5/issues/183                   // 132
        }                                                                                                              // 133
    });                                                                                                                // 134
                                                                                                                       // 135
    $.fn.editabletypes.wysihtml5 = Wysihtml5;                                                                          // 136
                                                                                                                       // 137
}(window.jQuery));                                                                                                     // 138
                                                                                                                       // 139






/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/natestrauser:x-editable-bootstrap/lib/wysihtml5/bootstrap-wysihtml5-0.0.2/wysihtml5-0.3.0.js               //
// This file is in bare mode and is not in its own closure.                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license wysihtml5 v0.3.0                                                                                           // 2
 * https://github.com/xing/wysihtml5                                                                                   // 3
 *                                                                                                                     // 4
 * Author: Christopher Blum (https://github.com/tiff)                                                                  // 5
 *                                                                                                                     // 6
 * Copyright (C) 2012 XING AG                                                                                          // 7
 * Licensed under the MIT license (MIT)                                                                                // 8
 *                                                                                                                     // 9
 */                                                                                                                    // 10
wysihtml5 = {                                                                                                          // 11
  version: "0.3.0",                                                                                                    // 12
                                                                                                                       // 13
  // namespaces                                                                                                        // 14
  commands:   {},                                                                                                      // 15
  dom:        {},                                                                                                      // 16
  quirks:     {},                                                                                                      // 17
  toolbar:    {},                                                                                                      // 18
  lang:       {},                                                                                                      // 19
  selection:  {},                                                                                                      // 20
  views:      {},                                                                                                      // 21
                                                                                                                       // 22
  INVISIBLE_SPACE: "\uFEFF",                                                                                           // 23
                                                                                                                       // 24
  EMPTY_FUNCTION: function() {},                                                                                       // 25
                                                                                                                       // 26
  ELEMENT_NODE: 1,                                                                                                     // 27
  TEXT_NODE:    3,                                                                                                     // 28
                                                                                                                       // 29
  BACKSPACE_KEY:  8,                                                                                                   // 30
  ENTER_KEY:      13,                                                                                                  // 31
  ESCAPE_KEY:     27,                                                                                                  // 32
  SPACE_KEY:      32,                                                                                                  // 33
  DELETE_KEY:     46                                                                                                   // 34
};/**                                                                                                                  // 35
 * @license Rangy, a cross-browser JavaScript range and selection library                                              // 36
 * http://code.google.com/p/rangy/                                                                                     // 37
 *                                                                                                                     // 38
 * Copyright 2011, Tim Down                                                                                            // 39
 * Licensed under the MIT license.                                                                                     // 40
 * Version: 1.2.2                                                                                                      // 41
 * Build date: 13 November 2011                                                                                        // 42
 */                                                                                                                    // 43
window['rangy'] = (function() {                                                                                        // 44
                                                                                                                       // 45
                                                                                                                       // 46
    var OBJECT = "object", FUNCTION = "function", UNDEFINED = "undefined";                                             // 47
                                                                                                                       // 48
    var domRangeProperties = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed",               // 49
        "commonAncestorContainer", "START_TO_START", "START_TO_END", "END_TO_START", "END_TO_END"];                    // 50
                                                                                                                       // 51
    var domRangeMethods = ["setStart", "setStartBefore", "setStartAfter", "setEnd", "setEndBefore",                    // 52
        "setEndAfter", "collapse", "selectNode", "selectNodeContents", "compareBoundaryPoints", "deleteContents",      // 53
        "extractContents", "cloneContents", "insertNode", "surroundContents", "cloneRange", "toString", "detach"];     // 54
                                                                                                                       // 55
    var textRangeProperties = ["boundingHeight", "boundingLeft", "boundingTop", "boundingWidth", "htmlText", "text"];  // 56
                                                                                                                       // 57
    // Subset of TextRange's full set of methods that we're interested in                                              // 58
    var textRangeMethods = ["collapse", "compareEndPoints", "duplicate", "getBookmark", "moveToBookmark",              // 59
        "moveToElementText", "parentElement", "pasteHTML", "select", "setEndPoint", "getBoundingClientRect"];          // 60
                                                                                                                       // 61
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 63
    // Trio of functions taken from Peter Michaux's article:                                                           // 64
    // http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting                           // 65
    function isHostMethod(o, p) {                                                                                      // 66
        var t = typeof o[p];                                                                                           // 67
        return t == FUNCTION || (!!(t == OBJECT && o[p])) || t == "unknown";                                           // 68
    }                                                                                                                  // 69
                                                                                                                       // 70
    function isHostObject(o, p) {                                                                                      // 71
        return !!(typeof o[p] == OBJECT && o[p]);                                                                      // 72
    }                                                                                                                  // 73
                                                                                                                       // 74
    function isHostProperty(o, p) {                                                                                    // 75
        return typeof o[p] != UNDEFINED;                                                                               // 76
    }                                                                                                                  // 77
                                                                                                                       // 78
    // Creates a convenience function to save verbose repeated calls to tests functions                                // 79
    function createMultiplePropertyTest(testFunc) {                                                                    // 80
        return function(o, props) {                                                                                    // 81
            var i = props.length;                                                                                      // 82
            while (i--) {                                                                                              // 83
                if (!testFunc(o, props[i])) {                                                                          // 84
                    return false;                                                                                      // 85
                }                                                                                                      // 86
            }                                                                                                          // 87
            return true;                                                                                               // 88
        };                                                                                                             // 89
    }                                                                                                                  // 90
                                                                                                                       // 91
    // Next trio of functions are a convenience to save verbose repeated calls to previous two functions               // 92
    var areHostMethods = createMultiplePropertyTest(isHostMethod);                                                     // 93
    var areHostObjects = createMultiplePropertyTest(isHostObject);                                                     // 94
    var areHostProperties = createMultiplePropertyTest(isHostProperty);                                                // 95
                                                                                                                       // 96
    function isTextRange(range) {                                                                                      // 97
        return range && areHostMethods(range, textRangeMethods) && areHostProperties(range, textRangeProperties);      // 98
    }                                                                                                                  // 99
                                                                                                                       // 100
    var api = {                                                                                                        // 101
        version: "1.2.2",                                                                                              // 102
        initialized: false,                                                                                            // 103
        supported: true,                                                                                               // 104
                                                                                                                       // 105
        util: {                                                                                                        // 106
            isHostMethod: isHostMethod,                                                                                // 107
            isHostObject: isHostObject,                                                                                // 108
            isHostProperty: isHostProperty,                                                                            // 109
            areHostMethods: areHostMethods,                                                                            // 110
            areHostObjects: areHostObjects,                                                                            // 111
            areHostProperties: areHostProperties,                                                                      // 112
            isTextRange: isTextRange                                                                                   // 113
        },                                                                                                             // 114
                                                                                                                       // 115
        features: {},                                                                                                  // 116
                                                                                                                       // 117
        modules: {},                                                                                                   // 118
        config: {                                                                                                      // 119
            alertOnWarn: false,                                                                                        // 120
            preferTextRange: false                                                                                     // 121
        }                                                                                                              // 122
    };                                                                                                                 // 123
                                                                                                                       // 124
    function fail(reason) {                                                                                            // 125
        window.alert("Rangy not supported in your browser. Reason: " + reason);                                        // 126
        api.initialized = true;                                                                                        // 127
        api.supported = false;                                                                                         // 128
    }                                                                                                                  // 129
                                                                                                                       // 130
    api.fail = fail;                                                                                                   // 131
                                                                                                                       // 132
    function warn(msg) {                                                                                               // 133
        var warningMessage = "Rangy warning: " + msg;                                                                  // 134
        if (api.config.alertOnWarn) {                                                                                  // 135
            window.alert(warningMessage);                                                                              // 136
        } else if (typeof window.console != UNDEFINED && typeof window.console.log != UNDEFINED) {                     // 137
            window.console.log(warningMessage);                                                                        // 138
        }                                                                                                              // 139
    }                                                                                                                  // 140
                                                                                                                       // 141
    api.warn = warn;                                                                                                   // 142
                                                                                                                       // 143
    if ({}.hasOwnProperty) {                                                                                           // 144
        api.util.extend = function(o, props) {                                                                         // 145
            for (var i in props) {                                                                                     // 146
                if (props.hasOwnProperty(i)) {                                                                         // 147
                    o[i] = props[i];                                                                                   // 148
                }                                                                                                      // 149
            }                                                                                                          // 150
        };                                                                                                             // 151
    } else {                                                                                                           // 152
        fail("hasOwnProperty not supported");                                                                          // 153
    }                                                                                                                  // 154
                                                                                                                       // 155
    var initListeners = [];                                                                                            // 156
    var moduleInitializers = [];                                                                                       // 157
                                                                                                                       // 158
    // Initialization                                                                                                  // 159
    function init() {                                                                                                  // 160
        if (api.initialized) {                                                                                         // 161
            return;                                                                                                    // 162
        }                                                                                                              // 163
        var testRange;                                                                                                 // 164
        var implementsDomRange = false, implementsTextRange = false;                                                   // 165
                                                                                                                       // 166
        // First, perform basic feature tests                                                                          // 167
                                                                                                                       // 168
        if (isHostMethod(document, "createRange")) {                                                                   // 169
            testRange = document.createRange();                                                                        // 170
            if (areHostMethods(testRange, domRangeMethods) && areHostProperties(testRange, domRangeProperties)) {      // 171
                implementsDomRange = true;                                                                             // 172
            }                                                                                                          // 173
            testRange.detach();                                                                                        // 174
        }                                                                                                              // 175
                                                                                                                       // 176
        var body = isHostObject(document, "body") ? document.body : document.getElementsByTagName("body")[0];          // 177
                                                                                                                       // 178
        if (body && isHostMethod(body, "createTextRange")) {                                                           // 179
            testRange = body.createTextRange();                                                                        // 180
            if (isTextRange(testRange)) {                                                                              // 181
                implementsTextRange = true;                                                                            // 182
            }                                                                                                          // 183
        }                                                                                                              // 184
                                                                                                                       // 185
        if (!implementsDomRange && !implementsTextRange) {                                                             // 186
            fail("Neither Range nor TextRange are implemented");                                                       // 187
        }                                                                                                              // 188
                                                                                                                       // 189
        api.initialized = true;                                                                                        // 190
        api.features = {                                                                                               // 191
            implementsDomRange: implementsDomRange,                                                                    // 192
            implementsTextRange: implementsTextRange                                                                   // 193
        };                                                                                                             // 194
                                                                                                                       // 195
        // Initialize modules and call init listeners                                                                  // 196
        var allListeners = moduleInitializers.concat(initListeners);                                                   // 197
        for (var i = 0, len = allListeners.length; i < len; ++i) {                                                     // 198
            try {                                                                                                      // 199
                allListeners[i](api);                                                                                  // 200
            } catch (ex) {                                                                                             // 201
                if (isHostObject(window, "console") && isHostMethod(window.console, "log")) {                          // 202
                    window.console.log("Init listener threw an exception. Continuing.", ex);                           // 203
                }                                                                                                      // 204
                                                                                                                       // 205
            }                                                                                                          // 206
        }                                                                                                              // 207
    }                                                                                                                  // 208
                                                                                                                       // 209
    // Allow external scripts to initialize this library in case it's loaded after the document has loaded             // 210
    api.init = init;                                                                                                   // 211
                                                                                                                       // 212
    // Execute listener immediately if already initialized                                                             // 213
    api.addInitListener = function(listener) {                                                                         // 214
        if (api.initialized) {                                                                                         // 215
            listener(api);                                                                                             // 216
        } else {                                                                                                       // 217
            initListeners.push(listener);                                                                              // 218
        }                                                                                                              // 219
    };                                                                                                                 // 220
                                                                                                                       // 221
    var createMissingNativeApiListeners = [];                                                                          // 222
                                                                                                                       // 223
    api.addCreateMissingNativeApiListener = function(listener) {                                                       // 224
        createMissingNativeApiListeners.push(listener);                                                                // 225
    };                                                                                                                 // 226
                                                                                                                       // 227
    function createMissingNativeApi(win) {                                                                             // 228
        win = win || window;                                                                                           // 229
        init();                                                                                                        // 230
                                                                                                                       // 231
        // Notify listeners                                                                                            // 232
        for (var i = 0, len = createMissingNativeApiListeners.length; i < len; ++i) {                                  // 233
            createMissingNativeApiListeners[i](win);                                                                   // 234
        }                                                                                                              // 235
    }                                                                                                                  // 236
                                                                                                                       // 237
    api.createMissingNativeApi = createMissingNativeApi;                                                               // 238
                                                                                                                       // 239
    /**                                                                                                                // 240
     * @constructor                                                                                                    // 241
     */                                                                                                                // 242
    function Module(name) {                                                                                            // 243
        this.name = name;                                                                                              // 244
        this.initialized = false;                                                                                      // 245
        this.supported = false;                                                                                        // 246
    }                                                                                                                  // 247
                                                                                                                       // 248
    Module.prototype.fail = function(reason) {                                                                         // 249
        this.initialized = true;                                                                                       // 250
        this.supported = false;                                                                                        // 251
                                                                                                                       // 252
        throw new Error("Module '" + this.name + "' failed to load: " + reason);                                       // 253
    };                                                                                                                 // 254
                                                                                                                       // 255
    Module.prototype.warn = function(msg) {                                                                            // 256
        api.warn("Module " + this.name + ": " + msg);                                                                  // 257
    };                                                                                                                 // 258
                                                                                                                       // 259
    Module.prototype.createError = function(msg) {                                                                     // 260
        return new Error("Error in Rangy " + this.name + " module: " + msg);                                           // 261
    };                                                                                                                 // 262
                                                                                                                       // 263
    api.createModule = function(name, initFunc) {                                                                      // 264
        var module = new Module(name);                                                                                 // 265
        api.modules[name] = module;                                                                                    // 266
                                                                                                                       // 267
        moduleInitializers.push(function(api) {                                                                        // 268
            initFunc(api, module);                                                                                     // 269
            module.initialized = true;                                                                                 // 270
            module.supported = true;                                                                                   // 271
        });                                                                                                            // 272
    };                                                                                                                 // 273
                                                                                                                       // 274
    api.requireModules = function(modules) {                                                                           // 275
        for (var i = 0, len = modules.length, module, moduleName; i < len; ++i) {                                      // 276
            moduleName = modules[i];                                                                                   // 277
            module = api.modules[moduleName];                                                                          // 278
            if (!module || !(module instanceof Module)) {                                                              // 279
                throw new Error("Module '" + moduleName + "' not found");                                              // 280
            }                                                                                                          // 281
            if (!module.supported) {                                                                                   // 282
                throw new Error("Module '" + moduleName + "' not supported");                                          // 283
            }                                                                                                          // 284
        }                                                                                                              // 285
    };                                                                                                                 // 286
                                                                                                                       // 287
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 289
    // Wait for document to load before running tests                                                                  // 290
                                                                                                                       // 291
    var docReady = false;                                                                                              // 292
                                                                                                                       // 293
    var loadHandler = function(e) {                                                                                    // 294
                                                                                                                       // 295
        if (!docReady) {                                                                                               // 296
            docReady = true;                                                                                           // 297
            if (!api.initialized) {                                                                                    // 298
                init();                                                                                                // 299
            }                                                                                                          // 300
        }                                                                                                              // 301
    };                                                                                                                 // 302
                                                                                                                       // 303
    // Test whether we have window and document objects that we will need                                              // 304
    if (typeof window == UNDEFINED) {                                                                                  // 305
        fail("No window found");                                                                                       // 306
        return;                                                                                                        // 307
    }                                                                                                                  // 308
    if (typeof document == UNDEFINED) {                                                                                // 309
        fail("No document found");                                                                                     // 310
        return;                                                                                                        // 311
    }                                                                                                                  // 312
                                                                                                                       // 313
    if (isHostMethod(document, "addEventListener")) {                                                                  // 314
        document.addEventListener("DOMContentLoaded", loadHandler, false);                                             // 315
    }                                                                                                                  // 316
                                                                                                                       // 317
    // Add a fallback in case the DOMContentLoaded event isn't supported                                               // 318
    if (isHostMethod(window, "addEventListener")) {                                                                    // 319
        window.addEventListener("load", loadHandler, false);                                                           // 320
    } else if (isHostMethod(window, "attachEvent")) {                                                                  // 321
        window.attachEvent("onload", loadHandler);                                                                     // 322
    } else {                                                                                                           // 323
        fail("Window does not have required addEventListener or attachEvent method");                                  // 324
    }                                                                                                                  // 325
                                                                                                                       // 326
    return api;                                                                                                        // 327
})();                                                                                                                  // 328
rangy.createModule("DomUtil", function(api, module) {                                                                  // 329
                                                                                                                       // 330
    var UNDEF = "undefined";                                                                                           // 331
    var util = api.util;                                                                                               // 332
                                                                                                                       // 333
    // Perform feature tests                                                                                           // 334
    if (!util.areHostMethods(document, ["createDocumentFragment", "createElement", "createTextNode"])) {               // 335
        module.fail("document missing a Node creation method");                                                        // 336
    }                                                                                                                  // 337
                                                                                                                       // 338
    if (!util.isHostMethod(document, "getElementsByTagName")) {                                                        // 339
        module.fail("document missing getElementsByTagName method");                                                   // 340
    }                                                                                                                  // 341
                                                                                                                       // 342
    var el = document.createElement("div");                                                                            // 343
    if (!util.areHostMethods(el, ["insertBefore", "appendChild", "cloneNode"] ||                                       // 344
            !util.areHostObjects(el, ["previousSibling", "nextSibling", "childNodes", "parentNode"]))) {               // 345
        module.fail("Incomplete Element implementation");                                                              // 346
    }                                                                                                                  // 347
                                                                                                                       // 348
    // innerHTML is required for Range's createContextualFragment method                                               // 349
    if (!util.isHostProperty(el, "innerHTML")) {                                                                       // 350
        module.fail("Element is missing innerHTML property");                                                          // 351
    }                                                                                                                  // 352
                                                                                                                       // 353
    var textNode = document.createTextNode("test");                                                                    // 354
    if (!util.areHostMethods(textNode, ["splitText", "deleteData", "insertData", "appendData", "cloneNode"] ||         // 355
            !util.areHostObjects(el, ["previousSibling", "nextSibling", "childNodes", "parentNode"]) ||                // 356
            !util.areHostProperties(textNode, ["data"]))) {                                                            // 357
        module.fail("Incomplete Text Node implementation");                                                            // 358
    }                                                                                                                  // 359
                                                                                                                       // 360
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 362
    // Removed use of indexOf because of a bizarre bug in Opera that is thrown in one of the Acid3 tests. I haven't been
    // able to replicate it outside of the test. The bug is that indexOf returns -1 when called on an Array that       // 364
    // contains just the document as a single element and the value searched for is the document.                      // 365
    var arrayContains = /*Array.prototype.indexOf ?                                                                    // 366
        function(arr, val) {                                                                                           // 367
            return arr.indexOf(val) > -1;                                                                              // 368
        }:*/                                                                                                           // 369
                                                                                                                       // 370
        function(arr, val) {                                                                                           // 371
            var i = arr.length;                                                                                        // 372
            while (i--) {                                                                                              // 373
                if (arr[i] === val) {                                                                                  // 374
                    return true;                                                                                       // 375
                }                                                                                                      // 376
            }                                                                                                          // 377
            return false;                                                                                              // 378
        };                                                                                                             // 379
                                                                                                                       // 380
    // Opera 11 puts HTML elements in the null namespace, it seems, and IE 7 has undefined namespaceURI                // 381
    function isHtmlNamespace(node) {                                                                                   // 382
        var ns;                                                                                                        // 383
        return typeof node.namespaceURI == UNDEF || ((ns = node.namespaceURI) === null || ns == "http://www.w3.org/1999/xhtml");
    }                                                                                                                  // 385
                                                                                                                       // 386
    function parentElement(node) {                                                                                     // 387
        var parent = node.parentNode;                                                                                  // 388
        return (parent.nodeType == 1) ? parent : null;                                                                 // 389
    }                                                                                                                  // 390
                                                                                                                       // 391
    function getNodeIndex(node) {                                                                                      // 392
        var i = 0;                                                                                                     // 393
        while( (node = node.previousSibling) ) {                                                                       // 394
            i++;                                                                                                       // 395
        }                                                                                                              // 396
        return i;                                                                                                      // 397
    }                                                                                                                  // 398
                                                                                                                       // 399
    function getNodeLength(node) {                                                                                     // 400
        var childNodes;                                                                                                // 401
        return isCharacterDataNode(node) ? node.length : ((childNodes = node.childNodes) ? childNodes.length : 0);     // 402
    }                                                                                                                  // 403
                                                                                                                       // 404
    function getCommonAncestor(node1, node2) {                                                                         // 405
        var ancestors = [], n;                                                                                         // 406
        for (n = node1; n; n = n.parentNode) {                                                                         // 407
            ancestors.push(n);                                                                                         // 408
        }                                                                                                              // 409
                                                                                                                       // 410
        for (n = node2; n; n = n.parentNode) {                                                                         // 411
            if (arrayContains(ancestors, n)) {                                                                         // 412
                return n;                                                                                              // 413
            }                                                                                                          // 414
        }                                                                                                              // 415
                                                                                                                       // 416
        return null;                                                                                                   // 417
    }                                                                                                                  // 418
                                                                                                                       // 419
    function isAncestorOf(ancestor, descendant, selfIsAncestor) {                                                      // 420
        var n = selfIsAncestor ? descendant : descendant.parentNode;                                                   // 421
        while (n) {                                                                                                    // 422
            if (n === ancestor) {                                                                                      // 423
                return true;                                                                                           // 424
            } else {                                                                                                   // 425
                n = n.parentNode;                                                                                      // 426
            }                                                                                                          // 427
        }                                                                                                              // 428
        return false;                                                                                                  // 429
    }                                                                                                                  // 430
                                                                                                                       // 431
    function getClosestAncestorIn(node, ancestor, selfIsAncestor) {                                                    // 432
        var p, n = selfIsAncestor ? node : node.parentNode;                                                            // 433
        while (n) {                                                                                                    // 434
            p = n.parentNode;                                                                                          // 435
            if (p === ancestor) {                                                                                      // 436
                return n;                                                                                              // 437
            }                                                                                                          // 438
            n = p;                                                                                                     // 439
        }                                                                                                              // 440
        return null;                                                                                                   // 441
    }                                                                                                                  // 442
                                                                                                                       // 443
    function isCharacterDataNode(node) {                                                                               // 444
        var t = node.nodeType;                                                                                         // 445
        return t == 3 || t == 4 || t == 8 ; // Text, CDataSection or Comment                                           // 446
    }                                                                                                                  // 447
                                                                                                                       // 448
    function insertAfter(node, precedingNode) {                                                                        // 449
        var nextNode = precedingNode.nextSibling, parent = precedingNode.parentNode;                                   // 450
        if (nextNode) {                                                                                                // 451
            parent.insertBefore(node, nextNode);                                                                       // 452
        } else {                                                                                                       // 453
            parent.appendChild(node);                                                                                  // 454
        }                                                                                                              // 455
        return node;                                                                                                   // 456
    }                                                                                                                  // 457
                                                                                                                       // 458
    // Note that we cannot use splitText() because it is bugridden in IE 9.                                            // 459
    function splitDataNode(node, index) {                                                                              // 460
        var newNode = node.cloneNode(false);                                                                           // 461
        newNode.deleteData(0, index);                                                                                  // 462
        node.deleteData(index, node.length - index);                                                                   // 463
        insertAfter(newNode, node);                                                                                    // 464
        return newNode;                                                                                                // 465
    }                                                                                                                  // 466
                                                                                                                       // 467
    function getDocument(node) {                                                                                       // 468
        if (node.nodeType == 9) {                                                                                      // 469
            return node;                                                                                               // 470
        } else if (typeof node.ownerDocument != UNDEF) {                                                               // 471
            return node.ownerDocument;                                                                                 // 472
        } else if (typeof node.document != UNDEF) {                                                                    // 473
            return node.document;                                                                                      // 474
        } else if (node.parentNode) {                                                                                  // 475
            return getDocument(node.parentNode);                                                                       // 476
        } else {                                                                                                       // 477
            throw new Error("getDocument: no document found for node");                                                // 478
        }                                                                                                              // 479
    }                                                                                                                  // 480
                                                                                                                       // 481
    function getWindow(node) {                                                                                         // 482
        var doc = getDocument(node);                                                                                   // 483
        if (typeof doc.defaultView != UNDEF) {                                                                         // 484
            return doc.defaultView;                                                                                    // 485
        } else if (typeof doc.parentWindow != UNDEF) {                                                                 // 486
            return doc.parentWindow;                                                                                   // 487
        } else {                                                                                                       // 488
            throw new Error("Cannot get a window object for node");                                                    // 489
        }                                                                                                              // 490
    }                                                                                                                  // 491
                                                                                                                       // 492
    function getIframeDocument(iframeEl) {                                                                             // 493
        if (typeof iframeEl.contentDocument != UNDEF) {                                                                // 494
            return iframeEl.contentDocument;                                                                           // 495
        } else if (typeof iframeEl.contentWindow != UNDEF) {                                                           // 496
            return iframeEl.contentWindow.document;                                                                    // 497
        } else {                                                                                                       // 498
            throw new Error("getIframeWindow: No Document object found for iframe element");                           // 499
        }                                                                                                              // 500
    }                                                                                                                  // 501
                                                                                                                       // 502
    function getIframeWindow(iframeEl) {                                                                               // 503
        if (typeof iframeEl.contentWindow != UNDEF) {                                                                  // 504
            return iframeEl.contentWindow;                                                                             // 505
        } else if (typeof iframeEl.contentDocument != UNDEF) {                                                         // 506
            return iframeEl.contentDocument.defaultView;                                                               // 507
        } else {                                                                                                       // 508
            throw new Error("getIframeWindow: No Window object found for iframe element");                             // 509
        }                                                                                                              // 510
    }                                                                                                                  // 511
                                                                                                                       // 512
    function getBody(doc) {                                                                                            // 513
        return util.isHostObject(doc, "body") ? doc.body : doc.getElementsByTagName("body")[0];                        // 514
    }                                                                                                                  // 515
                                                                                                                       // 516
    function getRootContainer(node) {                                                                                  // 517
        var parent;                                                                                                    // 518
        while ( (parent = node.parentNode) ) {                                                                         // 519
            node = parent;                                                                                             // 520
        }                                                                                                              // 521
        return node;                                                                                                   // 522
    }                                                                                                                  // 523
                                                                                                                       // 524
    function comparePoints(nodeA, offsetA, nodeB, offsetB) {                                                           // 525
        // See http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Comparing                    // 526
        var nodeC, root, childA, childB, n;                                                                            // 527
        if (nodeA == nodeB) {                                                                                          // 528
                                                                                                                       // 529
            // Case 1: nodes are the same                                                                              // 530
            return offsetA === offsetB ? 0 : (offsetA < offsetB) ? -1 : 1;                                             // 531
        } else if ( (nodeC = getClosestAncestorIn(nodeB, nodeA, true)) ) {                                             // 532
                                                                                                                       // 533
            // Case 2: node C (container B or an ancestor) is a child node of A                                        // 534
            return offsetA <= getNodeIndex(nodeC) ? -1 : 1;                                                            // 535
        } else if ( (nodeC = getClosestAncestorIn(nodeA, nodeB, true)) ) {                                             // 536
                                                                                                                       // 537
            // Case 3: node C (container A or an ancestor) is a child node of B                                        // 538
            return getNodeIndex(nodeC) < offsetB  ? -1 : 1;                                                            // 539
        } else {                                                                                                       // 540
                                                                                                                       // 541
            // Case 4: containers are siblings or descendants of siblings                                              // 542
            root = getCommonAncestor(nodeA, nodeB);                                                                    // 543
            childA = (nodeA === root) ? root : getClosestAncestorIn(nodeA, root, true);                                // 544
            childB = (nodeB === root) ? root : getClosestAncestorIn(nodeB, root, true);                                // 545
                                                                                                                       // 546
            if (childA === childB) {                                                                                   // 547
                // This shouldn't be possible                                                                          // 548
                                                                                                                       // 549
                throw new Error("comparePoints got to case 4 and childA and childB are the same!");                    // 550
            } else {                                                                                                   // 551
                n = root.firstChild;                                                                                   // 552
                while (n) {                                                                                            // 553
                    if (n === childA) {                                                                                // 554
                        return -1;                                                                                     // 555
                    } else if (n === childB) {                                                                         // 556
                        return 1;                                                                                      // 557
                    }                                                                                                  // 558
                    n = n.nextSibling;                                                                                 // 559
                }                                                                                                      // 560
                throw new Error("Should not be here!");                                                                // 561
            }                                                                                                          // 562
        }                                                                                                              // 563
    }                                                                                                                  // 564
                                                                                                                       // 565
    function fragmentFromNodeChildren(node) {                                                                          // 566
        var fragment = getDocument(node).createDocumentFragment(), child;                                              // 567
        while ( (child = node.firstChild) ) {                                                                          // 568
            fragment.appendChild(child);                                                                               // 569
        }                                                                                                              // 570
        return fragment;                                                                                               // 571
    }                                                                                                                  // 572
                                                                                                                       // 573
    function inspectNode(node) {                                                                                       // 574
        if (!node) {                                                                                                   // 575
            return "[No node]";                                                                                        // 576
        }                                                                                                              // 577
        if (isCharacterDataNode(node)) {                                                                               // 578
            return '"' + node.data + '"';                                                                              // 579
        } else if (node.nodeType == 1) {                                                                               // 580
            var idAttr = node.id ? ' id="' + node.id + '"' : "";                                                       // 581
            return "<" + node.nodeName + idAttr + ">[" + node.childNodes.length + "]";                                 // 582
        } else {                                                                                                       // 583
            return node.nodeName;                                                                                      // 584
        }                                                                                                              // 585
    }                                                                                                                  // 586
                                                                                                                       // 587
    /**                                                                                                                // 588
     * @constructor                                                                                                    // 589
     */                                                                                                                // 590
    function NodeIterator(root) {                                                                                      // 591
        this.root = root;                                                                                              // 592
        this._next = root;                                                                                             // 593
    }                                                                                                                  // 594
                                                                                                                       // 595
    NodeIterator.prototype = {                                                                                         // 596
        _current: null,                                                                                                // 597
                                                                                                                       // 598
        hasNext: function() {                                                                                          // 599
            return !!this._next;                                                                                       // 600
        },                                                                                                             // 601
                                                                                                                       // 602
        next: function() {                                                                                             // 603
            var n = this._current = this._next;                                                                        // 604
            var child, next;                                                                                           // 605
            if (this._current) {                                                                                       // 606
                child = n.firstChild;                                                                                  // 607
                if (child) {                                                                                           // 608
                    this._next = child;                                                                                // 609
                } else {                                                                                               // 610
                    next = null;                                                                                       // 611
                    while ((n !== this.root) && !(next = n.nextSibling)) {                                             // 612
                        n = n.parentNode;                                                                              // 613
                    }                                                                                                  // 614
                    this._next = next;                                                                                 // 615
                }                                                                                                      // 616
            }                                                                                                          // 617
            return this._current;                                                                                      // 618
        },                                                                                                             // 619
                                                                                                                       // 620
        detach: function() {                                                                                           // 621
            this._current = this._next = this.root = null;                                                             // 622
        }                                                                                                              // 623
    };                                                                                                                 // 624
                                                                                                                       // 625
    function createIterator(root) {                                                                                    // 626
        return new NodeIterator(root);                                                                                 // 627
    }                                                                                                                  // 628
                                                                                                                       // 629
    /**                                                                                                                // 630
     * @constructor                                                                                                    // 631
     */                                                                                                                // 632
    function DomPosition(node, offset) {                                                                               // 633
        this.node = node;                                                                                              // 634
        this.offset = offset;                                                                                          // 635
    }                                                                                                                  // 636
                                                                                                                       // 637
    DomPosition.prototype = {                                                                                          // 638
        equals: function(pos) {                                                                                        // 639
            return this.node === pos.node & this.offset == pos.offset;                                                 // 640
        },                                                                                                             // 641
                                                                                                                       // 642
        inspect: function() {                                                                                          // 643
            return "[DomPosition(" + inspectNode(this.node) + ":" + this.offset + ")]";                                // 644
        }                                                                                                              // 645
    };                                                                                                                 // 646
                                                                                                                       // 647
    /**                                                                                                                // 648
     * @constructor                                                                                                    // 649
     */                                                                                                                // 650
    function DOMException(codeName) {                                                                                  // 651
        this.code = this[codeName];                                                                                    // 652
        this.codeName = codeName;                                                                                      // 653
        this.message = "DOMException: " + this.codeName;                                                               // 654
    }                                                                                                                  // 655
                                                                                                                       // 656
    DOMException.prototype = {                                                                                         // 657
        INDEX_SIZE_ERR: 1,                                                                                             // 658
        HIERARCHY_REQUEST_ERR: 3,                                                                                      // 659
        WRONG_DOCUMENT_ERR: 4,                                                                                         // 660
        NO_MODIFICATION_ALLOWED_ERR: 7,                                                                                // 661
        NOT_FOUND_ERR: 8,                                                                                              // 662
        NOT_SUPPORTED_ERR: 9,                                                                                          // 663
        INVALID_STATE_ERR: 11                                                                                          // 664
    };                                                                                                                 // 665
                                                                                                                       // 666
    DOMException.prototype.toString = function() {                                                                     // 667
        return this.message;                                                                                           // 668
    };                                                                                                                 // 669
                                                                                                                       // 670
    api.dom = {                                                                                                        // 671
        arrayContains: arrayContains,                                                                                  // 672
        isHtmlNamespace: isHtmlNamespace,                                                                              // 673
        parentElement: parentElement,                                                                                  // 674
        getNodeIndex: getNodeIndex,                                                                                    // 675
        getNodeLength: getNodeLength,                                                                                  // 676
        getCommonAncestor: getCommonAncestor,                                                                          // 677
        isAncestorOf: isAncestorOf,                                                                                    // 678
        getClosestAncestorIn: getClosestAncestorIn,                                                                    // 679
        isCharacterDataNode: isCharacterDataNode,                                                                      // 680
        insertAfter: insertAfter,                                                                                      // 681
        splitDataNode: splitDataNode,                                                                                  // 682
        getDocument: getDocument,                                                                                      // 683
        getWindow: getWindow,                                                                                          // 684
        getIframeWindow: getIframeWindow,                                                                              // 685
        getIframeDocument: getIframeDocument,                                                                          // 686
        getBody: getBody,                                                                                              // 687
        getRootContainer: getRootContainer,                                                                            // 688
        comparePoints: comparePoints,                                                                                  // 689
        inspectNode: inspectNode,                                                                                      // 690
        fragmentFromNodeChildren: fragmentFromNodeChildren,                                                            // 691
        createIterator: createIterator,                                                                                // 692
        DomPosition: DomPosition                                                                                       // 693
    };                                                                                                                 // 694
                                                                                                                       // 695
    api.DOMException = DOMException;                                                                                   // 696
});rangy.createModule("DomRange", function(api, module) {                                                              // 697
    api.requireModules( ["DomUtil"] );                                                                                 // 698
                                                                                                                       // 699
                                                                                                                       // 700
    var dom = api.dom;                                                                                                 // 701
    var DomPosition = dom.DomPosition;                                                                                 // 702
    var DOMException = api.DOMException;                                                                               // 703
                                                                                                                       // 704
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 706
    // Utility functions                                                                                               // 707
                                                                                                                       // 708
    function isNonTextPartiallySelected(node, range) {                                                                 // 709
        return (node.nodeType != 3) &&                                                                                 // 710
               (dom.isAncestorOf(node, range.startContainer, true) || dom.isAncestorOf(node, range.endContainer, true));
    }                                                                                                                  // 712
                                                                                                                       // 713
    function getRangeDocument(range) {                                                                                 // 714
        return dom.getDocument(range.startContainer);                                                                  // 715
    }                                                                                                                  // 716
                                                                                                                       // 717
    function dispatchEvent(range, type, args) {                                                                        // 718
        var listeners = range._listeners[type];                                                                        // 719
        if (listeners) {                                                                                               // 720
            for (var i = 0, len = listeners.length; i < len; ++i) {                                                    // 721
                listeners[i].call(range, {target: range, args: args});                                                 // 722
            }                                                                                                          // 723
        }                                                                                                              // 724
    }                                                                                                                  // 725
                                                                                                                       // 726
    function getBoundaryBeforeNode(node) {                                                                             // 727
        return new DomPosition(node.parentNode, dom.getNodeIndex(node));                                               // 728
    }                                                                                                                  // 729
                                                                                                                       // 730
    function getBoundaryAfterNode(node) {                                                                              // 731
        return new DomPosition(node.parentNode, dom.getNodeIndex(node) + 1);                                           // 732
    }                                                                                                                  // 733
                                                                                                                       // 734
    function insertNodeAtPosition(node, n, o) {                                                                        // 735
        var firstNodeInserted = node.nodeType == 11 ? node.firstChild : node;                                          // 736
        if (dom.isCharacterDataNode(n)) {                                                                              // 737
            if (o == n.length) {                                                                                       // 738
                dom.insertAfter(node, n);                                                                              // 739
            } else {                                                                                                   // 740
                n.parentNode.insertBefore(node, o == 0 ? n : dom.splitDataNode(n, o));                                 // 741
            }                                                                                                          // 742
        } else if (o >= n.childNodes.length) {                                                                         // 743
            n.appendChild(node);                                                                                       // 744
        } else {                                                                                                       // 745
            n.insertBefore(node, n.childNodes[o]);                                                                     // 746
        }                                                                                                              // 747
        return firstNodeInserted;                                                                                      // 748
    }                                                                                                                  // 749
                                                                                                                       // 750
    function cloneSubtree(iterator) {                                                                                  // 751
        var partiallySelected;                                                                                         // 752
        for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {
            partiallySelected = iterator.isPartiallySelectedSubtree();                                                 // 754
                                                                                                                       // 755
            node = node.cloneNode(!partiallySelected);                                                                 // 756
            if (partiallySelected) {                                                                                   // 757
                subIterator = iterator.getSubtreeIterator();                                                           // 758
                node.appendChild(cloneSubtree(subIterator));                                                           // 759
                subIterator.detach(true);                                                                              // 760
            }                                                                                                          // 761
                                                                                                                       // 762
            if (node.nodeType == 10) { // DocumentType                                                                 // 763
                throw new DOMException("HIERARCHY_REQUEST_ERR");                                                       // 764
            }                                                                                                          // 765
            frag.appendChild(node);                                                                                    // 766
        }                                                                                                              // 767
        return frag;                                                                                                   // 768
    }                                                                                                                  // 769
                                                                                                                       // 770
    function iterateSubtree(rangeIterator, func, iteratorState) {                                                      // 771
        var it, n;                                                                                                     // 772
        iteratorState = iteratorState || { stop: false };                                                              // 773
        for (var node, subRangeIterator; node = rangeIterator.next(); ) {                                              // 774
            //log.debug("iterateSubtree, partially selected: " + rangeIterator.isPartiallySelectedSubtree(), nodeToString(node));
            if (rangeIterator.isPartiallySelectedSubtree()) {                                                          // 776
                // The node is partially selected by the Range, so we can use a new RangeIterator on the portion of the
                // node selected by the Range.                                                                         // 778
                if (func(node) === false) {                                                                            // 779
                    iteratorState.stop = true;                                                                         // 780
                    return;                                                                                            // 781
                } else {                                                                                               // 782
                    subRangeIterator = rangeIterator.getSubtreeIterator();                                             // 783
                    iterateSubtree(subRangeIterator, func, iteratorState);                                             // 784
                    subRangeIterator.detach(true);                                                                     // 785
                    if (iteratorState.stop) {                                                                          // 786
                        return;                                                                                        // 787
                    }                                                                                                  // 788
                }                                                                                                      // 789
            } else {                                                                                                   // 790
                // The whole node is selected, so we can use efficient DOM iteration to iterate over the node and its  // 791
                // descendant                                                                                          // 792
                it = dom.createIterator(node);                                                                         // 793
                while ( (n = it.next()) ) {                                                                            // 794
                    if (func(n) === false) {                                                                           // 795
                        iteratorState.stop = true;                                                                     // 796
                        return;                                                                                        // 797
                    }                                                                                                  // 798
                }                                                                                                      // 799
            }                                                                                                          // 800
        }                                                                                                              // 801
    }                                                                                                                  // 802
                                                                                                                       // 803
    function deleteSubtree(iterator) {                                                                                 // 804
        var subIterator;                                                                                               // 805
        while (iterator.next()) {                                                                                      // 806
            if (iterator.isPartiallySelectedSubtree()) {                                                               // 807
                subIterator = iterator.getSubtreeIterator();                                                           // 808
                deleteSubtree(subIterator);                                                                            // 809
                subIterator.detach(true);                                                                              // 810
            } else {                                                                                                   // 811
                iterator.remove();                                                                                     // 812
            }                                                                                                          // 813
        }                                                                                                              // 814
    }                                                                                                                  // 815
                                                                                                                       // 816
    function extractSubtree(iterator) {                                                                                // 817
                                                                                                                       // 818
        for (var node, frag = getRangeDocument(iterator.range).createDocumentFragment(), subIterator; node = iterator.next(); ) {
                                                                                                                       // 820
                                                                                                                       // 821
            if (iterator.isPartiallySelectedSubtree()) {                                                               // 822
                node = node.cloneNode(false);                                                                          // 823
                subIterator = iterator.getSubtreeIterator();                                                           // 824
                node.appendChild(extractSubtree(subIterator));                                                         // 825
                subIterator.detach(true);                                                                              // 826
            } else {                                                                                                   // 827
                iterator.remove();                                                                                     // 828
            }                                                                                                          // 829
            if (node.nodeType == 10) { // DocumentType                                                                 // 830
                throw new DOMException("HIERARCHY_REQUEST_ERR");                                                       // 831
            }                                                                                                          // 832
            frag.appendChild(node);                                                                                    // 833
        }                                                                                                              // 834
        return frag;                                                                                                   // 835
    }                                                                                                                  // 836
                                                                                                                       // 837
    function getNodesInRange(range, nodeTypes, filter) {                                                               // 838
        //log.info("getNodesInRange, " + nodeTypes.join(","));                                                         // 839
        var filterNodeTypes = !!(nodeTypes && nodeTypes.length), regex;                                                // 840
        var filterExists = !!filter;                                                                                   // 841
        if (filterNodeTypes) {                                                                                         // 842
            regex = new RegExp("^(" + nodeTypes.join("|") + ")$");                                                     // 843
        }                                                                                                              // 844
                                                                                                                       // 845
        var nodes = [];                                                                                                // 846
        iterateSubtree(new RangeIterator(range, false), function(node) {                                               // 847
            if ((!filterNodeTypes || regex.test(node.nodeType)) && (!filterExists || filter(node))) {                  // 848
                nodes.push(node);                                                                                      // 849
            }                                                                                                          // 850
        });                                                                                                            // 851
        return nodes;                                                                                                  // 852
    }                                                                                                                  // 853
                                                                                                                       // 854
    function inspect(range) {                                                                                          // 855
        var name = (typeof range.getName == "undefined") ? "Range" : range.getName();                                  // 856
        return "[" + name + "(" + dom.inspectNode(range.startContainer) + ":" + range.startOffset + ", " +             // 857
                dom.inspectNode(range.endContainer) + ":" + range.endOffset + ")]";                                    // 858
    }                                                                                                                  // 859
                                                                                                                       // 860
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 862
    // RangeIterator code partially borrows from IERange by Tim Ryan (http://github.com/timcameronryan/IERange)        // 863
                                                                                                                       // 864
    /**                                                                                                                // 865
     * @constructor                                                                                                    // 866
     */                                                                                                                // 867
    function RangeIterator(range, clonePartiallySelectedTextNodes) {                                                   // 868
        this.range = range;                                                                                            // 869
        this.clonePartiallySelectedTextNodes = clonePartiallySelectedTextNodes;                                        // 870
                                                                                                                       // 871
                                                                                                                       // 872
                                                                                                                       // 873
        if (!range.collapsed) {                                                                                        // 874
            this.sc = range.startContainer;                                                                            // 875
            this.so = range.startOffset;                                                                               // 876
            this.ec = range.endContainer;                                                                              // 877
            this.eo = range.endOffset;                                                                                 // 878
            var root = range.commonAncestorContainer;                                                                  // 879
                                                                                                                       // 880
            if (this.sc === this.ec && dom.isCharacterDataNode(this.sc)) {                                             // 881
                this.isSingleCharacterDataNode = true;                                                                 // 882
                this._first = this._last = this._next = this.sc;                                                       // 883
            } else {                                                                                                   // 884
                this._first = this._next = (this.sc === root && !dom.isCharacterDataNode(this.sc)) ?                   // 885
                    this.sc.childNodes[this.so] : dom.getClosestAncestorIn(this.sc, root, true);                       // 886
                this._last = (this.ec === root && !dom.isCharacterDataNode(this.ec)) ?                                 // 887
                    this.ec.childNodes[this.eo - 1] : dom.getClosestAncestorIn(this.ec, root, true);                   // 888
            }                                                                                                          // 889
                                                                                                                       // 890
        }                                                                                                              // 891
    }                                                                                                                  // 892
                                                                                                                       // 893
    RangeIterator.prototype = {                                                                                        // 894
        _current: null,                                                                                                // 895
        _next: null,                                                                                                   // 896
        _first: null,                                                                                                  // 897
        _last: null,                                                                                                   // 898
        isSingleCharacterDataNode: false,                                                                              // 899
                                                                                                                       // 900
        reset: function() {                                                                                            // 901
            this._current = null;                                                                                      // 902
            this._next = this._first;                                                                                  // 903
        },                                                                                                             // 904
                                                                                                                       // 905
        hasNext: function() {                                                                                          // 906
            return !!this._next;                                                                                       // 907
        },                                                                                                             // 908
                                                                                                                       // 909
        next: function() {                                                                                             // 910
            // Move to next node                                                                                       // 911
            var current = this._current = this._next;                                                                  // 912
            if (current) {                                                                                             // 913
                this._next = (current !== this._last) ? current.nextSibling : null;                                    // 914
                                                                                                                       // 915
                // Check for partially selected text nodes                                                             // 916
                if (dom.isCharacterDataNode(current) && this.clonePartiallySelectedTextNodes) {                        // 917
                    if (current === this.ec) {                                                                         // 918
                                                                                                                       // 919
                        (current = current.cloneNode(true)).deleteData(this.eo, current.length - this.eo);             // 920
                    }                                                                                                  // 921
                    if (this._current === this.sc) {                                                                   // 922
                                                                                                                       // 923
                        (current = current.cloneNode(true)).deleteData(0, this.so);                                    // 924
                    }                                                                                                  // 925
                }                                                                                                      // 926
            }                                                                                                          // 927
                                                                                                                       // 928
            return current;                                                                                            // 929
        },                                                                                                             // 930
                                                                                                                       // 931
        remove: function() {                                                                                           // 932
            var current = this._current, start, end;                                                                   // 933
                                                                                                                       // 934
            if (dom.isCharacterDataNode(current) && (current === this.sc || current === this.ec)) {                    // 935
                start = (current === this.sc) ? this.so : 0;                                                           // 936
                end = (current === this.ec) ? this.eo : current.length;                                                // 937
                if (start != end) {                                                                                    // 938
                    current.deleteData(start, end - start);                                                            // 939
                }                                                                                                      // 940
            } else {                                                                                                   // 941
                if (current.parentNode) {                                                                              // 942
                    current.parentNode.removeChild(current);                                                           // 943
                } else {                                                                                               // 944
                                                                                                                       // 945
                }                                                                                                      // 946
            }                                                                                                          // 947
        },                                                                                                             // 948
                                                                                                                       // 949
        // Checks if the current node is partially selected                                                            // 950
        isPartiallySelectedSubtree: function() {                                                                       // 951
            var current = this._current;                                                                               // 952
            return isNonTextPartiallySelected(current, this.range);                                                    // 953
        },                                                                                                             // 954
                                                                                                                       // 955
        getSubtreeIterator: function() {                                                                               // 956
            var subRange;                                                                                              // 957
            if (this.isSingleCharacterDataNode) {                                                                      // 958
                subRange = this.range.cloneRange();                                                                    // 959
                subRange.collapse();                                                                                   // 960
            } else {                                                                                                   // 961
                subRange = new Range(getRangeDocument(this.range));                                                    // 962
                var current = this._current;                                                                           // 963
                var startContainer = current, startOffset = 0, endContainer = current, endOffset = dom.getNodeLength(current);
                                                                                                                       // 965
                if (dom.isAncestorOf(current, this.sc, true)) {                                                        // 966
                    startContainer = this.sc;                                                                          // 967
                    startOffset = this.so;                                                                             // 968
                }                                                                                                      // 969
                if (dom.isAncestorOf(current, this.ec, true)) {                                                        // 970
                    endContainer = this.ec;                                                                            // 971
                    endOffset = this.eo;                                                                               // 972
                }                                                                                                      // 973
                                                                                                                       // 974
                updateBoundaries(subRange, startContainer, startOffset, endContainer, endOffset);                      // 975
            }                                                                                                          // 976
            return new RangeIterator(subRange, this.clonePartiallySelectedTextNodes);                                  // 977
        },                                                                                                             // 978
                                                                                                                       // 979
        detach: function(detachRange) {                                                                                // 980
            if (detachRange) {                                                                                         // 981
                this.range.detach();                                                                                   // 982
            }                                                                                                          // 983
            this.range = this._current = this._next = this._first = this._last = this.sc = this.so = this.ec = this.eo = null;
        }                                                                                                              // 985
    };                                                                                                                 // 986
                                                                                                                       // 987
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 989
    // Exceptions                                                                                                      // 990
                                                                                                                       // 991
    /**                                                                                                                // 992
     * @constructor                                                                                                    // 993
     */                                                                                                                // 994
    function RangeException(codeName) {                                                                                // 995
        this.code = this[codeName];                                                                                    // 996
        this.codeName = codeName;                                                                                      // 997
        this.message = "RangeException: " + this.codeName;                                                             // 998
    }                                                                                                                  // 999
                                                                                                                       // 1000
    RangeException.prototype = {                                                                                       // 1001
        BAD_BOUNDARYPOINTS_ERR: 1,                                                                                     // 1002
        INVALID_NODE_TYPE_ERR: 2                                                                                       // 1003
    };                                                                                                                 // 1004
                                                                                                                       // 1005
    RangeException.prototype.toString = function() {                                                                   // 1006
        return this.message;                                                                                           // 1007
    };                                                                                                                 // 1008
                                                                                                                       // 1009
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1011
    /**                                                                                                                // 1012
     * Currently iterates through all nodes in the range on creation until I think of a decent way to do it            // 1013
     * TODO: Look into making this a proper iterator, not requiring preloading everything first                        // 1014
     * @constructor                                                                                                    // 1015
     */                                                                                                                // 1016
    function RangeNodeIterator(range, nodeTypes, filter) {                                                             // 1017
        this.nodes = getNodesInRange(range, nodeTypes, filter);                                                        // 1018
        this._next = this.nodes[0];                                                                                    // 1019
        this._position = 0;                                                                                            // 1020
    }                                                                                                                  // 1021
                                                                                                                       // 1022
    RangeNodeIterator.prototype = {                                                                                    // 1023
        _current: null,                                                                                                // 1024
                                                                                                                       // 1025
        hasNext: function() {                                                                                          // 1026
            return !!this._next;                                                                                       // 1027
        },                                                                                                             // 1028
                                                                                                                       // 1029
        next: function() {                                                                                             // 1030
            this._current = this._next;                                                                                // 1031
            this._next = this.nodes[ ++this._position ];                                                               // 1032
            return this._current;                                                                                      // 1033
        },                                                                                                             // 1034
                                                                                                                       // 1035
        detach: function() {                                                                                           // 1036
            this._current = this._next = this.nodes = null;                                                            // 1037
        }                                                                                                              // 1038
    };                                                                                                                 // 1039
                                                                                                                       // 1040
    var beforeAfterNodeTypes = [1, 3, 4, 5, 7, 8, 10];                                                                 // 1041
    var rootContainerNodeTypes = [2, 9, 11];                                                                           // 1042
    var readonlyNodeTypes = [5, 6, 10, 12];                                                                            // 1043
    var insertableNodeTypes = [1, 3, 4, 5, 7, 8, 10, 11];                                                              // 1044
    var surroundNodeTypes = [1, 3, 4, 5, 7, 8];                                                                        // 1045
                                                                                                                       // 1046
    function createAncestorFinder(nodeTypes) {                                                                         // 1047
        return function(node, selfIsAncestor) {                                                                        // 1048
            var t, n = selfIsAncestor ? node : node.parentNode;                                                        // 1049
            while (n) {                                                                                                // 1050
                t = n.nodeType;                                                                                        // 1051
                if (dom.arrayContains(nodeTypes, t)) {                                                                 // 1052
                    return n;                                                                                          // 1053
                }                                                                                                      // 1054
                n = n.parentNode;                                                                                      // 1055
            }                                                                                                          // 1056
            return null;                                                                                               // 1057
        };                                                                                                             // 1058
    }                                                                                                                  // 1059
                                                                                                                       // 1060
    var getRootContainer = dom.getRootContainer;                                                                       // 1061
    var getDocumentOrFragmentContainer = createAncestorFinder( [9, 11] );                                              // 1062
    var getReadonlyAncestor = createAncestorFinder(readonlyNodeTypes);                                                 // 1063
    var getDocTypeNotationEntityAncestor = createAncestorFinder( [6, 10, 12] );                                        // 1064
                                                                                                                       // 1065
    function assertNoDocTypeNotationEntityAncestor(node, allowSelf) {                                                  // 1066
        if (getDocTypeNotationEntityAncestor(node, allowSelf)) {                                                       // 1067
            throw new RangeException("INVALID_NODE_TYPE_ERR");                                                         // 1068
        }                                                                                                              // 1069
    }                                                                                                                  // 1070
                                                                                                                       // 1071
    function assertNotDetached(range) {                                                                                // 1072
        if (!range.startContainer) {                                                                                   // 1073
            throw new DOMException("INVALID_STATE_ERR");                                                               // 1074
        }                                                                                                              // 1075
    }                                                                                                                  // 1076
                                                                                                                       // 1077
    function assertValidNodeType(node, invalidTypes) {                                                                 // 1078
        if (!dom.arrayContains(invalidTypes, node.nodeType)) {                                                         // 1079
            throw new RangeException("INVALID_NODE_TYPE_ERR");                                                         // 1080
        }                                                                                                              // 1081
    }                                                                                                                  // 1082
                                                                                                                       // 1083
    function assertValidOffset(node, offset) {                                                                         // 1084
        if (offset < 0 || offset > (dom.isCharacterDataNode(node) ? node.length : node.childNodes.length)) {           // 1085
            throw new DOMException("INDEX_SIZE_ERR");                                                                  // 1086
        }                                                                                                              // 1087
    }                                                                                                                  // 1088
                                                                                                                       // 1089
    function assertSameDocumentOrFragment(node1, node2) {                                                              // 1090
        if (getDocumentOrFragmentContainer(node1, true) !== getDocumentOrFragmentContainer(node2, true)) {             // 1091
            throw new DOMException("WRONG_DOCUMENT_ERR");                                                              // 1092
        }                                                                                                              // 1093
    }                                                                                                                  // 1094
                                                                                                                       // 1095
    function assertNodeNotReadOnly(node) {                                                                             // 1096
        if (getReadonlyAncestor(node, true)) {                                                                         // 1097
            throw new DOMException("NO_MODIFICATION_ALLOWED_ERR");                                                     // 1098
        }                                                                                                              // 1099
    }                                                                                                                  // 1100
                                                                                                                       // 1101
    function assertNode(node, codeName) {                                                                              // 1102
        if (!node) {                                                                                                   // 1103
            throw new DOMException(codeName);                                                                          // 1104
        }                                                                                                              // 1105
    }                                                                                                                  // 1106
                                                                                                                       // 1107
    function isOrphan(node) {                                                                                          // 1108
        return !dom.arrayContains(rootContainerNodeTypes, node.nodeType) && !getDocumentOrFragmentContainer(node, true);
    }                                                                                                                  // 1110
                                                                                                                       // 1111
    function isValidOffset(node, offset) {                                                                             // 1112
        return offset <= (dom.isCharacterDataNode(node) ? node.length : node.childNodes.length);                       // 1113
    }                                                                                                                  // 1114
                                                                                                                       // 1115
    function assertRangeValid(range) {                                                                                 // 1116
        assertNotDetached(range);                                                                                      // 1117
        if (isOrphan(range.startContainer) || isOrphan(range.endContainer) ||                                          // 1118
                !isValidOffset(range.startContainer, range.startOffset) ||                                             // 1119
                !isValidOffset(range.endContainer, range.endOffset)) {                                                 // 1120
            throw new Error("Range error: Range is no longer valid after DOM mutation (" + range.inspect() + ")");     // 1121
        }                                                                                                              // 1122
    }                                                                                                                  // 1123
                                                                                                                       // 1124
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1126
    // Test the browser's innerHTML support to decide how to implement createContextualFragment                        // 1127
    var styleEl = document.createElement("style");                                                                     // 1128
    var htmlParsingConforms = false;                                                                                   // 1129
    try {                                                                                                              // 1130
        styleEl.innerHTML = "<b>x</b>";                                                                                // 1131
        htmlParsingConforms = (styleEl.firstChild.nodeType == 3); // Opera incorrectly creates an element node         // 1132
    } catch (e) {                                                                                                      // 1133
        // IE 6 and 7 throw                                                                                            // 1134
    }                                                                                                                  // 1135
                                                                                                                       // 1136
    api.features.htmlParsingConforms = htmlParsingConforms;                                                            // 1137
                                                                                                                       // 1138
    var createContextualFragment = htmlParsingConforms ?                                                               // 1139
                                                                                                                       // 1140
        // Implementation as per HTML parsing spec, trusting in the browser's implementation of innerHTML. See         // 1141
        // discussion and base code for this implementation at issue 67.                                               // 1142
        // Spec: http://html5.org/specs/dom-parsing.html#extensions-to-the-range-interface                             // 1143
        // Thanks to Aleks Williams.                                                                                   // 1144
        function(fragmentStr) {                                                                                        // 1145
            // "Let node the context object's start's node."                                                           // 1146
            var node = this.startContainer;                                                                            // 1147
            var doc = dom.getDocument(node);                                                                           // 1148
                                                                                                                       // 1149
            // "If the context object's start's node is null, raise an INVALID_STATE_ERR                               // 1150
            // exception and abort these steps."                                                                       // 1151
            if (!node) {                                                                                               // 1152
                throw new DOMException("INVALID_STATE_ERR");                                                           // 1153
            }                                                                                                          // 1154
                                                                                                                       // 1155
            // "Let element be as follows, depending on node's interface:"                                             // 1156
            // Document, Document Fragment: null                                                                       // 1157
            var el = null;                                                                                             // 1158
                                                                                                                       // 1159
            // "Element: node"                                                                                         // 1160
            if (node.nodeType == 1) {                                                                                  // 1161
                el = node;                                                                                             // 1162
                                                                                                                       // 1163
            // "Text, Comment: node's parentElement"                                                                   // 1164
            } else if (dom.isCharacterDataNode(node)) {                                                                // 1165
                el = dom.parentElement(node);                                                                          // 1166
            }                                                                                                          // 1167
                                                                                                                       // 1168
            // "If either element is null or element's ownerDocument is an HTML document                               // 1169
            // and element's local name is "html" and element's namespace is the HTML                                  // 1170
            // namespace"                                                                                              // 1171
            if (el === null || (                                                                                       // 1172
                el.nodeName == "HTML"                                                                                  // 1173
                && dom.isHtmlNamespace(dom.getDocument(el).documentElement)                                            // 1174
                && dom.isHtmlNamespace(el)                                                                             // 1175
            )) {                                                                                                       // 1176
                                                                                                                       // 1177
            // "let element be a new Element with "body" as its local name and the HTML                                // 1178
            // namespace as its namespace.""                                                                           // 1179
                el = doc.createElement("body");                                                                        // 1180
            } else {                                                                                                   // 1181
                el = el.cloneNode(false);                                                                              // 1182
            }                                                                                                          // 1183
                                                                                                                       // 1184
            // "If the node's document is an HTML document: Invoke the HTML fragment parsing algorithm."               // 1185
            // "If the node's document is an XML document: Invoke the XML fragment parsing algorithm."                 // 1186
            // "In either case, the algorithm must be invoked with fragment as the input                               // 1187
            // and element as the context element."                                                                    // 1188
            el.innerHTML = fragmentStr;                                                                                // 1189
                                                                                                                       // 1190
            // "If this raises an exception, then abort these steps. Otherwise, let new                                // 1191
            // children be the nodes returned."                                                                        // 1192
                                                                                                                       // 1193
            // "Let fragment be a new DocumentFragment."                                                               // 1194
            // "Append all new children to fragment."                                                                  // 1195
            // "Return fragment."                                                                                      // 1196
            return dom.fragmentFromNodeChildren(el);                                                                   // 1197
        } :                                                                                                            // 1198
                                                                                                                       // 1199
        // In this case, innerHTML cannot be trusted, so fall back to a simpler, non-conformant implementation that    // 1200
        // previous versions of Rangy used (with the exception of using a body element rather than a div)              // 1201
        function(fragmentStr) {                                                                                        // 1202
            assertNotDetached(this);                                                                                   // 1203
            var doc = getRangeDocument(this);                                                                          // 1204
            var el = doc.createElement("body");                                                                        // 1205
            el.innerHTML = fragmentStr;                                                                                // 1206
                                                                                                                       // 1207
            return dom.fragmentFromNodeChildren(el);                                                                   // 1208
        };                                                                                                             // 1209
                                                                                                                       // 1210
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1212
    var rangeProperties = ["startContainer", "startOffset", "endContainer", "endOffset", "collapsed",                  // 1213
        "commonAncestorContainer"];                                                                                    // 1214
                                                                                                                       // 1215
    var s2s = 0, s2e = 1, e2e = 2, e2s = 3;                                                                            // 1216
    var n_b = 0, n_a = 1, n_b_a = 2, n_i = 3;                                                                          // 1217
                                                                                                                       // 1218
    function RangePrototype() {}                                                                                       // 1219
                                                                                                                       // 1220
    RangePrototype.prototype = {                                                                                       // 1221
        attachListener: function(type, listener) {                                                                     // 1222
            this._listeners[type].push(listener);                                                                      // 1223
        },                                                                                                             // 1224
                                                                                                                       // 1225
        compareBoundaryPoints: function(how, range) {                                                                  // 1226
            assertRangeValid(this);                                                                                    // 1227
            assertSameDocumentOrFragment(this.startContainer, range.startContainer);                                   // 1228
                                                                                                                       // 1229
            var nodeA, offsetA, nodeB, offsetB;                                                                        // 1230
            var prefixA = (how == e2s || how == s2s) ? "start" : "end";                                                // 1231
            var prefixB = (how == s2e || how == s2s) ? "start" : "end";                                                // 1232
            nodeA = this[prefixA + "Container"];                                                                       // 1233
            offsetA = this[prefixA + "Offset"];                                                                        // 1234
            nodeB = range[prefixB + "Container"];                                                                      // 1235
            offsetB = range[prefixB + "Offset"];                                                                       // 1236
            return dom.comparePoints(nodeA, offsetA, nodeB, offsetB);                                                  // 1237
        },                                                                                                             // 1238
                                                                                                                       // 1239
        insertNode: function(node) {                                                                                   // 1240
            assertRangeValid(this);                                                                                    // 1241
            assertValidNodeType(node, insertableNodeTypes);                                                            // 1242
            assertNodeNotReadOnly(this.startContainer);                                                                // 1243
                                                                                                                       // 1244
            if (dom.isAncestorOf(node, this.startContainer, true)) {                                                   // 1245
                throw new DOMException("HIERARCHY_REQUEST_ERR");                                                       // 1246
            }                                                                                                          // 1247
                                                                                                                       // 1248
            // No check for whether the container of the start of the Range is of a type that does not allow           // 1249
            // children of the type of node: the browser's DOM implementation should do this for us when we attempt    // 1250
            // to add the node                                                                                         // 1251
                                                                                                                       // 1252
            var firstNodeInserted = insertNodeAtPosition(node, this.startContainer, this.startOffset);                 // 1253
            this.setStartBefore(firstNodeInserted);                                                                    // 1254
        },                                                                                                             // 1255
                                                                                                                       // 1256
        cloneContents: function() {                                                                                    // 1257
            assertRangeValid(this);                                                                                    // 1258
                                                                                                                       // 1259
            var clone, frag;                                                                                           // 1260
            if (this.collapsed) {                                                                                      // 1261
                return getRangeDocument(this).createDocumentFragment();                                                // 1262
            } else {                                                                                                   // 1263
                if (this.startContainer === this.endContainer && dom.isCharacterDataNode(this.startContainer)) {       // 1264
                    clone = this.startContainer.cloneNode(true);                                                       // 1265
                    clone.data = clone.data.slice(this.startOffset, this.endOffset);                                   // 1266
                    frag = getRangeDocument(this).createDocumentFragment();                                            // 1267
                    frag.appendChild(clone);                                                                           // 1268
                    return frag;                                                                                       // 1269
                } else {                                                                                               // 1270
                    var iterator = new RangeIterator(this, true);                                                      // 1271
                    clone = cloneSubtree(iterator);                                                                    // 1272
                    iterator.detach();                                                                                 // 1273
                }                                                                                                      // 1274
                return clone;                                                                                          // 1275
            }                                                                                                          // 1276
        },                                                                                                             // 1277
                                                                                                                       // 1278
        canSurroundContents: function() {                                                                              // 1279
            assertRangeValid(this);                                                                                    // 1280
            assertNodeNotReadOnly(this.startContainer);                                                                // 1281
            assertNodeNotReadOnly(this.endContainer);                                                                  // 1282
                                                                                                                       // 1283
            // Check if the contents can be surrounded. Specifically, this means whether the range partially selects   // 1284
            // no non-text nodes.                                                                                      // 1285
            var iterator = new RangeIterator(this, true);                                                              // 1286
            var boundariesInvalid = (iterator._first && (isNonTextPartiallySelected(iterator._first, this)) ||         // 1287
                    (iterator._last && isNonTextPartiallySelected(iterator._last, this)));                             // 1288
            iterator.detach();                                                                                         // 1289
            return !boundariesInvalid;                                                                                 // 1290
        },                                                                                                             // 1291
                                                                                                                       // 1292
        surroundContents: function(node) {                                                                             // 1293
            assertValidNodeType(node, surroundNodeTypes);                                                              // 1294
                                                                                                                       // 1295
            if (!this.canSurroundContents()) {                                                                         // 1296
                throw new RangeException("BAD_BOUNDARYPOINTS_ERR");                                                    // 1297
            }                                                                                                          // 1298
                                                                                                                       // 1299
            // Extract the contents                                                                                    // 1300
            var content = this.extractContents();                                                                      // 1301
                                                                                                                       // 1302
            // Clear the children of the node                                                                          // 1303
            if (node.hasChildNodes()) {                                                                                // 1304
                while (node.lastChild) {                                                                               // 1305
                    node.removeChild(node.lastChild);                                                                  // 1306
                }                                                                                                      // 1307
            }                                                                                                          // 1308
                                                                                                                       // 1309
            // Insert the new node and add the extracted contents                                                      // 1310
            insertNodeAtPosition(node, this.startContainer, this.startOffset);                                         // 1311
            node.appendChild(content);                                                                                 // 1312
                                                                                                                       // 1313
            this.selectNode(node);                                                                                     // 1314
        },                                                                                                             // 1315
                                                                                                                       // 1316
        cloneRange: function() {                                                                                       // 1317
            assertRangeValid(this);                                                                                    // 1318
            var range = new Range(getRangeDocument(this));                                                             // 1319
            var i = rangeProperties.length, prop;                                                                      // 1320
            while (i--) {                                                                                              // 1321
                prop = rangeProperties[i];                                                                             // 1322
                range[prop] = this[prop];                                                                              // 1323
            }                                                                                                          // 1324
            return range;                                                                                              // 1325
        },                                                                                                             // 1326
                                                                                                                       // 1327
        toString: function() {                                                                                         // 1328
            assertRangeValid(this);                                                                                    // 1329
            var sc = this.startContainer;                                                                              // 1330
            if (sc === this.endContainer && dom.isCharacterDataNode(sc)) {                                             // 1331
                return (sc.nodeType == 3 || sc.nodeType == 4) ? sc.data.slice(this.startOffset, this.endOffset) : "";  // 1332
            } else {                                                                                                   // 1333
                var textBits = [], iterator = new RangeIterator(this, true);                                           // 1334
                                                                                                                       // 1335
                iterateSubtree(iterator, function(node) {                                                              // 1336
                    // Accept only text or CDATA nodes, not comments                                                   // 1337
                                                                                                                       // 1338
                    if (node.nodeType == 3 || node.nodeType == 4) {                                                    // 1339
                        textBits.push(node.data);                                                                      // 1340
                    }                                                                                                  // 1341
                });                                                                                                    // 1342
                iterator.detach();                                                                                     // 1343
                return textBits.join("");                                                                              // 1344
            }                                                                                                          // 1345
        },                                                                                                             // 1346
                                                                                                                       // 1347
        // The methods below are all non-standard. The following batch were introduced by Mozilla but have since       // 1348
        // been removed from Mozilla.                                                                                  // 1349
                                                                                                                       // 1350
        compareNode: function(node) {                                                                                  // 1351
            assertRangeValid(this);                                                                                    // 1352
                                                                                                                       // 1353
            var parent = node.parentNode;                                                                              // 1354
            var nodeIndex = dom.getNodeIndex(node);                                                                    // 1355
                                                                                                                       // 1356
            if (!parent) {                                                                                             // 1357
                throw new DOMException("NOT_FOUND_ERR");                                                               // 1358
            }                                                                                                          // 1359
                                                                                                                       // 1360
            var startComparison = this.comparePoint(parent, nodeIndex),                                                // 1361
                endComparison = this.comparePoint(parent, nodeIndex + 1);                                              // 1362
                                                                                                                       // 1363
            if (startComparison < 0) { // Node starts before                                                           // 1364
                return (endComparison > 0) ? n_b_a : n_b;                                                              // 1365
            } else {                                                                                                   // 1366
                return (endComparison > 0) ? n_a : n_i;                                                                // 1367
            }                                                                                                          // 1368
        },                                                                                                             // 1369
                                                                                                                       // 1370
        comparePoint: function(node, offset) {                                                                         // 1371
            assertRangeValid(this);                                                                                    // 1372
            assertNode(node, "HIERARCHY_REQUEST_ERR");                                                                 // 1373
            assertSameDocumentOrFragment(node, this.startContainer);                                                   // 1374
                                                                                                                       // 1375
            if (dom.comparePoints(node, offset, this.startContainer, this.startOffset) < 0) {                          // 1376
                return -1;                                                                                             // 1377
            } else if (dom.comparePoints(node, offset, this.endContainer, this.endOffset) > 0) {                       // 1378
                return 1;                                                                                              // 1379
            }                                                                                                          // 1380
            return 0;                                                                                                  // 1381
        },                                                                                                             // 1382
                                                                                                                       // 1383
        createContextualFragment: createContextualFragment,                                                            // 1384
                                                                                                                       // 1385
        toHtml: function() {                                                                                           // 1386
            assertRangeValid(this);                                                                                    // 1387
            var container = getRangeDocument(this).createElement("div");                                               // 1388
            container.appendChild(this.cloneContents());                                                               // 1389
            return container.innerHTML;                                                                                // 1390
        },                                                                                                             // 1391
                                                                                                                       // 1392
        // touchingIsIntersecting determines whether this method considers a node that borders a range intersects      // 1393
        // with it (as in WebKit) or not (as in Gecko pre-1.9, and the default)                                        // 1394
        intersectsNode: function(node, touchingIsIntersecting) {                                                       // 1395
            assertRangeValid(this);                                                                                    // 1396
            assertNode(node, "NOT_FOUND_ERR");                                                                         // 1397
            if (dom.getDocument(node) !== getRangeDocument(this)) {                                                    // 1398
                return false;                                                                                          // 1399
            }                                                                                                          // 1400
                                                                                                                       // 1401
            var parent = node.parentNode, offset = dom.getNodeIndex(node);                                             // 1402
            assertNode(parent, "NOT_FOUND_ERR");                                                                       // 1403
                                                                                                                       // 1404
            var startComparison = dom.comparePoints(parent, offset, this.endContainer, this.endOffset),                // 1405
                endComparison = dom.comparePoints(parent, offset + 1, this.startContainer, this.startOffset);          // 1406
                                                                                                                       // 1407
            return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;
        },                                                                                                             // 1409
                                                                                                                       // 1410
                                                                                                                       // 1411
        isPointInRange: function(node, offset) {                                                                       // 1412
            assertRangeValid(this);                                                                                    // 1413
            assertNode(node, "HIERARCHY_REQUEST_ERR");                                                                 // 1414
            assertSameDocumentOrFragment(node, this.startContainer);                                                   // 1415
                                                                                                                       // 1416
            return (dom.comparePoints(node, offset, this.startContainer, this.startOffset) >= 0) &&                    // 1417
                   (dom.comparePoints(node, offset, this.endContainer, this.endOffset) <= 0);                          // 1418
        },                                                                                                             // 1419
                                                                                                                       // 1420
        // The methods below are non-standard and invented by me.                                                      // 1421
                                                                                                                       // 1422
        // Sharing a boundary start-to-end or end-to-start does not count as intersection.                             // 1423
        intersectsRange: function(range, touchingIsIntersecting) {                                                     // 1424
            assertRangeValid(this);                                                                                    // 1425
                                                                                                                       // 1426
            if (getRangeDocument(range) != getRangeDocument(this)) {                                                   // 1427
                throw new DOMException("WRONG_DOCUMENT_ERR");                                                          // 1428
            }                                                                                                          // 1429
                                                                                                                       // 1430
            var startComparison = dom.comparePoints(this.startContainer, this.startOffset, range.endContainer, range.endOffset),
                endComparison = dom.comparePoints(this.endContainer, this.endOffset, range.startContainer, range.startOffset);
                                                                                                                       // 1433
            return touchingIsIntersecting ? startComparison <= 0 && endComparison >= 0 : startComparison < 0 && endComparison > 0;
        },                                                                                                             // 1435
                                                                                                                       // 1436
        intersection: function(range) {                                                                                // 1437
            if (this.intersectsRange(range)) {                                                                         // 1438
                var startComparison = dom.comparePoints(this.startContainer, this.startOffset, range.startContainer, range.startOffset),
                    endComparison = dom.comparePoints(this.endContainer, this.endOffset, range.endContainer, range.endOffset);
                                                                                                                       // 1441
                var intersectionRange = this.cloneRange();                                                             // 1442
                                                                                                                       // 1443
                if (startComparison == -1) {                                                                           // 1444
                    intersectionRange.setStart(range.startContainer, range.startOffset);                               // 1445
                }                                                                                                      // 1446
                if (endComparison == 1) {                                                                              // 1447
                    intersectionRange.setEnd(range.endContainer, range.endOffset);                                     // 1448
                }                                                                                                      // 1449
                return intersectionRange;                                                                              // 1450
            }                                                                                                          // 1451
            return null;                                                                                               // 1452
        },                                                                                                             // 1453
                                                                                                                       // 1454
        union: function(range) {                                                                                       // 1455
            if (this.intersectsRange(range, true)) {                                                                   // 1456
                var unionRange = this.cloneRange();                                                                    // 1457
                if (dom.comparePoints(range.startContainer, range.startOffset, this.startContainer, this.startOffset) == -1) {
                    unionRange.setStart(range.startContainer, range.startOffset);                                      // 1459
                }                                                                                                      // 1460
                if (dom.comparePoints(range.endContainer, range.endOffset, this.endContainer, this.endOffset) == 1) {  // 1461
                    unionRange.setEnd(range.endContainer, range.endOffset);                                            // 1462
                }                                                                                                      // 1463
                return unionRange;                                                                                     // 1464
            } else {                                                                                                   // 1465
                throw new RangeException("Ranges do not intersect");                                                   // 1466
            }                                                                                                          // 1467
        },                                                                                                             // 1468
                                                                                                                       // 1469
        containsNode: function(node, allowPartial) {                                                                   // 1470
            if (allowPartial) {                                                                                        // 1471
                return this.intersectsNode(node, false);                                                               // 1472
            } else {                                                                                                   // 1473
                return this.compareNode(node) == n_i;                                                                  // 1474
            }                                                                                                          // 1475
        },                                                                                                             // 1476
                                                                                                                       // 1477
        containsNodeContents: function(node) {                                                                         // 1478
            return this.comparePoint(node, 0) >= 0 && this.comparePoint(node, dom.getNodeLength(node)) <= 0;           // 1479
        },                                                                                                             // 1480
                                                                                                                       // 1481
        containsRange: function(range) {                                                                               // 1482
            return this.intersection(range).equals(range);                                                             // 1483
        },                                                                                                             // 1484
                                                                                                                       // 1485
        containsNodeText: function(node) {                                                                             // 1486
            var nodeRange = this.cloneRange();                                                                         // 1487
            nodeRange.selectNode(node);                                                                                // 1488
            var textNodes = nodeRange.getNodes([3]);                                                                   // 1489
            if (textNodes.length > 0) {                                                                                // 1490
                nodeRange.setStart(textNodes[0], 0);                                                                   // 1491
                var lastTextNode = textNodes.pop();                                                                    // 1492
                nodeRange.setEnd(lastTextNode, lastTextNode.length);                                                   // 1493
                var contains = this.containsRange(nodeRange);                                                          // 1494
                nodeRange.detach();                                                                                    // 1495
                return contains;                                                                                       // 1496
            } else {                                                                                                   // 1497
                return this.containsNodeContents(node);                                                                // 1498
            }                                                                                                          // 1499
        },                                                                                                             // 1500
                                                                                                                       // 1501
        createNodeIterator: function(nodeTypes, filter) {                                                              // 1502
            assertRangeValid(this);                                                                                    // 1503
            return new RangeNodeIterator(this, nodeTypes, filter);                                                     // 1504
        },                                                                                                             // 1505
                                                                                                                       // 1506
        getNodes: function(nodeTypes, filter) {                                                                        // 1507
            assertRangeValid(this);                                                                                    // 1508
            return getNodesInRange(this, nodeTypes, filter);                                                           // 1509
        },                                                                                                             // 1510
                                                                                                                       // 1511
        getDocument: function() {                                                                                      // 1512
            return getRangeDocument(this);                                                                             // 1513
        },                                                                                                             // 1514
                                                                                                                       // 1515
        collapseBefore: function(node) {                                                                               // 1516
            assertNotDetached(this);                                                                                   // 1517
                                                                                                                       // 1518
            this.setEndBefore(node);                                                                                   // 1519
            this.collapse(false);                                                                                      // 1520
        },                                                                                                             // 1521
                                                                                                                       // 1522
        collapseAfter: function(node) {                                                                                // 1523
            assertNotDetached(this);                                                                                   // 1524
                                                                                                                       // 1525
            this.setStartAfter(node);                                                                                  // 1526
            this.collapse(true);                                                                                       // 1527
        },                                                                                                             // 1528
                                                                                                                       // 1529
        getName: function() {                                                                                          // 1530
            return "DomRange";                                                                                         // 1531
        },                                                                                                             // 1532
                                                                                                                       // 1533
        equals: function(range) {                                                                                      // 1534
            return Range.rangesEqual(this, range);                                                                     // 1535
        },                                                                                                             // 1536
                                                                                                                       // 1537
        inspect: function() {                                                                                          // 1538
            return inspect(this);                                                                                      // 1539
        }                                                                                                              // 1540
    };                                                                                                                 // 1541
                                                                                                                       // 1542
    function copyComparisonConstantsToObject(obj) {                                                                    // 1543
        obj.START_TO_START = s2s;                                                                                      // 1544
        obj.START_TO_END = s2e;                                                                                        // 1545
        obj.END_TO_END = e2e;                                                                                          // 1546
        obj.END_TO_START = e2s;                                                                                        // 1547
                                                                                                                       // 1548
        obj.NODE_BEFORE = n_b;                                                                                         // 1549
        obj.NODE_AFTER = n_a;                                                                                          // 1550
        obj.NODE_BEFORE_AND_AFTER = n_b_a;                                                                             // 1551
        obj.NODE_INSIDE = n_i;                                                                                         // 1552
    }                                                                                                                  // 1553
                                                                                                                       // 1554
    function copyComparisonConstants(constructor) {                                                                    // 1555
        copyComparisonConstantsToObject(constructor);                                                                  // 1556
        copyComparisonConstantsToObject(constructor.prototype);                                                        // 1557
    }                                                                                                                  // 1558
                                                                                                                       // 1559
    function createRangeContentRemover(remover, boundaryUpdater) {                                                     // 1560
        return function() {                                                                                            // 1561
            assertRangeValid(this);                                                                                    // 1562
                                                                                                                       // 1563
            var sc = this.startContainer, so = this.startOffset, root = this.commonAncestorContainer;                  // 1564
                                                                                                                       // 1565
            var iterator = new RangeIterator(this, true);                                                              // 1566
                                                                                                                       // 1567
            // Work out where to position the range after content removal                                              // 1568
            var node, boundary;                                                                                        // 1569
            if (sc !== root) {                                                                                         // 1570
                node = dom.getClosestAncestorIn(sc, root, true);                                                       // 1571
                boundary = getBoundaryAfterNode(node);                                                                 // 1572
                sc = boundary.node;                                                                                    // 1573
                so = boundary.offset;                                                                                  // 1574
            }                                                                                                          // 1575
                                                                                                                       // 1576
            // Check none of the range is read-only                                                                    // 1577
            iterateSubtree(iterator, assertNodeNotReadOnly);                                                           // 1578
                                                                                                                       // 1579
            iterator.reset();                                                                                          // 1580
                                                                                                                       // 1581
            // Remove the content                                                                                      // 1582
            var returnValue = remover(iterator);                                                                       // 1583
            iterator.detach();                                                                                         // 1584
                                                                                                                       // 1585
            // Move to the new position                                                                                // 1586
            boundaryUpdater(this, sc, so, sc, so);                                                                     // 1587
                                                                                                                       // 1588
            return returnValue;                                                                                        // 1589
        };                                                                                                             // 1590
    }                                                                                                                  // 1591
                                                                                                                       // 1592
    function createPrototypeRange(constructor, boundaryUpdater, detacher) {                                            // 1593
        function createBeforeAfterNodeSetter(isBefore, isStart) {                                                      // 1594
            return function(node) {                                                                                    // 1595
                assertNotDetached(this);                                                                               // 1596
                assertValidNodeType(node, beforeAfterNodeTypes);                                                       // 1597
                assertValidNodeType(getRootContainer(node), rootContainerNodeTypes);                                   // 1598
                                                                                                                       // 1599
                var boundary = (isBefore ? getBoundaryBeforeNode : getBoundaryAfterNode)(node);                        // 1600
                (isStart ? setRangeStart : setRangeEnd)(this, boundary.node, boundary.offset);                         // 1601
            };                                                                                                         // 1602
        }                                                                                                              // 1603
                                                                                                                       // 1604
        function setRangeStart(range, node, offset) {                                                                  // 1605
            var ec = range.endContainer, eo = range.endOffset;                                                         // 1606
            if (node !== range.startContainer || offset !== range.startOffset) {                                       // 1607
                // Check the root containers of the range and the new boundary, and also check whether the new boundary
                // is after the current end. In either case, collapse the range to the new position                    // 1609
                if (getRootContainer(node) != getRootContainer(ec) || dom.comparePoints(node, offset, ec, eo) == 1) {  // 1610
                    ec = node;                                                                                         // 1611
                    eo = offset;                                                                                       // 1612
                }                                                                                                      // 1613
                boundaryUpdater(range, node, offset, ec, eo);                                                          // 1614
            }                                                                                                          // 1615
        }                                                                                                              // 1616
                                                                                                                       // 1617
        function setRangeEnd(range, node, offset) {                                                                    // 1618
            var sc = range.startContainer, so = range.startOffset;                                                     // 1619
            if (node !== range.endContainer || offset !== range.endOffset) {                                           // 1620
                // Check the root containers of the range and the new boundary, and also check whether the new boundary
                // is after the current end. In either case, collapse the range to the new position                    // 1622
                if (getRootContainer(node) != getRootContainer(sc) || dom.comparePoints(node, offset, sc, so) == -1) { // 1623
                    sc = node;                                                                                         // 1624
                    so = offset;                                                                                       // 1625
                }                                                                                                      // 1626
                boundaryUpdater(range, sc, so, node, offset);                                                          // 1627
            }                                                                                                          // 1628
        }                                                                                                              // 1629
                                                                                                                       // 1630
        function setRangeStartAndEnd(range, node, offset) {                                                            // 1631
            if (node !== range.startContainer || offset !== range.startOffset || node !== range.endContainer || offset !== range.endOffset) {
                boundaryUpdater(range, node, offset, node, offset);                                                    // 1633
            }                                                                                                          // 1634
        }                                                                                                              // 1635
                                                                                                                       // 1636
        constructor.prototype = new RangePrototype();                                                                  // 1637
                                                                                                                       // 1638
        api.util.extend(constructor.prototype, {                                                                       // 1639
            setStart: function(node, offset) {                                                                         // 1640
                assertNotDetached(this);                                                                               // 1641
                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1642
                assertValidOffset(node, offset);                                                                       // 1643
                                                                                                                       // 1644
                setRangeStart(this, node, offset);                                                                     // 1645
            },                                                                                                         // 1646
                                                                                                                       // 1647
            setEnd: function(node, offset) {                                                                           // 1648
                assertNotDetached(this);                                                                               // 1649
                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1650
                assertValidOffset(node, offset);                                                                       // 1651
                                                                                                                       // 1652
                setRangeEnd(this, node, offset);                                                                       // 1653
            },                                                                                                         // 1654
                                                                                                                       // 1655
            setStartBefore: createBeforeAfterNodeSetter(true, true),                                                   // 1656
            setStartAfter: createBeforeAfterNodeSetter(false, true),                                                   // 1657
            setEndBefore: createBeforeAfterNodeSetter(true, false),                                                    // 1658
            setEndAfter: createBeforeAfterNodeSetter(false, false),                                                    // 1659
                                                                                                                       // 1660
            collapse: function(isStart) {                                                                              // 1661
                assertRangeValid(this);                                                                                // 1662
                if (isStart) {                                                                                         // 1663
                    boundaryUpdater(this, this.startContainer, this.startOffset, this.startContainer, this.startOffset);
                } else {                                                                                               // 1665
                    boundaryUpdater(this, this.endContainer, this.endOffset, this.endContainer, this.endOffset);       // 1666
                }                                                                                                      // 1667
            },                                                                                                         // 1668
                                                                                                                       // 1669
            selectNodeContents: function(node) {                                                                       // 1670
                // This doesn't seem well specified: the spec talks only about selecting the node's contents, which    // 1671
                // could be taken to mean only its children. However, browsers implement this the same as selectNode for
                // text nodes, so I shall do likewise                                                                  // 1673
                assertNotDetached(this);                                                                               // 1674
                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1675
                                                                                                                       // 1676
                boundaryUpdater(this, node, 0, node, dom.getNodeLength(node));                                         // 1677
            },                                                                                                         // 1678
                                                                                                                       // 1679
            selectNode: function(node) {                                                                               // 1680
                assertNotDetached(this);                                                                               // 1681
                assertNoDocTypeNotationEntityAncestor(node, false);                                                    // 1682
                assertValidNodeType(node, beforeAfterNodeTypes);                                                       // 1683
                                                                                                                       // 1684
                var start = getBoundaryBeforeNode(node), end = getBoundaryAfterNode(node);                             // 1685
                boundaryUpdater(this, start.node, start.offset, end.node, end.offset);                                 // 1686
            },                                                                                                         // 1687
                                                                                                                       // 1688
            extractContents: createRangeContentRemover(extractSubtree, boundaryUpdater),                               // 1689
                                                                                                                       // 1690
            deleteContents: createRangeContentRemover(deleteSubtree, boundaryUpdater),                                 // 1691
                                                                                                                       // 1692
            canSurroundContents: function() {                                                                          // 1693
                assertRangeValid(this);                                                                                // 1694
                assertNodeNotReadOnly(this.startContainer);                                                            // 1695
                assertNodeNotReadOnly(this.endContainer);                                                              // 1696
                                                                                                                       // 1697
                // Check if the contents can be surrounded. Specifically, this means whether the range partially selects
                // no non-text nodes.                                                                                  // 1699
                var iterator = new RangeIterator(this, true);                                                          // 1700
                var boundariesInvalid = (iterator._first && (isNonTextPartiallySelected(iterator._first, this)) ||     // 1701
                        (iterator._last && isNonTextPartiallySelected(iterator._last, this)));                         // 1702
                iterator.detach();                                                                                     // 1703
                return !boundariesInvalid;                                                                             // 1704
            },                                                                                                         // 1705
                                                                                                                       // 1706
            detach: function() {                                                                                       // 1707
                detacher(this);                                                                                        // 1708
            },                                                                                                         // 1709
                                                                                                                       // 1710
            splitBoundaries: function() {                                                                              // 1711
                assertRangeValid(this);                                                                                // 1712
                                                                                                                       // 1713
                                                                                                                       // 1714
                var sc = this.startContainer, so = this.startOffset, ec = this.endContainer, eo = this.endOffset;      // 1715
                var startEndSame = (sc === ec);                                                                        // 1716
                                                                                                                       // 1717
                if (dom.isCharacterDataNode(ec) && eo > 0 && eo < ec.length) {                                         // 1718
                    dom.splitDataNode(ec, eo);                                                                         // 1719
                                                                                                                       // 1720
                }                                                                                                      // 1721
                                                                                                                       // 1722
                if (dom.isCharacterDataNode(sc) && so > 0 && so < sc.length) {                                         // 1723
                                                                                                                       // 1724
                    sc = dom.splitDataNode(sc, so);                                                                    // 1725
                    if (startEndSame) {                                                                                // 1726
                        eo -= so;                                                                                      // 1727
                        ec = sc;                                                                                       // 1728
                    } else if (ec == sc.parentNode && eo >= dom.getNodeIndex(sc)) {                                    // 1729
                        eo++;                                                                                          // 1730
                    }                                                                                                  // 1731
                    so = 0;                                                                                            // 1732
                                                                                                                       // 1733
                }                                                                                                      // 1734
                boundaryUpdater(this, sc, so, ec, eo);                                                                 // 1735
            },                                                                                                         // 1736
                                                                                                                       // 1737
            normalizeBoundaries: function() {                                                                          // 1738
                assertRangeValid(this);                                                                                // 1739
                                                                                                                       // 1740
                var sc = this.startContainer, so = this.startOffset, ec = this.endContainer, eo = this.endOffset;      // 1741
                                                                                                                       // 1742
                var mergeForward = function(node) {                                                                    // 1743
                    var sibling = node.nextSibling;                                                                    // 1744
                    if (sibling && sibling.nodeType == node.nodeType) {                                                // 1745
                        ec = node;                                                                                     // 1746
                        eo = node.length;                                                                              // 1747
                        node.appendData(sibling.data);                                                                 // 1748
                        sibling.parentNode.removeChild(sibling);                                                       // 1749
                    }                                                                                                  // 1750
                };                                                                                                     // 1751
                                                                                                                       // 1752
                var mergeBackward = function(node) {                                                                   // 1753
                    var sibling = node.previousSibling;                                                                // 1754
                    if (sibling && sibling.nodeType == node.nodeType) {                                                // 1755
                        sc = node;                                                                                     // 1756
                        var nodeLength = node.length;                                                                  // 1757
                        so = sibling.length;                                                                           // 1758
                        node.insertData(0, sibling.data);                                                              // 1759
                        sibling.parentNode.removeChild(sibling);                                                       // 1760
                        if (sc == ec) {                                                                                // 1761
                            eo += so;                                                                                  // 1762
                            ec = sc;                                                                                   // 1763
                        } else if (ec == node.parentNode) {                                                            // 1764
                            var nodeIndex = dom.getNodeIndex(node);                                                    // 1765
                            if (eo == nodeIndex) {                                                                     // 1766
                                ec = node;                                                                             // 1767
                                eo = nodeLength;                                                                       // 1768
                            } else if (eo > nodeIndex) {                                                               // 1769
                                eo--;                                                                                  // 1770
                            }                                                                                          // 1771
                        }                                                                                              // 1772
                    }                                                                                                  // 1773
                };                                                                                                     // 1774
                                                                                                                       // 1775
                var normalizeStart = true;                                                                             // 1776
                                                                                                                       // 1777
                if (dom.isCharacterDataNode(ec)) {                                                                     // 1778
                    if (ec.length == eo) {                                                                             // 1779
                        mergeForward(ec);                                                                              // 1780
                    }                                                                                                  // 1781
                } else {                                                                                               // 1782
                    if (eo > 0) {                                                                                      // 1783
                        var endNode = ec.childNodes[eo - 1];                                                           // 1784
                        if (endNode && dom.isCharacterDataNode(endNode)) {                                             // 1785
                            mergeForward(endNode);                                                                     // 1786
                        }                                                                                              // 1787
                    }                                                                                                  // 1788
                    normalizeStart = !this.collapsed;                                                                  // 1789
                }                                                                                                      // 1790
                                                                                                                       // 1791
                if (normalizeStart) {                                                                                  // 1792
                    if (dom.isCharacterDataNode(sc)) {                                                                 // 1793
                        if (so == 0) {                                                                                 // 1794
                            mergeBackward(sc);                                                                         // 1795
                        }                                                                                              // 1796
                    } else {                                                                                           // 1797
                        if (so < sc.childNodes.length) {                                                               // 1798
                            var startNode = sc.childNodes[so];                                                         // 1799
                            if (startNode && dom.isCharacterDataNode(startNode)) {                                     // 1800
                                mergeBackward(startNode);                                                              // 1801
                            }                                                                                          // 1802
                        }                                                                                              // 1803
                    }                                                                                                  // 1804
                } else {                                                                                               // 1805
                    sc = ec;                                                                                           // 1806
                    so = eo;                                                                                           // 1807
                }                                                                                                      // 1808
                                                                                                                       // 1809
                boundaryUpdater(this, sc, so, ec, eo);                                                                 // 1810
            },                                                                                                         // 1811
                                                                                                                       // 1812
            collapseToPoint: function(node, offset) {                                                                  // 1813
                assertNotDetached(this);                                                                               // 1814
                                                                                                                       // 1815
                assertNoDocTypeNotationEntityAncestor(node, true);                                                     // 1816
                assertValidOffset(node, offset);                                                                       // 1817
                                                                                                                       // 1818
                setRangeStartAndEnd(this, node, offset);                                                               // 1819
            }                                                                                                          // 1820
        });                                                                                                            // 1821
                                                                                                                       // 1822
        copyComparisonConstants(constructor);                                                                          // 1823
    }                                                                                                                  // 1824
                                                                                                                       // 1825
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1827
    // Updates commonAncestorContainer and collapsed after boundary change                                             // 1828
    function updateCollapsedAndCommonAncestor(range) {                                                                 // 1829
        range.collapsed = (range.startContainer === range.endContainer && range.startOffset === range.endOffset);      // 1830
        range.commonAncestorContainer = range.collapsed ?                                                              // 1831
            range.startContainer : dom.getCommonAncestor(range.startContainer, range.endContainer);                    // 1832
    }                                                                                                                  // 1833
                                                                                                                       // 1834
    function updateBoundaries(range, startContainer, startOffset, endContainer, endOffset) {                           // 1835
        var startMoved = (range.startContainer !== startContainer || range.startOffset !== startOffset);               // 1836
        var endMoved = (range.endContainer !== endContainer || range.endOffset !== endOffset);                         // 1837
                                                                                                                       // 1838
        range.startContainer = startContainer;                                                                         // 1839
        range.startOffset = startOffset;                                                                               // 1840
        range.endContainer = endContainer;                                                                             // 1841
        range.endOffset = endOffset;                                                                                   // 1842
                                                                                                                       // 1843
        updateCollapsedAndCommonAncestor(range);                                                                       // 1844
        dispatchEvent(range, "boundarychange", {startMoved: startMoved, endMoved: endMoved});                          // 1845
    }                                                                                                                  // 1846
                                                                                                                       // 1847
    function detach(range) {                                                                                           // 1848
        assertNotDetached(range);                                                                                      // 1849
        range.startContainer = range.startOffset = range.endContainer = range.endOffset = null;                        // 1850
        range.collapsed = range.commonAncestorContainer = null;                                                        // 1851
        dispatchEvent(range, "detach", null);                                                                          // 1852
        range._listeners = null;                                                                                       // 1853
    }                                                                                                                  // 1854
                                                                                                                       // 1855
    /**                                                                                                                // 1856
     * @constructor                                                                                                    // 1857
     */                                                                                                                // 1858
    function Range(doc) {                                                                                              // 1859
        this.startContainer = doc;                                                                                     // 1860
        this.startOffset = 0;                                                                                          // 1861
        this.endContainer = doc;                                                                                       // 1862
        this.endOffset = 0;                                                                                            // 1863
        this._listeners = {                                                                                            // 1864
            boundarychange: [],                                                                                        // 1865
            detach: []                                                                                                 // 1866
        };                                                                                                             // 1867
        updateCollapsedAndCommonAncestor(this);                                                                        // 1868
    }                                                                                                                  // 1869
                                                                                                                       // 1870
    createPrototypeRange(Range, updateBoundaries, detach);                                                             // 1871
                                                                                                                       // 1872
    api.rangePrototype = RangePrototype.prototype;                                                                     // 1873
                                                                                                                       // 1874
    Range.rangeProperties = rangeProperties;                                                                           // 1875
    Range.RangeIterator = RangeIterator;                                                                               // 1876
    Range.copyComparisonConstants = copyComparisonConstants;                                                           // 1877
    Range.createPrototypeRange = createPrototypeRange;                                                                 // 1878
    Range.inspect = inspect;                                                                                           // 1879
    Range.getRangeDocument = getRangeDocument;                                                                         // 1880
    Range.rangesEqual = function(r1, r2) {                                                                             // 1881
        return r1.startContainer === r2.startContainer &&                                                              // 1882
               r1.startOffset === r2.startOffset &&                                                                    // 1883
               r1.endContainer === r2.endContainer &&                                                                  // 1884
               r1.endOffset === r2.endOffset;                                                                          // 1885
    };                                                                                                                 // 1886
                                                                                                                       // 1887
    api.DomRange = Range;                                                                                              // 1888
    api.RangeException = RangeException;                                                                               // 1889
});rangy.createModule("WrappedRange", function(api, module) {                                                          // 1890
    api.requireModules( ["DomUtil", "DomRange"] );                                                                     // 1891
                                                                                                                       // 1892
    /**                                                                                                                // 1893
     * @constructor                                                                                                    // 1894
     */                                                                                                                // 1895
    var WrappedRange;                                                                                                  // 1896
    var dom = api.dom;                                                                                                 // 1897
    var DomPosition = dom.DomPosition;                                                                                 // 1898
    var DomRange = api.DomRange;                                                                                       // 1899
                                                                                                                       // 1900
                                                                                                                       // 1901
                                                                                                                       // 1902
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 1904
    /*                                                                                                                 // 1905
    This is a workaround for a bug where IE returns the wrong container element from the TextRange's parentElement()   // 1906
    method. For example, in the following (where pipes denote the selection boundaries):                               // 1907
                                                                                                                       // 1908
    <ul id="ul"><li id="a">| a </li><li id="b"> b |</li></ul>                                                          // 1909
                                                                                                                       // 1910
    var range = document.selection.createRange();                                                                      // 1911
    alert(range.parentElement().id); // Should alert "ul" but alerts "b"                                               // 1912
                                                                                                                       // 1913
    This method returns the common ancestor node of the following:                                                     // 1914
    - the parentElement() of the textRange                                                                             // 1915
    - the parentElement() of the textRange after calling collapse(true)                                                // 1916
    - the parentElement() of the textRange after calling collapse(false)                                               // 1917
     */                                                                                                                // 1918
    function getTextRangeContainerElement(textRange) {                                                                 // 1919
        var parentEl = textRange.parentElement();                                                                      // 1920
                                                                                                                       // 1921
        var range = textRange.duplicate();                                                                             // 1922
        range.collapse(true);                                                                                          // 1923
        var startEl = range.parentElement();                                                                           // 1924
        range = textRange.duplicate();                                                                                 // 1925
        range.collapse(false);                                                                                         // 1926
        var endEl = range.parentElement();                                                                             // 1927
        var startEndContainer = (startEl == endEl) ? startEl : dom.getCommonAncestor(startEl, endEl);                  // 1928
                                                                                                                       // 1929
        return startEndContainer == parentEl ? startEndContainer : dom.getCommonAncestor(parentEl, startEndContainer); // 1930
    }                                                                                                                  // 1931
                                                                                                                       // 1932
    function textRangeIsCollapsed(textRange) {                                                                         // 1933
        return textRange.compareEndPoints("StartToEnd", textRange) == 0;                                               // 1934
    }                                                                                                                  // 1935
                                                                                                                       // 1936
    // Gets the boundary of a TextRange expressed as a node and an offset within that node. This function started out as
    // an improved version of code found in Tim Cameron Ryan's IERange (http://code.google.com/p/ierange/) but has     // 1938
    // grown, fixing problems with line breaks in preformatted text, adding workaround for IE TextRange bugs, handling // 1939
    // for inputs and images, plus optimizations.                                                                      // 1940
    function getTextRangeBoundaryPosition(textRange, wholeRangeContainerElement, isStart, isCollapsed) {               // 1941
        var workingRange = textRange.duplicate();                                                                      // 1942
                                                                                                                       // 1943
        workingRange.collapse(isStart);                                                                                // 1944
        var containerElement = workingRange.parentElement();                                                           // 1945
                                                                                                                       // 1946
        // Sometimes collapsing a TextRange that's at the start of a text node can move it into the previous node, so  // 1947
        // check for that                                                                                              // 1948
        // TODO: Find out when. Workaround for wholeRangeContainerElement may break this                               // 1949
        if (!dom.isAncestorOf(wholeRangeContainerElement, containerElement, true)) {                                   // 1950
            containerElement = wholeRangeContainerElement;                                                             // 1951
                                                                                                                       // 1952
        }                                                                                                              // 1953
                                                                                                                       // 1954
                                                                                                                       // 1955
                                                                                                                       // 1956
        // Deal with nodes that cannot "contain rich HTML markup". In practice, this means form inputs, images and     // 1957
        // similar. See http://msdn.microsoft.com/en-us/library/aa703950%28VS.85%29.aspx                               // 1958
        if (!containerElement.canHaveHTML) {                                                                           // 1959
            return new DomPosition(containerElement.parentNode, dom.getNodeIndex(containerElement));                   // 1960
        }                                                                                                              // 1961
                                                                                                                       // 1962
        var workingNode = dom.getDocument(containerElement).createElement("span");                                     // 1963
        var comparison, workingComparisonType = isStart ? "StartToStart" : "StartToEnd";                               // 1964
        var previousNode, nextNode, boundaryPosition, boundaryNode;                                                    // 1965
                                                                                                                       // 1966
        // Move the working range through the container's children, starting at the end and working backwards, until the
        // working range reaches or goes past the boundary we're interested in                                         // 1968
        do {                                                                                                           // 1969
            containerElement.insertBefore(workingNode, workingNode.previousSibling);                                   // 1970
            workingRange.moveToElementText(workingNode);                                                               // 1971
        } while ( (comparison = workingRange.compareEndPoints(workingComparisonType, textRange)) > 0 &&                // 1972
                workingNode.previousSibling);                                                                          // 1973
                                                                                                                       // 1974
        // We've now reached or gone past the boundary of the text range we're interested in                           // 1975
        // so have identified the node we want                                                                         // 1976
        boundaryNode = workingNode.nextSibling;                                                                        // 1977
                                                                                                                       // 1978
        if (comparison == -1 && boundaryNode && dom.isCharacterDataNode(boundaryNode)) {                               // 1979
            // This is a character data node (text, comment, cdata). The working range is collapsed at the start of the
            // node containing the text range's boundary, so we move the end of the working range to the boundary point
            // and measure the length of its text to get the boundary's offset within the node.                        // 1982
            workingRange.setEndPoint(isStart ? "EndToStart" : "EndToEnd", textRange);                                  // 1983
                                                                                                                       // 1984
                                                                                                                       // 1985
            var offset;                                                                                                // 1986
                                                                                                                       // 1987
            if (/[\r\n]/.test(boundaryNode.data)) {                                                                    // 1988
                /*                                                                                                     // 1989
                For the particular case of a boundary within a text node containing line breaks (within a <pre> element,
                for example), we need a slightly complicated approach to get the boundary's offset in IE. The facts:   // 1991
                                                                                                                       // 1992
                - Each line break is represented as \r in the text node's data/nodeValue properties                    // 1993
                - Each line break is represented as \r\n in the TextRange's 'text' property                            // 1994
                - The 'text' property of the TextRange does not contain trailing line breaks                           // 1995
                                                                                                                       // 1996
                To get round the problem presented by the final fact above, we can use the fact that TextRange's       // 1997
                moveStart() and moveEnd() methods return the actual number of characters moved, which is not necessarily
                the same as the number of characters it was instructed to move. The simplest approach is to use this to
                store the characters moved when moving both the start and end of the range to the start of the document
                body and subtracting the start offset from the end offset (the "move-negative-gazillion" method).      // 2001
                However, this is extremely slow when the document is large and the range is near the end of it. Clearly
                doing the mirror image (i.e. moving the range boundaries to the end of the document) has the same      // 2003
                problem.                                                                                               // 2004
                                                                                                                       // 2005
                Another approach that works is to use moveStart() to move the start boundary of the range up to the end
                boundary one character at a time and incrementing a counter with the value returned by the moveStart() // 2007
                call. However, the check for whether the start boundary has reached the end boundary is expensive, so  // 2008
                this method is slow (although unlike "move-negative-gazillion" is largely unaffected by the location of
                the range within the document).                                                                        // 2010
                                                                                                                       // 2011
                The method below is a hybrid of the two methods above. It uses the fact that a string containing the   // 2012
                TextRange's 'text' property with each \r\n converted to a single \r character cannot be longer than the
                text of the TextRange, so the start of the range is moved that length initially and then a character at
                a time to make up for any trailing line breaks not contained in the 'text' property. This has good     // 2015
                performance in most situations compared to the previous two methods.                                   // 2016
                */                                                                                                     // 2017
                var tempRange = workingRange.duplicate();                                                              // 2018
                var rangeLength = tempRange.text.replace(/\r\n/g, "\r").length;                                        // 2019
                                                                                                                       // 2020
                offset = tempRange.moveStart("character", rangeLength);                                                // 2021
                while ( (comparison = tempRange.compareEndPoints("StartToEnd", tempRange)) == -1) {                    // 2022
                    offset++;                                                                                          // 2023
                    tempRange.moveStart("character", 1);                                                               // 2024
                }                                                                                                      // 2025
            } else {                                                                                                   // 2026
                offset = workingRange.text.length;                                                                     // 2027
            }                                                                                                          // 2028
            boundaryPosition = new DomPosition(boundaryNode, offset);                                                  // 2029
        } else {                                                                                                       // 2030
                                                                                                                       // 2031
                                                                                                                       // 2032
            // If the boundary immediately follows a character data node and this is the end boundary, we should favour
            // a position within that, and likewise for a start boundary preceding a character data node               // 2034
            previousNode = (isCollapsed || !isStart) && workingNode.previousSibling;                                   // 2035
            nextNode = (isCollapsed || isStart) && workingNode.nextSibling;                                            // 2036
                                                                                                                       // 2037
                                                                                                                       // 2038
                                                                                                                       // 2039
            if (nextNode && dom.isCharacterDataNode(nextNode)) {                                                       // 2040
                boundaryPosition = new DomPosition(nextNode, 0);                                                       // 2041
            } else if (previousNode && dom.isCharacterDataNode(previousNode)) {                                        // 2042
                boundaryPosition = new DomPosition(previousNode, previousNode.length);                                 // 2043
            } else {                                                                                                   // 2044
                boundaryPosition = new DomPosition(containerElement, dom.getNodeIndex(workingNode));                   // 2045
            }                                                                                                          // 2046
        }                                                                                                              // 2047
                                                                                                                       // 2048
        // Clean up                                                                                                    // 2049
        workingNode.parentNode.removeChild(workingNode);                                                               // 2050
                                                                                                                       // 2051
        return boundaryPosition;                                                                                       // 2052
    }                                                                                                                  // 2053
                                                                                                                       // 2054
    // Returns a TextRange representing the boundary of a TextRange expressed as a node and an offset within that node.
    // This function started out as an optimized version of code found in Tim Cameron Ryan's IERange                   // 2056
    // (http://code.google.com/p/ierange/)                                                                             // 2057
    function createBoundaryTextRange(boundaryPosition, isStart) {                                                      // 2058
        var boundaryNode, boundaryParent, boundaryOffset = boundaryPosition.offset;                                    // 2059
        var doc = dom.getDocument(boundaryPosition.node);                                                              // 2060
        var workingNode, childNodes, workingRange = doc.body.createTextRange();                                        // 2061
        var nodeIsDataNode = dom.isCharacterDataNode(boundaryPosition.node);                                           // 2062
                                                                                                                       // 2063
        if (nodeIsDataNode) {                                                                                          // 2064
            boundaryNode = boundaryPosition.node;                                                                      // 2065
            boundaryParent = boundaryNode.parentNode;                                                                  // 2066
        } else {                                                                                                       // 2067
            childNodes = boundaryPosition.node.childNodes;                                                             // 2068
            boundaryNode = (boundaryOffset < childNodes.length) ? childNodes[boundaryOffset] : null;                   // 2069
            boundaryParent = boundaryPosition.node;                                                                    // 2070
        }                                                                                                              // 2071
                                                                                                                       // 2072
        // Position the range immediately before the node containing the boundary                                      // 2073
        workingNode = doc.createElement("span");                                                                       // 2074
                                                                                                                       // 2075
        // Making the working element non-empty element persuades IE to consider the TextRange boundary to be within the
        // element rather than immediately before or after it, which is what we want                                   // 2077
        workingNode.innerHTML = "&#feff;";                                                                             // 2078
                                                                                                                       // 2079
        // insertBefore is supposed to work like appendChild if the second parameter is null. However, a bug report    // 2080
        // for IERange suggests that it can crash the browser: http://code.google.com/p/ierange/issues/detail?id=12    // 2081
        if (boundaryNode) {                                                                                            // 2082
            boundaryParent.insertBefore(workingNode, boundaryNode);                                                    // 2083
        } else {                                                                                                       // 2084
            boundaryParent.appendChild(workingNode);                                                                   // 2085
        }                                                                                                              // 2086
                                                                                                                       // 2087
        workingRange.moveToElementText(workingNode);                                                                   // 2088
        workingRange.collapse(!isStart);                                                                               // 2089
                                                                                                                       // 2090
        // Clean up                                                                                                    // 2091
        boundaryParent.removeChild(workingNode);                                                                       // 2092
                                                                                                                       // 2093
        // Move the working range to the text offset, if required                                                      // 2094
        if (nodeIsDataNode) {                                                                                          // 2095
            workingRange[isStart ? "moveStart" : "moveEnd"]("character", boundaryOffset);                              // 2096
        }                                                                                                              // 2097
                                                                                                                       // 2098
        return workingRange;                                                                                           // 2099
    }                                                                                                                  // 2100
                                                                                                                       // 2101
    /*----------------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2103
    if (api.features.implementsDomRange && (!api.features.implementsTextRange || !api.config.preferTextRange)) {       // 2104
        // This is a wrapper around the browser's native DOM Range. It has two aims:                                   // 2105
        // - Provide workarounds for specific browser bugs                                                             // 2106
        // - provide convenient extensions, which are inherited from Rangy's DomRange                                  // 2107
                                                                                                                       // 2108
        (function() {                                                                                                  // 2109
            var rangeProto;                                                                                            // 2110
            var rangeProperties = DomRange.rangeProperties;                                                            // 2111
            var canSetRangeStartAfterEnd;                                                                              // 2112
                                                                                                                       // 2113
            function updateRangeProperties(range) {                                                                    // 2114
                var i = rangeProperties.length, prop;                                                                  // 2115
                while (i--) {                                                                                          // 2116
                    prop = rangeProperties[i];                                                                         // 2117
                    range[prop] = range.nativeRange[prop];                                                             // 2118
                }                                                                                                      // 2119
            }                                                                                                          // 2120
                                                                                                                       // 2121
            function updateNativeRange(range, startContainer, startOffset, endContainer,endOffset) {                   // 2122
                var startMoved = (range.startContainer !== startContainer || range.startOffset != startOffset);        // 2123
                var endMoved = (range.endContainer !== endContainer || range.endOffset != endOffset);                  // 2124
                                                                                                                       // 2125
                // Always set both boundaries for the benefit of IE9 (see issue 35)                                    // 2126
                if (startMoved || endMoved) {                                                                          // 2127
                    range.setEnd(endContainer, endOffset);                                                             // 2128
                    range.setStart(startContainer, startOffset);                                                       // 2129
                }                                                                                                      // 2130
            }                                                                                                          // 2131
                                                                                                                       // 2132
            function detach(range) {                                                                                   // 2133
                range.nativeRange.detach();                                                                            // 2134
                range.detached = true;                                                                                 // 2135
                var i = rangeProperties.length, prop;                                                                  // 2136
                while (i--) {                                                                                          // 2137
                    prop = rangeProperties[i];                                                                         // 2138
                    range[prop] = null;                                                                                // 2139
                }                                                                                                      // 2140
            }                                                                                                          // 2141
                                                                                                                       // 2142
            var createBeforeAfterNodeSetter;                                                                           // 2143
                                                                                                                       // 2144
            WrappedRange = function(range) {                                                                           // 2145
                if (!range) {                                                                                          // 2146
                    throw new Error("Range must be specified");                                                        // 2147
                }                                                                                                      // 2148
                this.nativeRange = range;                                                                              // 2149
                updateRangeProperties(this);                                                                           // 2150
            };                                                                                                         // 2151
                                                                                                                       // 2152
            DomRange.createPrototypeRange(WrappedRange, updateNativeRange, detach);                                    // 2153
                                                                                                                       // 2154
            rangeProto = WrappedRange.prototype;                                                                       // 2155
                                                                                                                       // 2156
            rangeProto.selectNode = function(node) {                                                                   // 2157
                this.nativeRange.selectNode(node);                                                                     // 2158
                updateRangeProperties(this);                                                                           // 2159
            };                                                                                                         // 2160
                                                                                                                       // 2161
            rangeProto.deleteContents = function() {                                                                   // 2162
                this.nativeRange.deleteContents();                                                                     // 2163
                updateRangeProperties(this);                                                                           // 2164
            };                                                                                                         // 2165
                                                                                                                       // 2166
            rangeProto.extractContents = function() {                                                                  // 2167
                var frag = this.nativeRange.extractContents();                                                         // 2168
                updateRangeProperties(this);                                                                           // 2169
                return frag;                                                                                           // 2170
            };                                                                                                         // 2171
                                                                                                                       // 2172
            rangeProto.cloneContents = function() {                                                                    // 2173
                return this.nativeRange.cloneContents();                                                               // 2174
            };                                                                                                         // 2175
                                                                                                                       // 2176
            // TODO: Until I can find a way to programmatically trigger the Firefox bug (apparently long-standing, still
            // present in 3.6.8) that throws "Index or size is negative or greater than the allowed amount" for        // 2178
            // insertNode in some circumstances, all browsers will have to use the Rangy's own implementation of       // 2179
            // insertNode, which works but is almost certainly slower than the native implementation.                  // 2180
/*                                                                                                                     // 2181
            rangeProto.insertNode = function(node) {                                                                   // 2182
                this.nativeRange.insertNode(node);                                                                     // 2183
                updateRangeProperties(this);                                                                           // 2184
            };                                                                                                         // 2185
*/                                                                                                                     // 2186
                                                                                                                       // 2187
            rangeProto.surroundContents = function(node) {                                                             // 2188
                this.nativeRange.surroundContents(node);                                                               // 2189
                updateRangeProperties(this);                                                                           // 2190
            };                                                                                                         // 2191
                                                                                                                       // 2192
            rangeProto.collapse = function(isStart) {                                                                  // 2193
                this.nativeRange.collapse(isStart);                                                                    // 2194
                updateRangeProperties(this);                                                                           // 2195
            };                                                                                                         // 2196
                                                                                                                       // 2197
            rangeProto.cloneRange = function() {                                                                       // 2198
                return new WrappedRange(this.nativeRange.cloneRange());                                                // 2199
            };                                                                                                         // 2200
                                                                                                                       // 2201
            rangeProto.refresh = function() {                                                                          // 2202
                updateRangeProperties(this);                                                                           // 2203
            };                                                                                                         // 2204
                                                                                                                       // 2205
            rangeProto.toString = function() {                                                                         // 2206
                return this.nativeRange.toString();                                                                    // 2207
            };                                                                                                         // 2208
                                                                                                                       // 2209
            // Create test range and node for feature detection                                                        // 2210
                                                                                                                       // 2211
            var testTextNode = document.createTextNode("test");                                                        // 2212
            dom.getBody(document).appendChild(testTextNode);                                                           // 2213
            var range = document.createRange();                                                                        // 2214
                                                                                                                       // 2215
            /*--------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2217
            // Test for Firefox 2 bug that prevents moving the start of a Range to a point after its current end and   // 2218
            // correct for it                                                                                          // 2219
                                                                                                                       // 2220
            range.setStart(testTextNode, 0);                                                                           // 2221
            range.setEnd(testTextNode, 0);                                                                             // 2222
                                                                                                                       // 2223
            try {                                                                                                      // 2224
                range.setStart(testTextNode, 1);                                                                       // 2225
                canSetRangeStartAfterEnd = true;                                                                       // 2226
                                                                                                                       // 2227
                rangeProto.setStart = function(node, offset) {                                                         // 2228
                    this.nativeRange.setStart(node, offset);                                                           // 2229
                    updateRangeProperties(this);                                                                       // 2230
                };                                                                                                     // 2231
                                                                                                                       // 2232
                rangeProto.setEnd = function(node, offset) {                                                           // 2233
                    this.nativeRange.setEnd(node, offset);                                                             // 2234
                    updateRangeProperties(this);                                                                       // 2235
                };                                                                                                     // 2236
                                                                                                                       // 2237
                createBeforeAfterNodeSetter = function(name) {                                                         // 2238
                    return function(node) {                                                                            // 2239
                        this.nativeRange[name](node);                                                                  // 2240
                        updateRangeProperties(this);                                                                   // 2241
                    };                                                                                                 // 2242
                };                                                                                                     // 2243
                                                                                                                       // 2244
            } catch(ex) {                                                                                              // 2245
                                                                                                                       // 2246
                                                                                                                       // 2247
                canSetRangeStartAfterEnd = false;                                                                      // 2248
                                                                                                                       // 2249
                rangeProto.setStart = function(node, offset) {                                                         // 2250
                    try {                                                                                              // 2251
                        this.nativeRange.setStart(node, offset);                                                       // 2252
                    } catch (ex) {                                                                                     // 2253
                        this.nativeRange.setEnd(node, offset);                                                         // 2254
                        this.nativeRange.setStart(node, offset);                                                       // 2255
                    }                                                                                                  // 2256
                    updateRangeProperties(this);                                                                       // 2257
                };                                                                                                     // 2258
                                                                                                                       // 2259
                rangeProto.setEnd = function(node, offset) {                                                           // 2260
                    try {                                                                                              // 2261
                        this.nativeRange.setEnd(node, offset);                                                         // 2262
                    } catch (ex) {                                                                                     // 2263
                        this.nativeRange.setStart(node, offset);                                                       // 2264
                        this.nativeRange.setEnd(node, offset);                                                         // 2265
                    }                                                                                                  // 2266
                    updateRangeProperties(this);                                                                       // 2267
                };                                                                                                     // 2268
                                                                                                                       // 2269
                createBeforeAfterNodeSetter = function(name, oppositeName) {                                           // 2270
                    return function(node) {                                                                            // 2271
                        try {                                                                                          // 2272
                            this.nativeRange[name](node);                                                              // 2273
                        } catch (ex) {                                                                                 // 2274
                            this.nativeRange[oppositeName](node);                                                      // 2275
                            this.nativeRange[name](node);                                                              // 2276
                        }                                                                                              // 2277
                        updateRangeProperties(this);                                                                   // 2278
                    };                                                                                                 // 2279
                };                                                                                                     // 2280
            }                                                                                                          // 2281
                                                                                                                       // 2282
            rangeProto.setStartBefore = createBeforeAfterNodeSetter("setStartBefore", "setEndBefore");                 // 2283
            rangeProto.setStartAfter = createBeforeAfterNodeSetter("setStartAfter", "setEndAfter");                    // 2284
            rangeProto.setEndBefore = createBeforeAfterNodeSetter("setEndBefore", "setStartBefore");                   // 2285
            rangeProto.setEndAfter = createBeforeAfterNodeSetter("setEndAfter", "setStartAfter");                      // 2286
                                                                                                                       // 2287
            /*--------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2289
            // Test for and correct Firefox 2 behaviour with selectNodeContents on text nodes: it collapses the range to
            // the 0th character of the text node                                                                      // 2291
            range.selectNodeContents(testTextNode);                                                                    // 2292
            if (range.startContainer == testTextNode && range.endContainer == testTextNode &&                          // 2293
                    range.startOffset == 0 && range.endOffset == testTextNode.length) {                                // 2294
                rangeProto.selectNodeContents = function(node) {                                                       // 2295
                    this.nativeRange.selectNodeContents(node);                                                         // 2296
                    updateRangeProperties(this);                                                                       // 2297
                };                                                                                                     // 2298
            } else {                                                                                                   // 2299
                rangeProto.selectNodeContents = function(node) {                                                       // 2300
                    this.setStart(node, 0);                                                                            // 2301
                    this.setEnd(node, DomRange.getEndOffset(node));                                                    // 2302
                };                                                                                                     // 2303
            }                                                                                                          // 2304
                                                                                                                       // 2305
            /*--------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2307
            // Test for WebKit bug that has the beahviour of compareBoundaryPoints round the wrong way for constants   // 2308
            // START_TO_END and END_TO_START: https://bugs.webkit.org/show_bug.cgi?id=20738                            // 2309
                                                                                                                       // 2310
            range.selectNodeContents(testTextNode);                                                                    // 2311
            range.setEnd(testTextNode, 3);                                                                             // 2312
                                                                                                                       // 2313
            var range2 = document.createRange();                                                                       // 2314
            range2.selectNodeContents(testTextNode);                                                                   // 2315
            range2.setEnd(testTextNode, 4);                                                                            // 2316
            range2.setStart(testTextNode, 2);                                                                          // 2317
                                                                                                                       // 2318
            if (range.compareBoundaryPoints(range.START_TO_END, range2) == -1 &                                        // 2319
                    range.compareBoundaryPoints(range.END_TO_START, range2) == 1) {                                    // 2320
                // This is the wrong way round, so correct for it                                                      // 2321
                                                                                                                       // 2322
                                                                                                                       // 2323
                rangeProto.compareBoundaryPoints = function(type, range) {                                             // 2324
                    range = range.nativeRange || range;                                                                // 2325
                    if (type == range.START_TO_END) {                                                                  // 2326
                        type = range.END_TO_START;                                                                     // 2327
                    } else if (type == range.END_TO_START) {                                                           // 2328
                        type = range.START_TO_END;                                                                     // 2329
                    }                                                                                                  // 2330
                    return this.nativeRange.compareBoundaryPoints(type, range);                                        // 2331
                };                                                                                                     // 2332
            } else {                                                                                                   // 2333
                rangeProto.compareBoundaryPoints = function(type, range) {                                             // 2334
                    return this.nativeRange.compareBoundaryPoints(type, range.nativeRange || range);                   // 2335
                };                                                                                                     // 2336
            }                                                                                                          // 2337
                                                                                                                       // 2338
            /*--------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2340
            // Test for existence of createContextualFragment and delegate to it if it exists                          // 2341
            if (api.util.isHostMethod(range, "createContextualFragment")) {                                            // 2342
                rangeProto.createContextualFragment = function(fragmentStr) {                                          // 2343
                    return this.nativeRange.createContextualFragment(fragmentStr);                                     // 2344
                };                                                                                                     // 2345
            }                                                                                                          // 2346
                                                                                                                       // 2347
            /*--------------------------------------------------------------------------------------------------------*/
                                                                                                                       // 2349
            // Clean up                                                                                                // 2350
            dom.getBody(document).removeChild(testTextNode);                                                           // 2351
            range.detach();                                                                                            // 2352
            range2.detach();                                                                                           // 2353
        })();                                                                                                          // 2354
                                                                                                                       // 2355
        api.createNativeRange = function(doc) {                                                                        // 2356
            doc = doc || document;                                                                                     // 2357
            return doc.createRange();                                                                                  // 2358
        };                                                                                                             // 2359
    } else if (api.features.implementsTextRange) {                                                                     // 2360
        // This is a wrapper around a TextRange, providing full DOM Range functionality using rangy's DomRange as a    // 2361
        // prototype                                                                                                   // 2362
                                                                                                                       // 2363
        WrappedRange = function(textRange) {                                                                           // 2364
            this.textRange = textRange;                                                                                // 2365
            this.refresh();                                                                                            // 2366
        };                                                                                                             // 2367
                                                                                                                       // 2368
        WrappedRange.prototype = new DomRange(document);                                                               // 2369
                                                                                                                       // 2370
        WrappedRange.prototype.refresh = function() {                                                                  // 2371
            var start, end;                                                                                            // 2372
                                                                                                                       // 2373
            // TextRange's parentElement() method cannot be trusted. getTextRangeContainerElement() works around that. // 2374
            var rangeContainerElement = getTextRangeContainerElement(this.textRange);                                  // 2375
                                                                                                                       // 2376
            if (textRangeIsCollapsed(this.textRange)) {                                                                // 2377
                end = start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, true);         // 2378
            } else {                                                                                                   // 2379
                                                                                                                       // 2380
                start = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, true, false);              // 2381
                end = getTextRangeBoundaryPosition(this.textRange, rangeContainerElement, false, false);               // 2382
            }                                                                                                          // 2383
                                                                                                                       // 2384
            this.setStart(start.node, start.offset);                                                                   // 2385
            this.setEnd(end.node, end.offset);                                                                         // 2386
        };                                                                                                             // 2387
                                                                                                                       // 2388
        DomRange.copyComparisonConstants(WrappedRange);                                                                // 2389
                                                                                                                       // 2390
        // Add WrappedRange as the Range property of the global object to allow expression like Range.END_TO_END to work
        var globalObj = (function() { return this; })();                                                               // 2392
        if (typeof globalObj.Range == "undefined") {                                                                   // 2393
            globalObj.Range = WrappedRange;                                                                            // 2394
        }                                                                                                              // 2395
                                                                                                                       // 2396
        api.createNativeRange = function(doc) {                                                                        // 2397
            doc = doc || document;                                                                                     // 2398
            return doc.body.createTextRange();                                                                         // 2399
        };                                                                                                             // 2400
    }                                                                                                                  // 2401
                                                                                                                       // 2402
    if (api.features.implementsTextRange) {                                                                            // 2403
        WrappedRange.rangeToTextRange = function(range) {                                                              // 2404
            if (range.collapsed) {                                                                                     // 2405
                var tr = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);      // 2406
                                                                                                                       // 2407
                                                                                                                       // 2408
                                                                                                                       // 2409
                return tr;                                                                                             // 2410
                                                                                                                       // 2411
                //return createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);      // 2412
            } else {                                                                                                   // 2413
                var startRange = createBoundaryTextRange(new DomPosition(range.startContainer, range.startOffset), true);
                var endRange = createBoundaryTextRange(new DomPosition(range.endContainer, range.endOffset), false);   // 2415
                var textRange = dom.getDocument(range.startContainer).body.createTextRange();                          // 2416
                textRange.setEndPoint("StartToStart", startRange);                                                     // 2417
                textRange.setEndPoint("EndToEnd", endRange);                                                           // 2418
                return textRange;                                                                                      // 2419
            }                                                                                                          // 2420
        };                                                                                                             // 2421
    }                                                                                                                  // 2422
                                                                                                                       // 2423
    WrappedRange.prototype.getName = function() {                                                                      // 2424
        return "WrappedRange";                                                                                         // 2425
    };                                                                                                                 // 2426
                                                                                                                       // 2427
    api.WrappedRange = WrappedRange;                                                                                   // 2428
                                                                                                                       // 2429
    api.createRange = function(doc) {                                                                                  // 2430
        doc = doc || document;                                                                                         // 2431
        return new WrappedRange(api.createNativeRange(doc));                                                           // 2432
    };                                                                                                                 // 2433
                                                                                                                       // 2434
    api.createRangyRange = function(doc) {                                                                             // 2435
        doc = doc || document;                                                                                         // 2436
        return new DomRange(doc);                                                                                      // 2437
    };                                                                                                                 // 2438
                                                                                                                       // 2439
    api.createIframeRange = function(iframeEl) {                                                                       // 2440
        return api.createRange(dom.getIframeDocument(iframeEl));                                                       // 2441
    };                                                                                                                 // 2442
                                                                                                                       // 2443
    api.createIframeRangyRange = function(iframeEl) {                                                                  // 2444
        return api.createRangyRange(dom.getIframeDocument(iframeEl));                                                  // 2445
    };                                                                                                                 // 2446
                                                                                                                       // 2447
    api.addCreateMissingNativeApiListener(function(win) {                                                              // 2448
        var doc = win.document;                                                                                        // 2449
        if (typeof doc.createRange == "undefined") {                                                                   // 2450
            doc.createRange = function() {                                                                             // 2451
                return api.createRange(this);                                                                          // 2452
            };                                                                                                         // 2453
        }                                                                                                              // 2454
        doc = win = null;                                                                                              // 2455
    });                                                                                                                // 2456
});rangy.createModule("WrappedSelection", function(api, module) {                                                      // 2457
    // This will create a selection object wrapper that follows the Selection object found in the WHATWG draft DOM Range
    // spec (http://html5.org/specs/dom-range.html)                                                                    // 2459
                                                                                                                       // 2460
    api.requireModules( ["DomUtil", "DomRange", "WrappedRange"] );                                                     // 2461
                                                                                                                       // 2462
    api.config.checkSelectionRanges = true;                                                                            // 2463
                                                                                                                       // 2464
    var BOOLEAN = "boolean",                                                                                           // 2465
        windowPropertyName = "_rangySelection",                                                                        // 2466
        dom = api.dom,                                                                                                 // 2467
        util = api.util,                                                                                               // 2468
        DomRange = api.DomRange,                                                                                       // 2469
        WrappedRange = api.WrappedRange,                                                                               // 2470
        DOMException = api.DOMException,                                                                               // 2471
        DomPosition = dom.DomPosition,                                                                                 // 2472
        getSelection,                                                                                                  // 2473
        selectionIsCollapsed,                                                                                          // 2474
        CONTROL = "Control";                                                                                           // 2475
                                                                                                                       // 2476
                                                                                                                       // 2477
                                                                                                                       // 2478
    function getWinSelection(winParam) {                                                                               // 2479
        return (winParam || window).getSelection();                                                                    // 2480
    }                                                                                                                  // 2481
                                                                                                                       // 2482
    function getDocSelection(winParam) {                                                                               // 2483
        return (winParam || window).document.selection;                                                                // 2484
    }                                                                                                                  // 2485
                                                                                                                       // 2486
    // Test for the Range/TextRange and Selection features required                                                    // 2487
    // Test for ability to retrieve selection                                                                          // 2488
    var implementsWinGetSelection = api.util.isHostMethod(window, "getSelection"),                                     // 2489
        implementsDocSelection = api.util.isHostObject(document, "selection");                                         // 2490
                                                                                                                       // 2491
    var useDocumentSelection = implementsDocSelection && (!implementsWinGetSelection || api.config.preferTextRange);   // 2492
                                                                                                                       // 2493
    if (useDocumentSelection) {                                                                                        // 2494
        getSelection = getDocSelection;                                                                                // 2495
        api.isSelectionValid = function(winParam) {                                                                    // 2496
            var doc = (winParam || window).document, nativeSel = doc.selection;                                        // 2497
                                                                                                                       // 2498
            // Check whether the selection TextRange is actually contained within the correct document                 // 2499
            return (nativeSel.type != "None" || dom.getDocument(nativeSel.createRange().parentElement()) == doc);      // 2500
        };                                                                                                             // 2501
    } else if (implementsWinGetSelection) {                                                                            // 2502
        getSelection = getWinSelection;                                                                                // 2503
        api.isSelectionValid = function() {                                                                            // 2504
            return true;                                                                                               // 2505
        };                                                                                                             // 2506
    } else {                                                                                                           // 2507
        module.fail("Neither document.selection or window.getSelection() detected.");                                  // 2508
    }                                                                                                                  // 2509
                                                                                                                       // 2510
    api.getNativeSelection = getSelection;                                                                             // 2511
                                                                                                                       // 2512
    var testSelection = getSelection();                                                                                // 2513
    var testRange = api.createNativeRange(document);                                                                   // 2514
    var body = dom.getBody(document);                                                                                  // 2515
                                                                                                                       // 2516
    // Obtaining a range from a selection                                                                              // 2517
    var selectionHasAnchorAndFocus = util.areHostObjects(testSelection, ["anchorNode", "focusNode"] &&                 // 2518
                                     util.areHostProperties(testSelection, ["anchorOffset", "focusOffset"]));          // 2519
    api.features.selectionHasAnchorAndFocus = selectionHasAnchorAndFocus;                                              // 2520
                                                                                                                       // 2521
    // Test for existence of native selection extend() method                                                          // 2522
    var selectionHasExtend = util.isHostMethod(testSelection, "extend");                                               // 2523
    api.features.selectionHasExtend = selectionHasExtend;                                                              // 2524
                                                                                                                       // 2525
    // Test if rangeCount exists                                                                                       // 2526
    var selectionHasRangeCount = (typeof testSelection.rangeCount == "number");                                        // 2527
    api.features.selectionHasRangeCount = selectionHasRangeCount;                                                      // 2528
                                                                                                                       // 2529
    var selectionSupportsMultipleRanges = false;                                                                       // 2530
    var collapsedNonEditableSelectionsSupported = true;                                                                // 2531
                                                                                                                       // 2532
    if (util.areHostMethods(testSelection, ["addRange", "getRangeAt", "removeAllRanges"]) &&                           // 2533
            typeof testSelection.rangeCount == "number" && api.features.implementsDomRange) {                          // 2534
                                                                                                                       // 2535
        (function() {                                                                                                  // 2536
            var iframe = document.createElement("iframe");                                                             // 2537
            body.appendChild(iframe);                                                                                  // 2538
                                                                                                                       // 2539
            var iframeDoc = dom.getIframeDocument(iframe);                                                             // 2540
            iframeDoc.open();                                                                                          // 2541
            iframeDoc.write("<html><head></head><body>12</body></html>");                                              // 2542
            iframeDoc.close();                                                                                         // 2543
                                                                                                                       // 2544
            var sel = dom.getIframeWindow(iframe).getSelection();                                                      // 2545
            var docEl = iframeDoc.documentElement;                                                                     // 2546
            var iframeBody = docEl.lastChild, textNode = iframeBody.firstChild;                                        // 2547
                                                                                                                       // 2548
            // Test whether the native selection will allow a collapsed selection within a non-editable element        // 2549
            var r1 = iframeDoc.createRange();                                                                          // 2550
            r1.setStart(textNode, 1);                                                                                  // 2551
            r1.collapse(true);                                                                                         // 2552
            sel.addRange(r1);                                                                                          // 2553
            collapsedNonEditableSelectionsSupported = (sel.rangeCount == 1);                                           // 2554
            sel.removeAllRanges();                                                                                     // 2555
                                                                                                                       // 2556
            // Test whether the native selection is capable of supporting multiple ranges                              // 2557
            var r2 = r1.cloneRange();                                                                                  // 2558
            r1.setStart(textNode, 0);                                                                                  // 2559
            r2.setEnd(textNode, 2);                                                                                    // 2560
            sel.addRange(r1);                                                                                          // 2561
            sel.addRange(r2);                                                                                          // 2562
                                                                                                                       // 2563
            selectionSupportsMultipleRanges = (sel.rangeCount == 2);                                                   // 2564
                                                                                                                       // 2565
            // Clean up                                                                                                // 2566
            r1.detach();                                                                                               // 2567
            r2.detach();                                                                                               // 2568
                                                                                                                       // 2569
            body.removeChild(iframe);                                                                                  // 2570
        })();                                                                                                          // 2571
    }                                                                                                                  // 2572
                                                                                                                       // 2573
    api.features.selectionSupportsMultipleRanges = selectionSupportsMultipleRanges;                                    // 2574
    api.features.collapsedNonEditableSelectionsSupported = collapsedNonEditableSelectionsSupported;                    // 2575
                                                                                                                       // 2576
    // ControlRanges                                                                                                   // 2577
    var implementsControlRange = false, testControlRange;                                                              // 2578
                                                                                                                       // 2579
    if (body && util.isHostMethod(body, "createControlRange")) {                                                       // 2580
        testControlRange = body.createControlRange();                                                                  // 2581
        if (util.areHostProperties(testControlRange, ["item", "add"])) {                                               // 2582
            implementsControlRange = true;                                                                             // 2583
        }                                                                                                              // 2584
    }                                                                                                                  // 2585
    api.features.implementsControlRange = implementsControlRange;                                                      // 2586
                                                                                                                       // 2587
    // Selection collapsedness                                                                                         // 2588
    if (selectionHasAnchorAndFocus) {                                                                                  // 2589
        selectionIsCollapsed = function(sel) {                                                                         // 2590
            return sel.anchorNode === sel.focusNode && sel.anchorOffset === sel.focusOffset;                           // 2591
        };                                                                                                             // 2592
    } else {                                                                                                           // 2593
        selectionIsCollapsed = function(sel) {                                                                         // 2594
            return sel.rangeCount ? sel.getRangeAt(sel.rangeCount - 1).collapsed : false;                              // 2595
        };                                                                                                             // 2596
    }                                                                                                                  // 2597
                                                                                                                       // 2598
    function updateAnchorAndFocusFromRange(sel, range, backwards) {                                                    // 2599
        var anchorPrefix = backwards ? "end" : "start", focusPrefix = backwards ? "start" : "end";                     // 2600
        sel.anchorNode = range[anchorPrefix + "Container"];                                                            // 2601
        sel.anchorOffset = range[anchorPrefix + "Offset"];                                                             // 2602
        sel.focusNode = range[focusPrefix + "Container"];                                                              // 2603
        sel.focusOffset = range[focusPrefix + "Offset"];                                                               // 2604
    }                                                                                                                  // 2605
                                                                                                                       // 2606
    function updateAnchorAndFocusFromNativeSelection(sel) {                                                            // 2607
        var nativeSel = sel.nativeSelection;                                                                           // 2608
        sel.anchorNode = nativeSel.anchorNode;                                                                         // 2609
        sel.anchorOffset = nativeSel.anchorOffset;                                                                     // 2610
        sel.focusNode = nativeSel.focusNode;                                                                           // 2611
        sel.focusOffset = nativeSel.focusOffset;                                                                       // 2612
    }                                                                                                                  // 2613
                                                                                                                       // 2614
    function updateEmptySelection(sel) {                                                                               // 2615
        sel.anchorNode = sel.focusNode = null;                                                                         // 2616
        sel.anchorOffset = sel.focusOffset = 0;                                                                        // 2617
        sel.rangeCount = 0;                                                                                            // 2618
        sel.isCollapsed = true;                                                                                        // 2619
        sel._ranges.length = 0;                                                                                        // 2620
    }                                                                                                                  // 2621
                                                                                                                       // 2622
    function getNativeRange(range) {                                                                                   // 2623
        var nativeRange;                                                                                               // 2624
        if (range instanceof DomRange) {                                                                               // 2625
            nativeRange = range._selectionNativeRange;                                                                 // 2626
            if (!nativeRange) {                                                                                        // 2627
                nativeRange = api.createNativeRange(dom.getDocument(range.startContainer));                            // 2628
                nativeRange.setEnd(range.endContainer, range.endOffset);                                               // 2629
                nativeRange.setStart(range.startContainer, range.startOffset);                                         // 2630
                range._selectionNativeRange = nativeRange;                                                             // 2631
                range.attachListener("detach", function() {                                                            // 2632
                                                                                                                       // 2633
                    this._selectionNativeRange = null;                                                                 // 2634
                });                                                                                                    // 2635
            }                                                                                                          // 2636
        } else if (range instanceof WrappedRange) {                                                                    // 2637
            nativeRange = range.nativeRange;                                                                           // 2638
        } else if (api.features.implementsDomRange && (range instanceof dom.getWindow(range.startContainer).Range)) {  // 2639
            nativeRange = range;                                                                                       // 2640
        }                                                                                                              // 2641
        return nativeRange;                                                                                            // 2642
    }                                                                                                                  // 2643
                                                                                                                       // 2644
    function rangeContainsSingleElement(rangeNodes) {                                                                  // 2645
        if (!rangeNodes.length || rangeNodes[0].nodeType != 1) {                                                       // 2646
            return false;                                                                                              // 2647
        }                                                                                                              // 2648
        for (var i = 1, len = rangeNodes.length; i < len; ++i) {                                                       // 2649
            if (!dom.isAncestorOf(rangeNodes[0], rangeNodes[i])) {                                                     // 2650
                return false;                                                                                          // 2651
            }                                                                                                          // 2652
        }                                                                                                              // 2653
        return true;                                                                                                   // 2654
    }                                                                                                                  // 2655
                                                                                                                       // 2656
    function getSingleElementFromRange(range) {                                                                        // 2657
        var nodes = range.getNodes();                                                                                  // 2658
        if (!rangeContainsSingleElement(nodes)) {                                                                      // 2659
            throw new Error("getSingleElementFromRange: range " + range.inspect() + " did not consist of a single element");
        }                                                                                                              // 2661
        return nodes[0];                                                                                               // 2662
    }                                                                                                                  // 2663
                                                                                                                       // 2664
    function isTextRange(range) {                                                                                      // 2665
        return !!range && typeof range.text != "undefined";                                                            // 2666
    }                                                                                                                  // 2667
                                                                                                                       // 2668
    function updateFromTextRange(sel, range) {                                                                         // 2669
        // Create a Range from the selected TextRange                                                                  // 2670
        var wrappedRange = new WrappedRange(range);                                                                    // 2671
        sel._ranges = [wrappedRange];                                                                                  // 2672
                                                                                                                       // 2673
        updateAnchorAndFocusFromRange(sel, wrappedRange, false);                                                       // 2674
        sel.rangeCount = 1;                                                                                            // 2675
        sel.isCollapsed = wrappedRange.collapsed;                                                                      // 2676
    }                                                                                                                  // 2677
                                                                                                                       // 2678
    function updateControlSelection(sel) {                                                                             // 2679
        // Update the wrapped selection based on what's now in the native selection                                    // 2680
        sel._ranges.length = 0;                                                                                        // 2681
        if (sel.docSelection.type == "None") {                                                                         // 2682
            updateEmptySelection(sel);                                                                                 // 2683
        } else {                                                                                                       // 2684
            var controlRange = sel.docSelection.createRange();                                                         // 2685
            if (isTextRange(controlRange)) {                                                                           // 2686
                // This case (where the selection type is "Control" and calling createRange() on the selection returns // 2687
                // a TextRange) can happen in IE 9. It happens, for example, when all elements in the selected         // 2688
                // ControlRange have been removed from the ControlRange and removed from the document.                 // 2689
                updateFromTextRange(sel, controlRange);                                                                // 2690
            } else {                                                                                                   // 2691
                sel.rangeCount = controlRange.length;                                                                  // 2692
                var range, doc = dom.getDocument(controlRange.item(0));                                                // 2693
                for (var i = 0; i < sel.rangeCount; ++i) {                                                             // 2694
                    range = api.createRange(doc);                                                                      // 2695
                    range.selectNode(controlRange.item(i));                                                            // 2696
                    sel._ranges.push(range);                                                                           // 2697
                }                                                                                                      // 2698
                sel.isCollapsed = sel.rangeCount == 1 && sel._ranges[0].collapsed;                                     // 2699
                updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], false);                            // 2700
            }                                                                                                          // 2701
        }                                                                                                              // 2702
    }                                                                                                                  // 2703
                                                                                                                       // 2704
    function addRangeToControlSelection(sel, range) {                                                                  // 2705
        var controlRange = sel.docSelection.createRange();                                                             // 2706
        var rangeElement = getSingleElementFromRange(range);                                                           // 2707
                                                                                                                       // 2708
        // Create a new ControlRange containing all the elements in the selected ControlRange plus the element         // 2709
        // contained by the supplied range                                                                             // 2710
        var doc = dom.getDocument(controlRange.item(0));                                                               // 2711
        var newControlRange = dom.getBody(doc).createControlRange();                                                   // 2712
        for (var i = 0, len = controlRange.length; i < len; ++i) {                                                     // 2713
            newControlRange.add(controlRange.item(i));                                                                 // 2714
        }                                                                                                              // 2715
        try {                                                                                                          // 2716
            newControlRange.add(rangeElement);                                                                         // 2717
        } catch (ex) {                                                                                                 // 2718
            throw new Error("addRange(): Element within the specified Range could not be added to control selection (does it have layout?)");
        }                                                                                                              // 2720
        newControlRange.select();                                                                                      // 2721
                                                                                                                       // 2722
        // Update the wrapped selection based on what's now in the native selection                                    // 2723
        updateControlSelection(sel);                                                                                   // 2724
    }                                                                                                                  // 2725
                                                                                                                       // 2726
    var getSelectionRangeAt;                                                                                           // 2727
                                                                                                                       // 2728
    if (util.isHostMethod(testSelection,  "getRangeAt")) {                                                             // 2729
        getSelectionRangeAt = function(sel, index) {                                                                   // 2730
            try {                                                                                                      // 2731
                return sel.getRangeAt(index);                                                                          // 2732
            } catch(ex) {                                                                                              // 2733
                return null;                                                                                           // 2734
            }                                                                                                          // 2735
        };                                                                                                             // 2736
    } else if (selectionHasAnchorAndFocus) {                                                                           // 2737
        getSelectionRangeAt = function(sel) {                                                                          // 2738
            var doc = dom.getDocument(sel.anchorNode);                                                                 // 2739
            var range = api.createRange(doc);                                                                          // 2740
            range.setStart(sel.anchorNode, sel.anchorOffset);                                                          // 2741
            range.setEnd(sel.focusNode, sel.focusOffset);                                                              // 2742
                                                                                                                       // 2743
            // Handle the case when the selection was selected backwards (from the end to the start in the             // 2744
            // document)                                                                                               // 2745
            if (range.collapsed !== this.isCollapsed) {                                                                // 2746
                range.setStart(sel.focusNode, sel.focusOffset);                                                        // 2747
                range.setEnd(sel.anchorNode, sel.anchorOffset);                                                        // 2748
            }                                                                                                          // 2749
                                                                                                                       // 2750
            return range;                                                                                              // 2751
        };                                                                                                             // 2752
    }                                                                                                                  // 2753
                                                                                                                       // 2754
    /**                                                                                                                // 2755
     * @constructor                                                                                                    // 2756
     */                                                                                                                // 2757
    function WrappedSelection(selection, docSelection, win) {                                                          // 2758
        this.nativeSelection = selection;                                                                              // 2759
        this.docSelection = docSelection;                                                                              // 2760
        this._ranges = [];                                                                                             // 2761
        this.win = win;                                                                                                // 2762
        this.refresh();                                                                                                // 2763
    }                                                                                                                  // 2764
                                                                                                                       // 2765
    api.getSelection = function(win) {                                                                                 // 2766
        win = win || window;                                                                                           // 2767
        var sel = win[windowPropertyName];                                                                             // 2768
        var nativeSel = getSelection(win), docSel = implementsDocSelection ? getDocSelection(win) : null;              // 2769
        if (sel) {                                                                                                     // 2770
            sel.nativeSelection = nativeSel;                                                                           // 2771
            sel.docSelection = docSel;                                                                                 // 2772
            sel.refresh(win);                                                                                          // 2773
        } else {                                                                                                       // 2774
            sel = new WrappedSelection(nativeSel, docSel, win);                                                        // 2775
            win[windowPropertyName] = sel;                                                                             // 2776
        }                                                                                                              // 2777
        return sel;                                                                                                    // 2778
    };                                                                                                                 // 2779
                                                                                                                       // 2780
    api.getIframeSelection = function(iframeEl) {                                                                      // 2781
        return api.getSelection(dom.getIframeWindow(iframeEl));                                                        // 2782
    };                                                                                                                 // 2783
                                                                                                                       // 2784
    var selProto = WrappedSelection.prototype;                                                                         // 2785
                                                                                                                       // 2786
    function createControlSelection(sel, ranges) {                                                                     // 2787
        // Ensure that the selection becomes of type "Control"                                                         // 2788
        var doc = dom.getDocument(ranges[0].startContainer);                                                           // 2789
        var controlRange = dom.getBody(doc).createControlRange();                                                      // 2790
        for (var i = 0, el; i < rangeCount; ++i) {                                                                     // 2791
            el = getSingleElementFromRange(ranges[i]);                                                                 // 2792
            try {                                                                                                      // 2793
                controlRange.add(el);                                                                                  // 2794
            } catch (ex) {                                                                                             // 2795
                throw new Error("setRanges(): Element within the one of the specified Ranges could not be added to control selection (does it have layout?)");
            }                                                                                                          // 2797
        }                                                                                                              // 2798
        controlRange.select();                                                                                         // 2799
                                                                                                                       // 2800
        // Update the wrapped selection based on what's now in the native selection                                    // 2801
        updateControlSelection(sel);                                                                                   // 2802
    }                                                                                                                  // 2803
                                                                                                                       // 2804
    // Selecting a range                                                                                               // 2805
    if (!useDocumentSelection && selectionHasAnchorAndFocus && util.areHostMethods(testSelection, ["removeAllRanges", "addRange"])) {
        selProto.removeAllRanges = function() {                                                                        // 2807
            this.nativeSelection.removeAllRanges();                                                                    // 2808
            updateEmptySelection(this);                                                                                // 2809
        };                                                                                                             // 2810
                                                                                                                       // 2811
        var addRangeBackwards = function(sel, range) {                                                                 // 2812
            var doc = DomRange.getRangeDocument(range);                                                                // 2813
            var endRange = api.createRange(doc);                                                                       // 2814
            endRange.collapseToPoint(range.endContainer, range.endOffset);                                             // 2815
            sel.nativeSelection.addRange(getNativeRange(endRange));                                                    // 2816
            sel.nativeSelection.extend(range.startContainer, range.startOffset);                                       // 2817
            sel.refresh();                                                                                             // 2818
        };                                                                                                             // 2819
                                                                                                                       // 2820
        if (selectionHasRangeCount) {                                                                                  // 2821
            selProto.addRange = function(range, backwards) {                                                           // 2822
                if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {           // 2823
                    addRangeToControlSelection(this, range);                                                           // 2824
                } else {                                                                                               // 2825
                    if (backwards && selectionHasExtend) {                                                             // 2826
                        addRangeBackwards(this, range);                                                                // 2827
                    } else {                                                                                           // 2828
                        var previousRangeCount;                                                                        // 2829
                        if (selectionSupportsMultipleRanges) {                                                         // 2830
                            previousRangeCount = this.rangeCount;                                                      // 2831
                        } else {                                                                                       // 2832
                            this.removeAllRanges();                                                                    // 2833
                            previousRangeCount = 0;                                                                    // 2834
                        }                                                                                              // 2835
                        this.nativeSelection.addRange(getNativeRange(range));                                          // 2836
                                                                                                                       // 2837
                        // Check whether adding the range was successful                                               // 2838
                        this.rangeCount = this.nativeSelection.rangeCount;                                             // 2839
                                                                                                                       // 2840
                        if (this.rangeCount == previousRangeCount + 1) {                                               // 2841
                            // The range was added successfully                                                        // 2842
                                                                                                                       // 2843
                            // Check whether the range that we added to the selection is reflected in the last range extracted from
                            // the selection                                                                           // 2845
                            if (api.config.checkSelectionRanges) {                                                     // 2846
                                var nativeRange = getSelectionRangeAt(this.nativeSelection, this.rangeCount - 1);      // 2847
                                if (nativeRange && !DomRange.rangesEqual(nativeRange, range)) {                        // 2848
                                    // Happens in WebKit with, for example, a selection placed at the start of a text node
                                    range = new WrappedRange(nativeRange);                                             // 2850
                                }                                                                                      // 2851
                            }                                                                                          // 2852
                            this._ranges[this.rangeCount - 1] = range;                                                 // 2853
                            updateAnchorAndFocusFromRange(this, range, selectionIsBackwards(this.nativeSelection));    // 2854
                            this.isCollapsed = selectionIsCollapsed(this);                                             // 2855
                        } else {                                                                                       // 2856
                            // The range was not added successfully. The simplest thing is to refresh                  // 2857
                            this.refresh();                                                                            // 2858
                        }                                                                                              // 2859
                    }                                                                                                  // 2860
                }                                                                                                      // 2861
            };                                                                                                         // 2862
        } else {                                                                                                       // 2863
            selProto.addRange = function(range, backwards) {                                                           // 2864
                if (backwards && selectionHasExtend) {                                                                 // 2865
                    addRangeBackwards(this, range);                                                                    // 2866
                } else {                                                                                               // 2867
                    this.nativeSelection.addRange(getNativeRange(range));                                              // 2868
                    this.refresh();                                                                                    // 2869
                }                                                                                                      // 2870
            };                                                                                                         // 2871
        }                                                                                                              // 2872
                                                                                                                       // 2873
        selProto.setRanges = function(ranges) {                                                                        // 2874
            if (implementsControlRange && ranges.length > 1) {                                                         // 2875
                createControlSelection(this, ranges);                                                                  // 2876
            } else {                                                                                                   // 2877
                this.removeAllRanges();                                                                                // 2878
                for (var i = 0, len = ranges.length; i < len; ++i) {                                                   // 2879
                    this.addRange(ranges[i]);                                                                          // 2880
                }                                                                                                      // 2881
            }                                                                                                          // 2882
        };                                                                                                             // 2883
    } else if (util.isHostMethod(testSelection, "empty") && util.isHostMethod(testRange, "select") &&                  // 2884
               implementsControlRange && useDocumentSelection) {                                                       // 2885
                                                                                                                       // 2886
        selProto.removeAllRanges = function() {                                                                        // 2887
            // Added try/catch as fix for issue #21                                                                    // 2888
            try {                                                                                                      // 2889
                this.docSelection.empty();                                                                             // 2890
                                                                                                                       // 2891
                // Check for empty() not working (issue #24)                                                           // 2892
                if (this.docSelection.type != "None") {                                                                // 2893
                    // Work around failure to empty a control selection by instead selecting a TextRange and then      // 2894
                    // calling empty()                                                                                 // 2895
                    var doc;                                                                                           // 2896
                    if (this.anchorNode) {                                                                             // 2897
                        doc = dom.getDocument(this.anchorNode);                                                        // 2898
                    } else if (this.docSelection.type == CONTROL) {                                                    // 2899
                        var controlRange = this.docSelection.createRange();                                            // 2900
                        if (controlRange.length) {                                                                     // 2901
                            doc = dom.getDocument(controlRange.item(0)).body.createTextRange();                        // 2902
                        }                                                                                              // 2903
                    }                                                                                                  // 2904
                    if (doc) {                                                                                         // 2905
                        var textRange = doc.body.createTextRange();                                                    // 2906
                        textRange.select();                                                                            // 2907
                        this.docSelection.empty();                                                                     // 2908
                    }                                                                                                  // 2909
                }                                                                                                      // 2910
            } catch(ex) {}                                                                                             // 2911
            updateEmptySelection(this);                                                                                // 2912
        };                                                                                                             // 2913
                                                                                                                       // 2914
        selProto.addRange = function(range) {                                                                          // 2915
            if (this.docSelection.type == CONTROL) {                                                                   // 2916
                addRangeToControlSelection(this, range);                                                               // 2917
            } else {                                                                                                   // 2918
                WrappedRange.rangeToTextRange(range).select();                                                         // 2919
                this._ranges[0] = range;                                                                               // 2920
                this.rangeCount = 1;                                                                                   // 2921
                this.isCollapsed = this._ranges[0].collapsed;                                                          // 2922
                updateAnchorAndFocusFromRange(this, range, false);                                                     // 2923
            }                                                                                                          // 2924
        };                                                                                                             // 2925
                                                                                                                       // 2926
        selProto.setRanges = function(ranges) {                                                                        // 2927
            this.removeAllRanges();                                                                                    // 2928
            var rangeCount = ranges.length;                                                                            // 2929
            if (rangeCount > 1) {                                                                                      // 2930
                createControlSelection(this, ranges);                                                                  // 2931
            } else if (rangeCount) {                                                                                   // 2932
                this.addRange(ranges[0]);                                                                              // 2933
            }                                                                                                          // 2934
        };                                                                                                             // 2935
    } else {                                                                                                           // 2936
        module.fail("No means of selecting a Range or TextRange was found");                                           // 2937
        return false;                                                                                                  // 2938
    }                                                                                                                  // 2939
                                                                                                                       // 2940
    selProto.getRangeAt = function(index) {                                                                            // 2941
        if (index < 0 || index >= this.rangeCount) {                                                                   // 2942
            throw new DOMException("INDEX_SIZE_ERR");                                                                  // 2943
        } else {                                                                                                       // 2944
            return this._ranges[index];                                                                                // 2945
        }                                                                                                              // 2946
    };                                                                                                                 // 2947
                                                                                                                       // 2948
    var refreshSelection;                                                                                              // 2949
                                                                                                                       // 2950
    if (useDocumentSelection) {                                                                                        // 2951
        refreshSelection = function(sel) {                                                                             // 2952
            var range;                                                                                                 // 2953
            if (api.isSelectionValid(sel.win)) {                                                                       // 2954
                range = sel.docSelection.createRange();                                                                // 2955
            } else {                                                                                                   // 2956
                range = dom.getBody(sel.win.document).createTextRange();                                               // 2957
                range.collapse(true);                                                                                  // 2958
            }                                                                                                          // 2959
                                                                                                                       // 2960
                                                                                                                       // 2961
            if (sel.docSelection.type == CONTROL) {                                                                    // 2962
                updateControlSelection(sel);                                                                           // 2963
            } else if (isTextRange(range)) {                                                                           // 2964
                updateFromTextRange(sel, range);                                                                       // 2965
            } else {                                                                                                   // 2966
                updateEmptySelection(sel);                                                                             // 2967
            }                                                                                                          // 2968
        };                                                                                                             // 2969
    } else if (util.isHostMethod(testSelection, "getRangeAt") && typeof testSelection.rangeCount == "number") {        // 2970
        refreshSelection = function(sel) {                                                                             // 2971
            if (implementsControlRange && implementsDocSelection && sel.docSelection.type == CONTROL) {                // 2972
                updateControlSelection(sel);                                                                           // 2973
            } else {                                                                                                   // 2974
                sel._ranges.length = sel.rangeCount = sel.nativeSelection.rangeCount;                                  // 2975
                if (sel.rangeCount) {                                                                                  // 2976
                    for (var i = 0, len = sel.rangeCount; i < len; ++i) {                                              // 2977
                        sel._ranges[i] = new api.WrappedRange(sel.nativeSelection.getRangeAt(i));                      // 2978
                    }                                                                                                  // 2979
                    updateAnchorAndFocusFromRange(sel, sel._ranges[sel.rangeCount - 1], selectionIsBackwards(sel.nativeSelection));
                    sel.isCollapsed = selectionIsCollapsed(sel);                                                       // 2981
                } else {                                                                                               // 2982
                    updateEmptySelection(sel);                                                                         // 2983
                }                                                                                                      // 2984
            }                                                                                                          // 2985
        };                                                                                                             // 2986
    } else if (selectionHasAnchorAndFocus && typeof testSelection.isCollapsed == BOOLEAN && typeof testRange.collapsed == BOOLEAN && api.features.implementsDomRange) {
        refreshSelection = function(sel) {                                                                             // 2988
            var range, nativeSel = sel.nativeSelection;                                                                // 2989
            if (nativeSel.anchorNode) {                                                                                // 2990
                range = getSelectionRangeAt(nativeSel, 0);                                                             // 2991
                sel._ranges = [range];                                                                                 // 2992
                sel.rangeCount = 1;                                                                                    // 2993
                updateAnchorAndFocusFromNativeSelection(sel);                                                          // 2994
                sel.isCollapsed = selectionIsCollapsed(sel);                                                           // 2995
            } else {                                                                                                   // 2996
                updateEmptySelection(sel);                                                                             // 2997
            }                                                                                                          // 2998
        };                                                                                                             // 2999
    } else {                                                                                                           // 3000
        module.fail("No means of obtaining a Range or TextRange from the user's selection was found");                 // 3001
        return false;                                                                                                  // 3002
    }                                                                                                                  // 3003
                                                                                                                       // 3004
    selProto.refresh = function(checkForChanges) {                                                                     // 3005
        var oldRanges = checkForChanges ? this._ranges.slice(0) : null;                                                // 3006
        refreshSelection(this);                                                                                        // 3007
        if (checkForChanges) {                                                                                         // 3008
            var i = oldRanges.length;                                                                                  // 3009
            if (i != this._ranges.length) {                                                                            // 3010
                return false;                                                                                          // 3011
            }                                                                                                          // 3012
            while (i--) {                                                                                              // 3013
                if (!DomRange.rangesEqual(oldRanges[i], this._ranges[i])) {                                            // 3014
                    return false;                                                                                      // 3015
                }                                                                                                      // 3016
            }                                                                                                          // 3017
            return true;                                                                                               // 3018
        }                                                                                                              // 3019
    };                                                                                                                 // 3020
                                                                                                                       // 3021
    // Removal of a single range                                                                                       // 3022
    var removeRangeManually = function(sel, range) {                                                                   // 3023
        var ranges = sel.getAllRanges(), removed = false;                                                              // 3024
        sel.removeAllRanges();                                                                                         // 3025
        for (var i = 0, len = ranges.length; i < len; ++i) {                                                           // 3026
            if (removed || range !== ranges[i]) {                                                                      // 3027
                sel.addRange(ranges[i]);                                                                               // 3028
            } else {                                                                                                   // 3029
                // According to the draft WHATWG Range spec, the same range may be added to the selection multiple     // 3030
                // times. removeRange should only remove the first instance, so the following ensures only the first   // 3031
                // instance is removed                                                                                 // 3032
                removed = true;                                                                                        // 3033
            }                                                                                                          // 3034
        }                                                                                                              // 3035
        if (!sel.rangeCount) {                                                                                         // 3036
            updateEmptySelection(sel);                                                                                 // 3037
        }                                                                                                              // 3038
    };                                                                                                                 // 3039
                                                                                                                       // 3040
    if (implementsControlRange) {                                                                                      // 3041
        selProto.removeRange = function(range) {                                                                       // 3042
            if (this.docSelection.type == CONTROL) {                                                                   // 3043
                var controlRange = this.docSelection.createRange();                                                    // 3044
                var rangeElement = getSingleElementFromRange(range);                                                   // 3045
                                                                                                                       // 3046
                // Create a new ControlRange containing all the elements in the selected ControlRange minus the        // 3047
                // element contained by the supplied range                                                             // 3048
                var doc = dom.getDocument(controlRange.item(0));                                                       // 3049
                var newControlRange = dom.getBody(doc).createControlRange();                                           // 3050
                var el, removed = false;                                                                               // 3051
                for (var i = 0, len = controlRange.length; i < len; ++i) {                                             // 3052
                    el = controlRange.item(i);                                                                         // 3053
                    if (el !== rangeElement || removed) {                                                              // 3054
                        newControlRange.add(controlRange.item(i));                                                     // 3055
                    } else {                                                                                           // 3056
                        removed = true;                                                                                // 3057
                    }                                                                                                  // 3058
                }                                                                                                      // 3059
                newControlRange.select();                                                                              // 3060
                                                                                                                       // 3061
                // Update the wrapped selection based on what's now in the native selection                            // 3062
                updateControlSelection(this);                                                                          // 3063
            } else {                                                                                                   // 3064
                removeRangeManually(this, range);                                                                      // 3065
            }                                                                                                          // 3066
        };                                                                                                             // 3067
    } else {                                                                                                           // 3068
        selProto.removeRange = function(range) {                                                                       // 3069
            removeRangeManually(this, range);                                                                          // 3070
        };                                                                                                             // 3071
    }                                                                                                                  // 3072
                                                                                                                       // 3073
    // Detecting if a selection is backwards                                                                           // 3074
    var selectionIsBackwards;                                                                                          // 3075
    if (!useDocumentSelection && selectionHasAnchorAndFocus && api.features.implementsDomRange) {                      // 3076
        selectionIsBackwards = function(sel) {                                                                         // 3077
            var backwards = false;                                                                                     // 3078
            if (sel.anchorNode) {                                                                                      // 3079
                backwards = (dom.comparePoints(sel.anchorNode, sel.anchorOffset, sel.focusNode, sel.focusOffset) == 1);
            }                                                                                                          // 3081
            return backwards;                                                                                          // 3082
        };                                                                                                             // 3083
                                                                                                                       // 3084
        selProto.isBackwards = function() {                                                                            // 3085
            return selectionIsBackwards(this);                                                                         // 3086
        };                                                                                                             // 3087
    } else {                                                                                                           // 3088
        selectionIsBackwards = selProto.isBackwards = function() {                                                     // 3089
            return false;                                                                                              // 3090
        };                                                                                                             // 3091
    }                                                                                                                  // 3092
                                                                                                                       // 3093
    // Selection text                                                                                                  // 3094
    // This is conformant to the new WHATWG DOM Range draft spec but differs from WebKit and Mozilla's implementation  // 3095
    selProto.toString = function() {                                                                                   // 3096
                                                                                                                       // 3097
        var rangeTexts = [];                                                                                           // 3098
        for (var i = 0, len = this.rangeCount; i < len; ++i) {                                                         // 3099
            rangeTexts[i] = "" + this._ranges[i];                                                                      // 3100
        }                                                                                                              // 3101
        return rangeTexts.join("");                                                                                    // 3102
    };                                                                                                                 // 3103
                                                                                                                       // 3104
    function assertNodeInSameDocument(sel, node) {                                                                     // 3105
        if (sel.anchorNode && (dom.getDocument(sel.anchorNode) !== dom.getDocument(node))) {                           // 3106
            throw new DOMException("WRONG_DOCUMENT_ERR");                                                              // 3107
        }                                                                                                              // 3108
    }                                                                                                                  // 3109
                                                                                                                       // 3110
    // No current browsers conform fully to the HTML 5 draft spec for this method, so Rangy's own method is always used
    selProto.collapse = function(node, offset) {                                                                       // 3112
        assertNodeInSameDocument(this, node);                                                                          // 3113
        var range = api.createRange(dom.getDocument(node));                                                            // 3114
        range.collapseToPoint(node, offset);                                                                           // 3115
        this.removeAllRanges();                                                                                        // 3116
        this.addRange(range);                                                                                          // 3117
        this.isCollapsed = true;                                                                                       // 3118
    };                                                                                                                 // 3119
                                                                                                                       // 3120
    selProto.collapseToStart = function() {                                                                            // 3121
        if (this.rangeCount) {                                                                                         // 3122
            var range = this._ranges[0];                                                                               // 3123
            this.collapse(range.startContainer, range.startOffset);                                                    // 3124
        } else {                                                                                                       // 3125
            throw new DOMException("INVALID_STATE_ERR");                                                               // 3126
        }                                                                                                              // 3127
    };                                                                                                                 // 3128
                                                                                                                       // 3129
    selProto.collapseToEnd = function() {                                                                              // 3130
        if (this.rangeCount) {                                                                                         // 3131
            var range = this._ranges[this.rangeCount - 1];                                                             // 3132
            this.collapse(range.endContainer, range.endOffset);                                                        // 3133
        } else {                                                                                                       // 3134
            throw new DOMException("INVALID_STATE_ERR");                                                               // 3135
        }                                                                                                              // 3136
    };                                                                                                                 // 3137
                                                                                                                       // 3138
    // The HTML 5 spec is very specific on how selectAllChildren should be implemented so the native implementation is // 3139
    // never used by Rangy.                                                                                            // 3140
    selProto.selectAllChildren = function(node) {                                                                      // 3141
        assertNodeInSameDocument(this, node);                                                                          // 3142
        var range = api.createRange(dom.getDocument(node));                                                            // 3143
        range.selectNodeContents(node);                                                                                // 3144
        this.removeAllRanges();                                                                                        // 3145
        this.addRange(range);                                                                                          // 3146
    };                                                                                                                 // 3147
                                                                                                                       // 3148
    selProto.deleteFromDocument = function() {                                                                         // 3149
        // Sepcial behaviour required for Control selections                                                           // 3150
        if (implementsControlRange && implementsDocSelection && this.docSelection.type == CONTROL) {                   // 3151
            var controlRange = this.docSelection.createRange();                                                        // 3152
            var element;                                                                                               // 3153
            while (controlRange.length) {                                                                              // 3154
                element = controlRange.item(0);                                                                        // 3155
                controlRange.remove(element);                                                                          // 3156
                element.parentNode.removeChild(element);                                                               // 3157
            }                                                                                                          // 3158
            this.refresh();                                                                                            // 3159
        } else if (this.rangeCount) {                                                                                  // 3160
            var ranges = this.getAllRanges();                                                                          // 3161
            this.removeAllRanges();                                                                                    // 3162
            for (var i = 0, len = ranges.length; i < len; ++i) {                                                       // 3163
                ranges[i].deleteContents();                                                                            // 3164
            }                                                                                                          // 3165
            // The HTML5 spec says nothing about what the selection should contain after calling deleteContents on each
            // range. Firefox moves the selection to where the final selected range was, so we emulate that            // 3167
            this.addRange(ranges[len - 1]);                                                                            // 3168
        }                                                                                                              // 3169
    };                                                                                                                 // 3170
                                                                                                                       // 3171
    // The following are non-standard extensions                                                                       // 3172
    selProto.getAllRanges = function() {                                                                               // 3173
        return this._ranges.slice(0);                                                                                  // 3174
    };                                                                                                                 // 3175
                                                                                                                       // 3176
    selProto.setSingleRange = function(range) {                                                                        // 3177
        this.setRanges( [range] );                                                                                     // 3178
    };                                                                                                                 // 3179
                                                                                                                       // 3180
    selProto.containsNode = function(node, allowPartial) {                                                             // 3181
        for (var i = 0, len = this._ranges.length; i < len; ++i) {                                                     // 3182
            if (this._ranges[i].containsNode(node, allowPartial)) {                                                    // 3183
                return true;                                                                                           // 3184
            }                                                                                                          // 3185
        }                                                                                                              // 3186
        return false;                                                                                                  // 3187
    };                                                                                                                 // 3188
                                                                                                                       // 3189
    selProto.toHtml = function() {                                                                                     // 3190
        var html = "";                                                                                                 // 3191
        if (this.rangeCount) {                                                                                         // 3192
            var container = DomRange.getRangeDocument(this._ranges[0]).createElement("div");                           // 3193
            for (var i = 0, len = this._ranges.length; i < len; ++i) {                                                 // 3194
                container.appendChild(this._ranges[i].cloneContents());                                                // 3195
            }                                                                                                          // 3196
            html = container.innerHTML;                                                                                // 3197
        }                                                                                                              // 3198
        return html;                                                                                                   // 3199
    };                                                                                                                 // 3200
                                                                                                                       // 3201
    function inspect(sel) {                                                                                            // 3202
        var rangeInspects = [];                                                                                        // 3203
        var anchor = new DomPosition(sel.anchorNode, sel.anchorOffset);                                                // 3204
        var focus = new DomPosition(sel.focusNode, sel.focusOffset);                                                   // 3205
        var name = (typeof sel.getName == "function") ? sel.getName() : "Selection";                                   // 3206
                                                                                                                       // 3207
        if (typeof sel.rangeCount != "undefined") {                                                                    // 3208
            for (var i = 0, len = sel.rangeCount; i < len; ++i) {                                                      // 3209
                rangeInspects[i] = DomRange.inspect(sel.getRangeAt(i));                                                // 3210
            }                                                                                                          // 3211
        }                                                                                                              // 3212
        return "[" + name + "(Ranges: " + rangeInspects.join(", ") +                                                   // 3213
                ")(anchor: " + anchor.inspect() + ", focus: " + focus.inspect() + "]";                                 // 3214
                                                                                                                       // 3215
    }                                                                                                                  // 3216
                                                                                                                       // 3217
    selProto.getName = function() {                                                                                    // 3218
        return "WrappedSelection";                                                                                     // 3219
    };                                                                                                                 // 3220
                                                                                                                       // 3221
    selProto.inspect = function() {                                                                                    // 3222
        return inspect(this);                                                                                          // 3223
    };                                                                                                                 // 3224
                                                                                                                       // 3225
    selProto.detach = function() {                                                                                     // 3226
        this.win[windowPropertyName] = null;                                                                           // 3227
        this.win = this.anchorNode = this.focusNode = null;                                                            // 3228
    };                                                                                                                 // 3229
                                                                                                                       // 3230
    WrappedSelection.inspect = inspect;                                                                                // 3231
                                                                                                                       // 3232
    api.Selection = WrappedSelection;                                                                                  // 3233
                                                                                                                       // 3234
    api.selectionPrototype = selProto;                                                                                 // 3235
                                                                                                                       // 3236
    api.addCreateMissingNativeApiListener(function(win) {                                                              // 3237
        if (typeof win.getSelection == "undefined") {                                                                  // 3238
            win.getSelection = function() {                                                                            // 3239
                return api.getSelection(this);                                                                         // 3240
            };                                                                                                         // 3241
        }                                                                                                              // 3242
        win = null;                                                                                                    // 3243
    });                                                                                                                // 3244
});                                                                                                                    // 3245
/*                                                                                                                     // 3246
	Base.js, version 1.1a                                                                                                 // 3247
	Copyright 2006-2010, Dean Edwards                                                                                     // 3248
	License: http://www.opensource.org/licenses/mit-license.php                                                           // 3249
*/                                                                                                                     // 3250
                                                                                                                       // 3251
var Base = function() {                                                                                                // 3252
	// dummy                                                                                                              // 3253
};                                                                                                                     // 3254
                                                                                                                       // 3255
Base.extend = function(_instance, _static) { // subclass                                                               // 3256
	var extend = Base.prototype.extend;                                                                                   // 3257
	                                                                                                                      // 3258
	// build the prototype                                                                                                // 3259
	Base._prototyping = true;                                                                                             // 3260
	var proto = new this;                                                                                                 // 3261
	extend.call(proto, _instance);                                                                                        // 3262
  proto.base = function() {                                                                                            // 3263
    // call this method from any other method to invoke that method's ancestor                                         // 3264
  };                                                                                                                   // 3265
	delete Base._prototyping;                                                                                             // 3266
	                                                                                                                      // 3267
	// create the wrapper for the constructor function                                                                    // 3268
	//var constructor = proto.constructor.valueOf(); //-dean                                                              // 3269
	var constructor = proto.constructor;                                                                                  // 3270
	var klass = proto.constructor = function() {                                                                          // 3271
		if (!Base._prototyping) {                                                                                            // 3272
			if (this._constructing || this.constructor == klass) { // instantiation                                             // 3273
				this._constructing = true;                                                                                         // 3274
				constructor.apply(this, arguments);                                                                                // 3275
				delete this._constructing;                                                                                         // 3276
			} else if (arguments[0] != null) { // casting                                                                       // 3277
				return (arguments[0].extend || extend).call(arguments[0], proto);                                                  // 3278
			}                                                                                                                   // 3279
		}                                                                                                                    // 3280
	};                                                                                                                    // 3281
	                                                                                                                      // 3282
	// build the class interface                                                                                          // 3283
	klass.ancestor = this;                                                                                                // 3284
	klass.extend = this.extend;                                                                                           // 3285
	klass.forEach = this.forEach;                                                                                         // 3286
	klass.implement = this.implement;                                                                                     // 3287
	klass.prototype = proto;                                                                                              // 3288
	klass.toString = this.toString;                                                                                       // 3289
	klass.valueOf = function(type) {                                                                                      // 3290
		//return (type == "object") ? klass : constructor; //-dean                                                           // 3291
		return (type == "object") ? klass : constructor.valueOf();                                                           // 3292
	};                                                                                                                    // 3293
	extend.call(klass, _static);                                                                                          // 3294
	// class initialisation                                                                                               // 3295
	if (typeof klass.init == "function") klass.init();                                                                    // 3296
	return klass;                                                                                                         // 3297
};                                                                                                                     // 3298
                                                                                                                       // 3299
Base.prototype = {	                                                                                                    // 3300
	extend: function(source, value) {                                                                                     // 3301
		if (arguments.length > 1) { // extending with a name/value pair                                                      // 3302
			var ancestor = this[source];                                                                                        // 3303
			if (ancestor && (typeof value == "function") && // overriding a method?                                             // 3304
				// the valueOf() comparison is to avoid circular references                                                        // 3305
				(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&                                                    // 3306
				/\bbase\b/.test(value)) {                                                                                          // 3307
				// get the underlying method                                                                                       // 3308
				var method = value.valueOf();                                                                                      // 3309
				// override                                                                                                        // 3310
				value = function() {                                                                                               // 3311
					var previous = this.base || Base.prototype.base;                                                                  // 3312
					this.base = ancestor;                                                                                             // 3313
					var returnValue = method.apply(this, arguments);                                                                  // 3314
					this.base = previous;                                                                                             // 3315
					return returnValue;                                                                                               // 3316
				};                                                                                                                 // 3317
				// point to the underlying method                                                                                  // 3318
				value.valueOf = function(type) {                                                                                   // 3319
					return (type == "object") ? value : method;                                                                       // 3320
				};                                                                                                                 // 3321
				value.toString = Base.toString;                                                                                    // 3322
			}                                                                                                                   // 3323
			this[source] = value;                                                                                               // 3324
		} else if (source) { // extending with an object literal                                                             // 3325
			var extend = Base.prototype.extend;                                                                                 // 3326
			// if this object has a customised extend method then use it                                                        // 3327
			if (!Base._prototyping && typeof this != "function") {                                                              // 3328
				extend = this.extend || extend;                                                                                    // 3329
			}                                                                                                                   // 3330
			var proto = {toSource: null};                                                                                       // 3331
			// do the "toString" and other methods manually                                                                     // 3332
			var hidden = ["constructor", "toString", "valueOf"];                                                                // 3333
			// if we are prototyping then include the constructor                                                               // 3334
			var i = Base._prototyping ? 0 : 1;                                                                                  // 3335
			while (key = hidden[i++]) {                                                                                         // 3336
				if (source[key] != proto[key]) {                                                                                   // 3337
					extend.call(this, key, source[key]);                                                                              // 3338
                                                                                                                       // 3339
				}                                                                                                                  // 3340
			}                                                                                                                   // 3341
			// copy each of the source object's properties to this object                                                       // 3342
			for (var key in source) {                                                                                           // 3343
				if (!proto[key]) extend.call(this, key, source[key]);                                                              // 3344
			}                                                                                                                   // 3345
		}                                                                                                                    // 3346
		return this;                                                                                                         // 3347
	}                                                                                                                     // 3348
};                                                                                                                     // 3349
                                                                                                                       // 3350
// initialise                                                                                                          // 3351
Base = Base.extend({                                                                                                   // 3352
	constructor: function() {                                                                                             // 3353
		this.extend(arguments[0]);                                                                                           // 3354
	}                                                                                                                     // 3355
}, {                                                                                                                   // 3356
	ancestor: Object,                                                                                                     // 3357
	version: "1.1",                                                                                                       // 3358
	                                                                                                                      // 3359
	forEach: function(object, block, context) {                                                                           // 3360
		for (var key in object) {                                                                                            // 3361
			if (this.prototype[key] === undefined) {                                                                            // 3362
				block.call(context, object[key], key, object);                                                                     // 3363
			}                                                                                                                   // 3364
		}                                                                                                                    // 3365
	},                                                                                                                    // 3366
		                                                                                                                     // 3367
	implement: function() {                                                                                               // 3368
		for (var i = 0; i < arguments.length; i++) {                                                                         // 3369
			if (typeof arguments[i] == "function") {                                                                            // 3370
				// if it's a function, call it                                                                                     // 3371
				arguments[i](this.prototype);                                                                                      // 3372
			} else {                                                                                                            // 3373
				// add the interface using the extend method                                                                       // 3374
				this.prototype.extend(arguments[i]);                                                                               // 3375
			}                                                                                                                   // 3376
		}                                                                                                                    // 3377
		return this;                                                                                                         // 3378
	},                                                                                                                    // 3379
	                                                                                                                      // 3380
	toString: function() {                                                                                                // 3381
		return String(this.valueOf());                                                                                       // 3382
	}                                                                                                                     // 3383
});/**                                                                                                                 // 3384
 * Detect browser support for specific features                                                                        // 3385
 */                                                                                                                    // 3386
wysihtml5.browser = (function() {                                                                                      // 3387
  var userAgent   = navigator.userAgent,                                                                               // 3388
      testElement = document.createElement("div"),                                                                     // 3389
      // Browser sniffing is unfortunately needed since some behaviors are impossible to feature detect                // 3390
      isIE        = userAgent.indexOf("MSIE")         !== -1 && userAgent.indexOf("Opera") === -1,                     // 3391
      isGecko     = userAgent.indexOf("Gecko")        !== -1 && userAgent.indexOf("KHTML") === -1,                     // 3392
      isWebKit    = userAgent.indexOf("AppleWebKit/") !== -1,                                                          // 3393
      isChrome    = userAgent.indexOf("Chrome/")      !== -1,                                                          // 3394
      isOpera     = userAgent.indexOf("Opera/")       !== -1;                                                          // 3395
                                                                                                                       // 3396
  function iosVersion(userAgent) {                                                                                     // 3397
    return ((/ipad|iphone|ipod/.test(userAgent) && userAgent.match(/ os (\d+).+? like mac os x/)) || [, 0])[1];        // 3398
  }                                                                                                                    // 3399
                                                                                                                       // 3400
  return {                                                                                                             // 3401
    // Static variable needed, publicly accessible, to be able override it in unit tests                               // 3402
    USER_AGENT: userAgent,                                                                                             // 3403
                                                                                                                       // 3404
    /**                                                                                                                // 3405
     * Exclude browsers that are not capable of displaying and handling                                                // 3406
     * contentEditable as desired:                                                                                     // 3407
     *    - iPhone, iPad (tested iOS 4.2.2) and Android (tested 2.2) refuse to make contentEditables focusable         // 3408
     *    - IE < 8 create invalid markup and crash randomly from time to time                                          // 3409
     *                                                                                                                 // 3410
     * @return {Boolean}                                                                                               // 3411
     */                                                                                                                // 3412
    supported: function() {                                                                                            // 3413
      var userAgent                   = this.USER_AGENT.toLowerCase(),                                                 // 3414
          // Essential for making html elements editable                                                               // 3415
          hasContentEditableSupport   = "contentEditable" in testElement,                                              // 3416
          // Following methods are needed in order to interact with the contentEditable area                           // 3417
          hasEditingApiSupport        = document.execCommand && document.queryCommandSupported && document.queryCommandState,
          // document selector apis are only supported by IE 8+, Safari 4+, Chrome and Firefox 3.5+                    // 3419
          hasQuerySelectorSupport     = document.querySelector && document.querySelectorAll,                           // 3420
          // contentEditable is unusable in mobile browsers (tested iOS 4.2.2, Android 2.2, Opera Mobile, WebOS 3.05)  // 3421
          isIncompatibleMobileBrowser = (this.isIos() && iosVersion(userAgent) < 5) || userAgent.indexOf("opera mobi") !== -1 || userAgent.indexOf("hpwos/") !== -1;
                                                                                                                       // 3423
      return hasContentEditableSupport                                                                                 // 3424
        && hasEditingApiSupport                                                                                        // 3425
        && hasQuerySelectorSupport                                                                                     // 3426
        && !isIncompatibleMobileBrowser;                                                                               // 3427
    },                                                                                                                 // 3428
                                                                                                                       // 3429
    isTouchDevice: function() {                                                                                        // 3430
      return this.supportsEvent("touchmove");                                                                          // 3431
    },                                                                                                                 // 3432
                                                                                                                       // 3433
    isIos: function() {                                                                                                // 3434
      var userAgent = this.USER_AGENT.toLowerCase();                                                                   // 3435
      return userAgent.indexOf("webkit") !== -1 && userAgent.indexOf("mobile") !== -1;                                 // 3436
    },                                                                                                                 // 3437
                                                                                                                       // 3438
    /**                                                                                                                // 3439
     * Whether the browser supports sandboxed iframes                                                                  // 3440
     * Currently only IE 6+ offers such feature <iframe security="restricted">                                         // 3441
     *                                                                                                                 // 3442
     * http://msdn.microsoft.com/en-us/library/ms534622(v=vs.85).aspx                                                  // 3443
     * http://blogs.msdn.com/b/ie/archive/2008/01/18/using-frames-more-securely.aspx                                   // 3444
     *                                                                                                                 // 3445
     * HTML5 sandboxed iframes are still buggy and their DOM is not reachable from the outside (except when using postMessage)
     */                                                                                                                // 3447
    supportsSandboxedIframes: function() {                                                                             // 3448
      return isIE;                                                                                                     // 3449
    },                                                                                                                 // 3450
                                                                                                                       // 3451
    /**                                                                                                                // 3452
     * IE6+7 throw a mixed content warning when the src of an iframe                                                   // 3453
     * is empty/unset or about:blank                                                                                   // 3454
     * window.querySelector is implemented as of IE8                                                                   // 3455
     */                                                                                                                // 3456
    throwsMixedContentWarningWhenIframeSrcIsEmpty: function() {                                                        // 3457
      return !("querySelector" in document);                                                                           // 3458
    },                                                                                                                 // 3459
                                                                                                                       // 3460
    /**                                                                                                                // 3461
     * Whether the caret is correctly displayed in contentEditable elements                                            // 3462
     * Firefox sometimes shows a huge caret in the beginning after focusing                                            // 3463
     */                                                                                                                // 3464
    displaysCaretInEmptyContentEditableCorrectly: function() {                                                         // 3465
      return !isGecko;                                                                                                 // 3466
    },                                                                                                                 // 3467
                                                                                                                       // 3468
    /**                                                                                                                // 3469
     * Opera and IE are the only browsers who offer the css value                                                      // 3470
     * in the original unit, thx to the currentStyle object                                                            // 3471
     * All other browsers provide the computed style in px via window.getComputedStyle                                 // 3472
     */                                                                                                                // 3473
    hasCurrentStyleProperty: function() {                                                                              // 3474
      return "currentStyle" in testElement;                                                                            // 3475
    },                                                                                                                 // 3476
                                                                                                                       // 3477
    /**                                                                                                                // 3478
     * Whether the browser inserts a <br> when pressing enter in a contentEditable element                             // 3479
     */                                                                                                                // 3480
    insertsLineBreaksOnReturn: function() {                                                                            // 3481
      return isGecko;                                                                                                  // 3482
    },                                                                                                                 // 3483
                                                                                                                       // 3484
    supportsPlaceholderAttributeOn: function(element) {                                                                // 3485
      return "placeholder" in element;                                                                                 // 3486
    },                                                                                                                 // 3487
                                                                                                                       // 3488
    supportsEvent: function(eventName) {                                                                               // 3489
      return "on" + eventName in testElement || (function() {                                                          // 3490
        testElement.setAttribute("on" + eventName, "return;");                                                         // 3491
        return typeof(testElement["on" + eventName]) === "function";                                                   // 3492
      })();                                                                                                            // 3493
    },                                                                                                                 // 3494
                                                                                                                       // 3495
    /**                                                                                                                // 3496
     * Opera doesn't correctly fire focus/blur events when clicking in- and outside of iframe                          // 3497
     */                                                                                                                // 3498
    supportsEventsInIframeCorrectly: function() {                                                                      // 3499
      return !isOpera;                                                                                                 // 3500
    },                                                                                                                 // 3501
                                                                                                                       // 3502
    /**                                                                                                                // 3503
     * Chrome & Safari only fire the ondrop/ondragend/... events when the ondragover event is cancelled                // 3504
     * with event.preventDefault                                                                                       // 3505
     * Firefox 3.6 fires those events anyway, but the mozilla doc says that the dragover/dragenter event needs         // 3506
     * to be cancelled                                                                                                 // 3507
     */                                                                                                                // 3508
    firesOnDropOnlyWhenOnDragOverIsCancelled: function() {                                                             // 3509
      return isWebKit || isGecko;                                                                                      // 3510
    },                                                                                                                 // 3511
                                                                                                                       // 3512
    /**                                                                                                                // 3513
     * Whether the browser supports the event.dataTransfer property in a proper way                                    // 3514
     */                                                                                                                // 3515
    supportsDataTransfer: function() {                                                                                 // 3516
      try {                                                                                                            // 3517
        // Firefox doesn't support dataTransfer in a safe way, it doesn't strip script code in the html payload (like Chrome does)
        return isWebKit && (window.Clipboard || window.DataTransfer).prototype.getData;                                // 3519
      } catch(e) {                                                                                                     // 3520
        return false;                                                                                                  // 3521
      }                                                                                                                // 3522
    },                                                                                                                 // 3523
                                                                                                                       // 3524
    /**                                                                                                                // 3525
     * Everything below IE9 doesn't know how to treat HTML5 tags                                                       // 3526
     *                                                                                                                 // 3527
     * @param {Object} context The document object on which to check HTML5 support                                     // 3528
     *                                                                                                                 // 3529
     * @example                                                                                                        // 3530
     *    wysihtml5.browser.supportsHTML5Tags(document);                                                               // 3531
     */                                                                                                                // 3532
    supportsHTML5Tags: function(context) {                                                                             // 3533
      var element = context.createElement("div"),                                                                      // 3534
          html5   = "<article>foo</article>";                                                                          // 3535
      element.innerHTML = html5;                                                                                       // 3536
      return element.innerHTML.toLowerCase() === html5;                                                                // 3537
    },                                                                                                                 // 3538
                                                                                                                       // 3539
    /**                                                                                                                // 3540
     * Checks whether a document supports a certain queryCommand                                                       // 3541
     * In particular, Opera needs a reference to a document that has a contentEditable in it's dom tree                // 3542
     * in oder to report correct results                                                                               // 3543
     *                                                                                                                 // 3544
     * @param {Object} doc Document object on which to check for a query command                                       // 3545
     * @param {String} command The query command to check for                                                          // 3546
     * @return {Boolean}                                                                                               // 3547
     *                                                                                                                 // 3548
     * @example                                                                                                        // 3549
     *    wysihtml5.browser.supportsCommand(document, "bold");                                                         // 3550
     */                                                                                                                // 3551
    supportsCommand: (function() {                                                                                     // 3552
      // Following commands are supported but contain bugs in some browsers                                            // 3553
      var buggyCommands = {                                                                                            // 3554
        // formatBlock fails with some tags (eg. <blockquote>)                                                         // 3555
        "formatBlock":          isIE,                                                                                  // 3556
         // When inserting unordered or ordered lists in Firefox, Chrome or Safari, the current selection or line gets // 3557
         // converted into a list (<ul><li>...</li></ul>, <ol><li>...</li></ol>)                                       // 3558
         // IE and Opera act a bit different here as they convert the entire content of the current block element into a list
        "insertUnorderedList":  isIE || isOpera || isWebKit,                                                           // 3560
        "insertOrderedList":    isIE || isOpera || isWebKit                                                            // 3561
      };                                                                                                               // 3562
                                                                                                                       // 3563
      // Firefox throws errors for queryCommandSupported, so we have to build up our own object of supported commands  // 3564
      var supported = {                                                                                                // 3565
        "insertHTML": isGecko                                                                                          // 3566
      };                                                                                                               // 3567
                                                                                                                       // 3568
      return function(doc, command) {                                                                                  // 3569
        var isBuggy = buggyCommands[command];                                                                          // 3570
        if (!isBuggy) {                                                                                                // 3571
          // Firefox throws errors when invoking queryCommandSupported or queryCommandEnabled                          // 3572
          try {                                                                                                        // 3573
            return doc.queryCommandSupported(command);                                                                 // 3574
          } catch(e1) {}                                                                                               // 3575
                                                                                                                       // 3576
          try {                                                                                                        // 3577
            return doc.queryCommandEnabled(command);                                                                   // 3578
          } catch(e2) {                                                                                                // 3579
            return !!supported[command];                                                                               // 3580
          }                                                                                                            // 3581
        }                                                                                                              // 3582
        return false;                                                                                                  // 3583
      };                                                                                                               // 3584
    })(),                                                                                                              // 3585
                                                                                                                       // 3586
    /**                                                                                                                // 3587
     * IE: URLs starting with:                                                                                         // 3588
     *    www., http://, https://, ftp://, gopher://, mailto:, new:, snews:, telnet:, wasis:, file://,                 // 3589
     *    nntp://, newsrc:, ldap://, ldaps://, outlook:, mic:// and url:                                               // 3590
     * will automatically be auto-linked when either the user inserts them via copy&paste or presses the               // 3591
     * space bar when the caret is directly after such an url.                                                         // 3592
     * This behavior cannot easily be avoided in IE < 9 since the logic is hardcoded in the mshtml.dll                 // 3593
     * (related blog post on msdn                                                                                      // 3594
     * http://blogs.msdn.com/b/ieinternals/archive/2009/09/17/prevent-automatic-hyperlinking-in-contenteditable-html.aspx).
     */                                                                                                                // 3596
    doesAutoLinkingInContentEditable: function() {                                                                     // 3597
      return isIE;                                                                                                     // 3598
    },                                                                                                                 // 3599
                                                                                                                       // 3600
    /**                                                                                                                // 3601
     * As stated above, IE auto links urls typed into contentEditable elements                                         // 3602
     * Since IE9 it's possible to prevent this behavior                                                                // 3603
     */                                                                                                                // 3604
    canDisableAutoLinking: function() {                                                                                // 3605
      return this.supportsCommand(document, "AutoUrlDetect");                                                          // 3606
    },                                                                                                                 // 3607
                                                                                                                       // 3608
    /**                                                                                                                // 3609
     * IE leaves an empty paragraph in the contentEditable element after clearing it                                   // 3610
     * Chrome/Safari sometimes an empty <div>                                                                          // 3611
     */                                                                                                                // 3612
    clearsContentEditableCorrectly: function() {                                                                       // 3613
      return isGecko || isOpera || isWebKit;                                                                           // 3614
    },                                                                                                                 // 3615
                                                                                                                       // 3616
    /**                                                                                                                // 3617
     * IE gives wrong results for getAttribute                                                                         // 3618
     */                                                                                                                // 3619
    supportsGetAttributeCorrectly: function() {                                                                        // 3620
      var td = document.createElement("td");                                                                           // 3621
      return td.getAttribute("rowspan") != "1";                                                                        // 3622
    },                                                                                                                 // 3623
                                                                                                                       // 3624
    /**                                                                                                                // 3625
     * When clicking on images in IE, Opera and Firefox, they are selected, which makes it easy to interact with them. // 3626
     * Chrome and Safari both don't support this                                                                       // 3627
     */                                                                                                                // 3628
    canSelectImagesInContentEditable: function() {                                                                     // 3629
      return isGecko || isIE || isOpera;                                                                               // 3630
    },                                                                                                                 // 3631
                                                                                                                       // 3632
    /**                                                                                                                // 3633
     * When the caret is in an empty list (<ul><li>|</li></ul>) which is the first child in an contentEditable container
     * pressing backspace doesn't remove the entire list as done in other browsers                                     // 3635
     */                                                                                                                // 3636
    clearsListsInContentEditableCorrectly: function() {                                                                // 3637
      return isGecko || isIE || isWebKit;                                                                              // 3638
    },                                                                                                                 // 3639
                                                                                                                       // 3640
    /**                                                                                                                // 3641
     * All browsers except Safari and Chrome automatically scroll the range/caret position into view                   // 3642
     */                                                                                                                // 3643
    autoScrollsToCaret: function() {                                                                                   // 3644
      return !isWebKit;                                                                                                // 3645
    },                                                                                                                 // 3646
                                                                                                                       // 3647
    /**                                                                                                                // 3648
     * Check whether the browser automatically closes tags that don't need to be opened                                // 3649
     */                                                                                                                // 3650
    autoClosesUnclosedTags: function() {                                                                               // 3651
      var clonedTestElement = testElement.cloneNode(false),                                                            // 3652
          returnValue,                                                                                                 // 3653
          innerHTML;                                                                                                   // 3654
                                                                                                                       // 3655
      clonedTestElement.innerHTML = "<p><div></div>";                                                                  // 3656
      innerHTML                   = clonedTestElement.innerHTML.toLowerCase();                                         // 3657
      returnValue                 = innerHTML === "<p></p><div></div>" || innerHTML === "<p><div></div></p>";          // 3658
                                                                                                                       // 3659
      // Cache result by overwriting current function                                                                  // 3660
      this.autoClosesUnclosedTags = function() { return returnValue; };                                                // 3661
                                                                                                                       // 3662
      return returnValue;                                                                                              // 3663
    },                                                                                                                 // 3664
                                                                                                                       // 3665
    /**                                                                                                                // 3666
     * Whether the browser supports the native document.getElementsByClassName which returns live NodeLists            // 3667
     */                                                                                                                // 3668
    supportsNativeGetElementsByClassName: function() {                                                                 // 3669
      return String(document.getElementsByClassName).indexOf("[native code]") !== -1;                                  // 3670
    },                                                                                                                 // 3671
                                                                                                                       // 3672
    /**                                                                                                                // 3673
     * As of now (19.04.2011) only supported by Firefox 4 and Chrome                                                   // 3674
     * See https://developer.mozilla.org/en/DOM/Selection/modify                                                       // 3675
     */                                                                                                                // 3676
    supportsSelectionModify: function() {                                                                              // 3677
      return "getSelection" in window && "modify" in window.getSelection();                                            // 3678
    },                                                                                                                 // 3679
                                                                                                                       // 3680
    /**                                                                                                                // 3681
     * Whether the browser supports the classList object for fast className manipulation                               // 3682
     * See https://developer.mozilla.org/en/DOM/element.classList                                                      // 3683
     */                                                                                                                // 3684
    supportsClassList: function() {                                                                                    // 3685
      return "classList" in testElement;                                                                               // 3686
    },                                                                                                                 // 3687
                                                                                                                       // 3688
    /**                                                                                                                // 3689
     * Opera needs a white space after a <br> in order to position the caret correctly                                 // 3690
     */                                                                                                                // 3691
    needsSpaceAfterLineBreak: function() {                                                                             // 3692
      return isOpera;                                                                                                  // 3693
    },                                                                                                                 // 3694
                                                                                                                       // 3695
    /**                                                                                                                // 3696
     * Whether the browser supports the speech api on the given element                                                // 3697
     * See http://mikepultz.com/2011/03/accessing-google-speech-api-chrome-11/                                         // 3698
     *                                                                                                                 // 3699
     * @example                                                                                                        // 3700
     *    var input = document.createElement("input");                                                                 // 3701
     *    if (wysihtml5.browser.supportsSpeechApiOn(input)) {                                                          // 3702
     *      // ...                                                                                                     // 3703
     *    }                                                                                                            // 3704
     */                                                                                                                // 3705
    supportsSpeechApiOn: function(input) {                                                                             // 3706
      var chromeVersion = userAgent.match(/Chrome\/(\d+)/) || [, 0];                                                   // 3707
      return chromeVersion[1] >= 11 && ("onwebkitspeechchange" in input || "speech" in input);                         // 3708
    },                                                                                                                 // 3709
                                                                                                                       // 3710
    /**                                                                                                                // 3711
     * IE9 crashes when setting a getter via Object.defineProperty on XMLHttpRequest or XDomainRequest                 // 3712
     * See https://connect.microsoft.com/ie/feedback/details/650112                                                    // 3713
     * or try the POC http://tifftiff.de/ie9_crash/                                                                    // 3714
     */                                                                                                                // 3715
    crashesWhenDefineProperty: function(property) {                                                                    // 3716
      return isIE && (property === "XMLHttpRequest" || property === "XDomainRequest");                                 // 3717
    },                                                                                                                 // 3718
                                                                                                                       // 3719
    /**                                                                                                                // 3720
     * IE is the only browser who fires the "focus" event not immediately when .focus() is called on an element        // 3721
     */                                                                                                                // 3722
    doesAsyncFocus: function() {                                                                                       // 3723
      return isIE;                                                                                                     // 3724
    },                                                                                                                 // 3725
                                                                                                                       // 3726
    /**                                                                                                                // 3727
     * In IE it's impssible for the user and for the selection library to set the caret after an <img> when it's the lastChild in the document
     */                                                                                                                // 3729
    hasProblemsSettingCaretAfterImg: function() {                                                                      // 3730
      return isIE;                                                                                                     // 3731
    },                                                                                                                 // 3732
                                                                                                                       // 3733
    hasUndoInContextMenu: function() {                                                                                 // 3734
      return isGecko || isChrome || isOpera;                                                                           // 3735
    }                                                                                                                  // 3736
  };                                                                                                                   // 3737
})();wysihtml5.lang.array = function(arr) {                                                                            // 3738
  return {                                                                                                             // 3739
    /**                                                                                                                // 3740
     * Check whether a given object exists in an array                                                                 // 3741
     *                                                                                                                 // 3742
     * @example                                                                                                        // 3743
     *    wysihtml5.lang.array([1, 2]).contains(1);                                                                    // 3744
     *    // => true                                                                                                   // 3745
     */                                                                                                                // 3746
    contains: function(needle) {                                                                                       // 3747
      if (arr.indexOf) {                                                                                               // 3748
        return arr.indexOf(needle) !== -1;                                                                             // 3749
      } else {                                                                                                         // 3750
        for (var i=0, length=arr.length; i<length; i++) {                                                              // 3751
          if (arr[i] === needle) { return true; }                                                                      // 3752
        }                                                                                                              // 3753
        return false;                                                                                                  // 3754
      }                                                                                                                // 3755
    },                                                                                                                 // 3756
                                                                                                                       // 3757
    /**                                                                                                                // 3758
     * Substract one array from another                                                                                // 3759
     *                                                                                                                 // 3760
     * @example                                                                                                        // 3761
     *    wysihtml5.lang.array([1, 2, 3, 4]).without([3, 4]);                                                          // 3762
     *    // => [1, 2]                                                                                                 // 3763
     */                                                                                                                // 3764
    without: function(arrayToSubstract) {                                                                              // 3765
      arrayToSubstract = wysihtml5.lang.array(arrayToSubstract);                                                       // 3766
      var newArr  = [],                                                                                                // 3767
          i       = 0,                                                                                                 // 3768
          length  = arr.length;                                                                                        // 3769
      for (; i<length; i++) {                                                                                          // 3770
        if (!arrayToSubstract.contains(arr[i])) {                                                                      // 3771
          newArr.push(arr[i]);                                                                                         // 3772
        }                                                                                                              // 3773
      }                                                                                                                // 3774
      return newArr;                                                                                                   // 3775
    },                                                                                                                 // 3776
                                                                                                                       // 3777
    /**                                                                                                                // 3778
     * Return a clean native array                                                                                     // 3779
     *                                                                                                                 // 3780
     * Following will convert a Live NodeList to a proper Array                                                        // 3781
     * @example                                                                                                        // 3782
     *    var childNodes = wysihtml5.lang.array(document.body.childNodes).get();                                       // 3783
     */                                                                                                                // 3784
    get: function() {                                                                                                  // 3785
      var i        = 0,                                                                                                // 3786
          length   = arr.length,                                                                                       // 3787
          newArray = [];                                                                                               // 3788
      for (; i<length; i++) {                                                                                          // 3789
        newArray.push(arr[i]);                                                                                         // 3790
      }                                                                                                                // 3791
      return newArray;                                                                                                 // 3792
    }                                                                                                                  // 3793
  };                                                                                                                   // 3794
};wysihtml5.lang.Dispatcher = Base.extend(                                                                             // 3795
  /** @scope wysihtml5.lang.Dialog.prototype */ {                                                                      // 3796
  observe: function(eventName, handler) {                                                                              // 3797
    this.events = this.events || {};                                                                                   // 3798
    this.events[eventName] = this.events[eventName] || [];                                                             // 3799
    this.events[eventName].push(handler);                                                                              // 3800
    return this;                                                                                                       // 3801
  },                                                                                                                   // 3802
                                                                                                                       // 3803
  on: function() {                                                                                                     // 3804
    return this.observe.apply(this, wysihtml5.lang.array(arguments).get());                                            // 3805
  },                                                                                                                   // 3806
                                                                                                                       // 3807
  fire: function(eventName, payload) {                                                                                 // 3808
    this.events = this.events || {};                                                                                   // 3809
    var handlers = this.events[eventName] || [],                                                                       // 3810
        i        = 0;                                                                                                  // 3811
    for (; i<handlers.length; i++) {                                                                                   // 3812
      handlers[i].call(this, payload);                                                                                 // 3813
    }                                                                                                                  // 3814
    return this;                                                                                                       // 3815
  },                                                                                                                   // 3816
                                                                                                                       // 3817
  stopObserving: function(eventName, handler) {                                                                        // 3818
    this.events = this.events || {};                                                                                   // 3819
    var i = 0,                                                                                                         // 3820
        handlers,                                                                                                      // 3821
        newHandlers;                                                                                                   // 3822
    if (eventName) {                                                                                                   // 3823
      handlers    = this.events[eventName] || [],                                                                      // 3824
      newHandlers = [];                                                                                                // 3825
      for (; i<handlers.length; i++) {                                                                                 // 3826
        if (handlers[i] !== handler && handler) {                                                                      // 3827
          newHandlers.push(handlers[i]);                                                                               // 3828
        }                                                                                                              // 3829
      }                                                                                                                // 3830
      this.events[eventName] = newHandlers;                                                                            // 3831
    } else {                                                                                                           // 3832
      // Clean up all events                                                                                           // 3833
      this.events = {};                                                                                                // 3834
    }                                                                                                                  // 3835
    return this;                                                                                                       // 3836
  }                                                                                                                    // 3837
});wysihtml5.lang.object = function(obj) {                                                                             // 3838
  return {                                                                                                             // 3839
    /**                                                                                                                // 3840
     * @example                                                                                                        // 3841
     *    wysihtml5.lang.object({ foo: 1, bar: 1 }).merge({ bar: 2, baz: 3 }).get();                                   // 3842
     *    // => { foo: 1, bar: 2, baz: 3 }                                                                             // 3843
     */                                                                                                                // 3844
    merge: function(otherObj) {                                                                                        // 3845
      for (var i in otherObj) {                                                                                        // 3846
        obj[i] = otherObj[i];                                                                                          // 3847
      }                                                                                                                // 3848
      return this;                                                                                                     // 3849
    },                                                                                                                 // 3850
                                                                                                                       // 3851
    get: function() {                                                                                                  // 3852
      return obj;                                                                                                      // 3853
    },                                                                                                                 // 3854
                                                                                                                       // 3855
    /**                                                                                                                // 3856
     * @example                                                                                                        // 3857
     *    wysihtml5.lang.object({ foo: 1 }).clone();                                                                   // 3858
     *    // => { foo: 1 }                                                                                             // 3859
     */                                                                                                                // 3860
    clone: function() {                                                                                                // 3861
      var newObj = {},                                                                                                 // 3862
          i;                                                                                                           // 3863
      for (i in obj) {                                                                                                 // 3864
        newObj[i] = obj[i];                                                                                            // 3865
      }                                                                                                                // 3866
      return newObj;                                                                                                   // 3867
    },                                                                                                                 // 3868
                                                                                                                       // 3869
    /**                                                                                                                // 3870
     * @example                                                                                                        // 3871
     *    wysihtml5.lang.object([]).isArray();                                                                         // 3872
     *    // => true                                                                                                   // 3873
     */                                                                                                                // 3874
    isArray: function() {                                                                                              // 3875
      return Object.prototype.toString.call(obj) === "[object Array]";                                                 // 3876
    }                                                                                                                  // 3877
  };                                                                                                                   // 3878
};(function() {                                                                                                        // 3879
  var WHITE_SPACE_START = /^\s+/,                                                                                      // 3880
      WHITE_SPACE_END   = /\s+$/;                                                                                      // 3881
  wysihtml5.lang.string = function(str) {                                                                              // 3882
    str = String(str);                                                                                                 // 3883
    return {                                                                                                           // 3884
      /**                                                                                                              // 3885
       * @example                                                                                                      // 3886
       *    wysihtml5.lang.string("   foo   ").trim();                                                                 // 3887
       *    // => "foo"                                                                                                // 3888
       */                                                                                                              // 3889
      trim: function() {                                                                                               // 3890
        return str.replace(WHITE_SPACE_START, "").replace(WHITE_SPACE_END, "");                                        // 3891
      },                                                                                                               // 3892
                                                                                                                       // 3893
      /**                                                                                                              // 3894
       * @example                                                                                                      // 3895
       *    wysihtml5.lang.string("Hello #{name}").interpolate({ name: "Christopher" });                               // 3896
       *    // => "Hello Christopher"                                                                                  // 3897
       */                                                                                                              // 3898
      interpolate: function(vars) {                                                                                    // 3899
        for (var i in vars) {                                                                                          // 3900
          str = this.replace("#{" + i + "}").by(vars[i]);                                                              // 3901
        }                                                                                                              // 3902
        return str;                                                                                                    // 3903
      },                                                                                                               // 3904
                                                                                                                       // 3905
      /**                                                                                                              // 3906
       * @example                                                                                                      // 3907
       *    wysihtml5.lang.string("Hello Tom").replace("Tom").with("Hans");                                            // 3908
       *    // => "Hello Hans"                                                                                         // 3909
       */                                                                                                              // 3910
      replace: function(search) {                                                                                      // 3911
        return {                                                                                                       // 3912
          by: function(replace) {                                                                                      // 3913
            return str.split(search).join(replace);                                                                    // 3914
          }                                                                                                            // 3915
        }                                                                                                              // 3916
      }                                                                                                                // 3917
    };                                                                                                                 // 3918
  };                                                                                                                   // 3919
})();/**                                                                                                               // 3920
 * Find urls in descendant text nodes of an element and auto-links them                                                // 3921
 * Inspired by http://james.padolsey.com/javascript/find-and-replace-text-with-javascript/                             // 3922
 *                                                                                                                     // 3923
 * @param {Element} element Container element in which to search for urls                                              // 3924
 *                                                                                                                     // 3925
 * @example                                                                                                            // 3926
 *    <div id="text-container">Please click here: www.google.com</div>                                                 // 3927
 *    <script>wysihtml5.dom.autoLink(document.getElementById("text-container"));</script>                              // 3928
 */                                                                                                                    // 3929
(function(wysihtml5) {                                                                                                 // 3930
  var /**                                                                                                              // 3931
       * Don't auto-link urls that are contained in the following elements:                                            // 3932
       */                                                                                                              // 3933
      IGNORE_URLS_IN        = wysihtml5.lang.array(["CODE", "PRE", "A", "SCRIPT", "HEAD", "TITLE", "STYLE"]),          // 3934
      /**                                                                                                              // 3935
       * revision 1:                                                                                                   // 3936
       *    /(\S+\.{1}[^\s\,\.\!]+)/g                                                                                  // 3937
       *                                                                                                               // 3938
       * revision 2:                                                                                                   // 3939
       *    /(\b(((https?|ftp):\/\/)|(www\.))[-A-Z0-9+&@#\/%?=~_|!:,.;\[\]]*[-A-Z0-9+&@#\/%=~_|])/gim                  // 3940
       *                                                                                                               // 3941
       * put this in the beginning if you don't wan't to match within a word                                           // 3942
       *    (^|[\>\(\{\[\s\>])                                                                                         // 3943
       */                                                                                                              // 3944
      URL_REG_EXP           = /((https?:\/\/|www\.)[^\s<]{3,})/gi,                                                     // 3945
      TRAILING_CHAR_REG_EXP = /([^\w\/\-](,?))$/i,                                                                     // 3946
      MAX_DISPLAY_LENGTH    = 100,                                                                                     // 3947
      BRACKETS              = { ")": "(", "]": "[", "}": "{" };                                                        // 3948
                                                                                                                       // 3949
  function autoLink(element) {                                                                                         // 3950
    if (_hasParentThatShouldBeIgnored(element)) {                                                                      // 3951
      return element;                                                                                                  // 3952
    }                                                                                                                  // 3953
                                                                                                                       // 3954
    if (element === element.ownerDocument.documentElement) {                                                           // 3955
      element = element.ownerDocument.body;                                                                            // 3956
    }                                                                                                                  // 3957
                                                                                                                       // 3958
    return _parseNode(element);                                                                                        // 3959
  }                                                                                                                    // 3960
                                                                                                                       // 3961
  /**                                                                                                                  // 3962
   * This is basically a rebuild of                                                                                    // 3963
   * the rails auto_link_urls text helper                                                                              // 3964
   */                                                                                                                  // 3965
  function _convertUrlsToLinks(str) {                                                                                  // 3966
    return str.replace(URL_REG_EXP, function(match, url) {                                                             // 3967
      var punctuation = (url.match(TRAILING_CHAR_REG_EXP) || [])[1] || "",                                             // 3968
          opening     = BRACKETS[punctuation];                                                                         // 3969
      url = url.replace(TRAILING_CHAR_REG_EXP, "");                                                                    // 3970
                                                                                                                       // 3971
      if (url.split(opening).length > url.split(punctuation).length) {                                                 // 3972
        url = url + punctuation;                                                                                       // 3973
        punctuation = "";                                                                                              // 3974
      }                                                                                                                // 3975
      var realUrl    = url,                                                                                            // 3976
          displayUrl = url;                                                                                            // 3977
      if (url.length > MAX_DISPLAY_LENGTH) {                                                                           // 3978
        displayUrl = displayUrl.substr(0, MAX_DISPLAY_LENGTH) + "...";                                                 // 3979
      }                                                                                                                // 3980
      // Add http prefix if necessary                                                                                  // 3981
      if (realUrl.substr(0, 4) === "www.") {                                                                           // 3982
        realUrl = "http://" + realUrl;                                                                                 // 3983
      }                                                                                                                // 3984
                                                                                                                       // 3985
      return '<a href="' + realUrl + '">' + displayUrl + '</a>' + punctuation;                                         // 3986
    });                                                                                                                // 3987
  }                                                                                                                    // 3988
                                                                                                                       // 3989
  /**                                                                                                                  // 3990
   * Creates or (if already cached) returns a temp element                                                             // 3991
   * for the given document object                                                                                     // 3992
   */                                                                                                                  // 3993
  function _getTempElement(context) {                                                                                  // 3994
    var tempElement = context._wysihtml5_tempElement;                                                                  // 3995
    if (!tempElement) {                                                                                                // 3996
      tempElement = context._wysihtml5_tempElement = context.createElement("div");                                     // 3997
    }                                                                                                                  // 3998
    return tempElement;                                                                                                // 3999
  }                                                                                                                    // 4000
                                                                                                                       // 4001
  /**                                                                                                                  // 4002
   * Replaces the original text nodes with the newly auto-linked dom tree                                              // 4003
   */                                                                                                                  // 4004
  function _wrapMatchesInNode(textNode) {                                                                              // 4005
    var parentNode  = textNode.parentNode,                                                                             // 4006
        tempElement = _getTempElement(parentNode.ownerDocument);                                                       // 4007
                                                                                                                       // 4008
    // We need to insert an empty/temporary <span /> to fix IE quirks                                                  // 4009
    // Elsewise IE would strip white space in the beginning                                                            // 4010
    tempElement.innerHTML = "<span></span>" + _convertUrlsToLinks(textNode.data);                                      // 4011
    tempElement.removeChild(tempElement.firstChild);                                                                   // 4012
                                                                                                                       // 4013
    while (tempElement.firstChild) {                                                                                   // 4014
      // inserts tempElement.firstChild before textNode                                                                // 4015
      parentNode.insertBefore(tempElement.firstChild, textNode);                                                       // 4016
    }                                                                                                                  // 4017
    parentNode.removeChild(textNode);                                                                                  // 4018
  }                                                                                                                    // 4019
                                                                                                                       // 4020
  function _hasParentThatShouldBeIgnored(node) {                                                                       // 4021
    var nodeName;                                                                                                      // 4022
    while (node.parentNode) {                                                                                          // 4023
      node = node.parentNode;                                                                                          // 4024
      nodeName = node.nodeName;                                                                                        // 4025
      if (IGNORE_URLS_IN.contains(nodeName)) {                                                                         // 4026
        return true;                                                                                                   // 4027
      } else if (nodeName === "body") {                                                                                // 4028
        return false;                                                                                                  // 4029
      }                                                                                                                // 4030
    }                                                                                                                  // 4031
    return false;                                                                                                      // 4032
  }                                                                                                                    // 4033
                                                                                                                       // 4034
  function _parseNode(element) {                                                                                       // 4035
    if (IGNORE_URLS_IN.contains(element.nodeName)) {                                                                   // 4036
      return;                                                                                                          // 4037
    }                                                                                                                  // 4038
                                                                                                                       // 4039
    if (element.nodeType === wysihtml5.TEXT_NODE && element.data.match(URL_REG_EXP)) {                                 // 4040
      _wrapMatchesInNode(element);                                                                                     // 4041
      return;                                                                                                          // 4042
    }                                                                                                                  // 4043
                                                                                                                       // 4044
    var childNodes        = wysihtml5.lang.array(element.childNodes).get(),                                            // 4045
        childNodesLength  = childNodes.length,                                                                         // 4046
        i                 = 0;                                                                                         // 4047
                                                                                                                       // 4048
    for (; i<childNodesLength; i++) {                                                                                  // 4049
      _parseNode(childNodes[i]);                                                                                       // 4050
    }                                                                                                                  // 4051
                                                                                                                       // 4052
    return element;                                                                                                    // 4053
  }                                                                                                                    // 4054
                                                                                                                       // 4055
  wysihtml5.dom.autoLink = autoLink;                                                                                   // 4056
                                                                                                                       // 4057
  // Reveal url reg exp to the outside                                                                                 // 4058
  wysihtml5.dom.autoLink.URL_REG_EXP = URL_REG_EXP;                                                                    // 4059
})(wysihtml5);(function(wysihtml5) {                                                                                   // 4060
  var supportsClassList = wysihtml5.browser.supportsClassList(),                                                       // 4061
      api               = wysihtml5.dom;                                                                               // 4062
                                                                                                                       // 4063
  api.addClass = function(element, className) {                                                                        // 4064
    if (supportsClassList) {                                                                                           // 4065
      return element.classList.add(className);                                                                         // 4066
    }                                                                                                                  // 4067
    if (api.hasClass(element, className)) {                                                                            // 4068
      return;                                                                                                          // 4069
    }                                                                                                                  // 4070
    element.className += " " + className;                                                                              // 4071
  };                                                                                                                   // 4072
                                                                                                                       // 4073
  api.removeClass = function(element, className) {                                                                     // 4074
    if (supportsClassList) {                                                                                           // 4075
      return element.classList.remove(className);                                                                      // 4076
    }                                                                                                                  // 4077
                                                                                                                       // 4078
    element.className = element.className.replace(new RegExp("(^|\\s+)" + className + "(\\s+|$)"), " ");               // 4079
  };                                                                                                                   // 4080
                                                                                                                       // 4081
  api.hasClass = function(element, className) {                                                                        // 4082
    if (supportsClassList) {                                                                                           // 4083
      return element.classList.contains(className);                                                                    // 4084
    }                                                                                                                  // 4085
                                                                                                                       // 4086
    var elementClassName = element.className;                                                                          // 4087
    return (elementClassName.length > 0 && (elementClassName == className || new RegExp("(^|\\s)" + className + "(\\s|$)").test(elementClassName)));
  };                                                                                                                   // 4089
})(wysihtml5);                                                                                                         // 4090
wysihtml5.dom.contains = (function() {                                                                                 // 4091
  var documentElement = document.documentElement;                                                                      // 4092
  if (documentElement.contains) {                                                                                      // 4093
    return function(container, element) {                                                                              // 4094
      if (element.nodeType !== wysihtml5.ELEMENT_NODE) {                                                               // 4095
        element = element.parentNode;                                                                                  // 4096
      }                                                                                                                // 4097
      return container !== element && container.contains(element);                                                     // 4098
    };                                                                                                                 // 4099
  } else if (documentElement.compareDocumentPosition) {                                                                // 4100
    return function(container, element) {                                                                              // 4101
      // https://developer.mozilla.org/en/DOM/Node.compareDocumentPosition                                             // 4102
      return !!(container.compareDocumentPosition(element) & 16);                                                      // 4103
    };                                                                                                                 // 4104
  }                                                                                                                    // 4105
})();/**                                                                                                               // 4106
 * Converts an HTML fragment/element into a unordered/ordered list                                                     // 4107
 *                                                                                                                     // 4108
 * @param {Element} element The element which should be turned into a list                                             // 4109
 * @param {String} listType The list type in which to convert the tree (either "ul" or "ol")                           // 4110
 * @return {Element} The created list                                                                                  // 4111
 *                                                                                                                     // 4112
 * @example                                                                                                            // 4113
 *    <!-- Assume the following dom: -->                                                                               // 4114
 *    <span id="pseudo-list">                                                                                          // 4115
 *      eminem<br>                                                                                                     // 4116
 *      dr. dre                                                                                                        // 4117
 *      <div>50 Cent</div>                                                                                             // 4118
 *    </span>                                                                                                          // 4119
 *                                                                                                                     // 4120
 *    <script>                                                                                                         // 4121
 *      wysihtml5.dom.convertToList(document.getElementById("pseudo-list"), "ul");                                     // 4122
 *    </script>                                                                                                        // 4123
 *                                                                                                                     // 4124
 *    <!-- Will result in: -->                                                                                         // 4125
 *    <ul>                                                                                                             // 4126
 *      <li>eminem</li>                                                                                                // 4127
 *      <li>dr. dre</li>                                                                                               // 4128
 *      <li>50 Cent</li>                                                                                               // 4129
 *    </ul>                                                                                                            // 4130
 */                                                                                                                    // 4131
wysihtml5.dom.convertToList = (function() {                                                                            // 4132
  function _createListItem(doc, list) {                                                                                // 4133
    var listItem = doc.createElement("li");                                                                            // 4134
    list.appendChild(listItem);                                                                                        // 4135
    return listItem;                                                                                                   // 4136
  }                                                                                                                    // 4137
                                                                                                                       // 4138
  function _createList(doc, type) {                                                                                    // 4139
    return doc.createElement(type);                                                                                    // 4140
  }                                                                                                                    // 4141
                                                                                                                       // 4142
  function convertToList(element, listType) {                                                                          // 4143
    if (element.nodeName === "UL" || element.nodeName === "OL" || element.nodeName === "MENU") {                       // 4144
      // Already a list                                                                                                // 4145
      return element;                                                                                                  // 4146
    }                                                                                                                  // 4147
                                                                                                                       // 4148
    var doc               = element.ownerDocument,                                                                     // 4149
        list              = _createList(doc, listType),                                                                // 4150
        lineBreaks        = element.querySelectorAll("br"),                                                            // 4151
        lineBreaksLength  = lineBreaks.length,                                                                         // 4152
        childNodes,                                                                                                    // 4153
        childNodesLength,                                                                                              // 4154
        childNode,                                                                                                     // 4155
        lineBreak,                                                                                                     // 4156
        parentNode,                                                                                                    // 4157
        isBlockElement,                                                                                                // 4158
        isLineBreak,                                                                                                   // 4159
        currentListItem,                                                                                               // 4160
        i;                                                                                                             // 4161
                                                                                                                       // 4162
    // First find <br> at the end of inline elements and move them behind them                                         // 4163
    for (i=0; i<lineBreaksLength; i++) {                                                                               // 4164
      lineBreak = lineBreaks[i];                                                                                       // 4165
      while ((parentNode = lineBreak.parentNode) && parentNode !== element && parentNode.lastChild === lineBreak) {    // 4166
        if (wysihtml5.dom.getStyle("display").from(parentNode) === "block") {                                          // 4167
          parentNode.removeChild(lineBreak);                                                                           // 4168
          break;                                                                                                       // 4169
        }                                                                                                              // 4170
        wysihtml5.dom.insert(lineBreak).after(lineBreak.parentNode);                                                   // 4171
      }                                                                                                                // 4172
    }                                                                                                                  // 4173
                                                                                                                       // 4174
    childNodes        = wysihtml5.lang.array(element.childNodes).get();                                                // 4175
    childNodesLength  = childNodes.length;                                                                             // 4176
                                                                                                                       // 4177
    for (i=0; i<childNodesLength; i++) {                                                                               // 4178
      currentListItem   = currentListItem || _createListItem(doc, list);                                               // 4179
      childNode         = childNodes[i];                                                                               // 4180
      isBlockElement    = wysihtml5.dom.getStyle("display").from(childNode) === "block";                               // 4181
      isLineBreak       = childNode.nodeName === "BR";                                                                 // 4182
                                                                                                                       // 4183
      if (isBlockElement) {                                                                                            // 4184
        // Append blockElement to current <li> if empty, otherwise create a new one                                    // 4185
        currentListItem = currentListItem.firstChild ? _createListItem(doc, list) : currentListItem;                   // 4186
        currentListItem.appendChild(childNode);                                                                        // 4187
        currentListItem = null;                                                                                        // 4188
        continue;                                                                                                      // 4189
      }                                                                                                                // 4190
                                                                                                                       // 4191
      if (isLineBreak) {                                                                                               // 4192
        // Only create a new list item in the next iteration when the current one has already content                  // 4193
        currentListItem = currentListItem.firstChild ? null : currentListItem;                                         // 4194
        continue;                                                                                                      // 4195
      }                                                                                                                // 4196
                                                                                                                       // 4197
      currentListItem.appendChild(childNode);                                                                          // 4198
    }                                                                                                                  // 4199
                                                                                                                       // 4200
    element.parentNode.replaceChild(list, element);                                                                    // 4201
    return list;                                                                                                       // 4202
  }                                                                                                                    // 4203
                                                                                                                       // 4204
  return convertToList;                                                                                                // 4205
})();/**                                                                                                               // 4206
 * Copy a set of attributes from one element to another                                                                // 4207
 *                                                                                                                     // 4208
 * @param {Array} attributesToCopy List of attributes which should be copied                                           // 4209
 * @return {Object} Returns an object which offers the "from" method which can be invoked with the element where to    // 4210
 *    copy the attributes from., this again returns an object which provides a method named "to" which can be invoked  // 4211
 *    with the element where to copy the attributes to (see example)                                                   // 4212
 *                                                                                                                     // 4213
 * @example                                                                                                            // 4214
 *    var textarea    = document.querySelector("textarea"),                                                            // 4215
 *        div         = document.querySelector("div[contenteditable=true]"),                                           // 4216
 *        anotherDiv  = document.querySelector("div.preview");                                                         // 4217
 *    wysihtml5.dom.copyAttributes(["spellcheck", "value", "placeholder"]).from(textarea).to(div).andTo(anotherDiv);   // 4218
 *                                                                                                                     // 4219
 */                                                                                                                    // 4220
wysihtml5.dom.copyAttributes = function(attributesToCopy) {                                                            // 4221
  return {                                                                                                             // 4222
    from: function(elementToCopyFrom) {                                                                                // 4223
      return {                                                                                                         // 4224
        to: function(elementToCopyTo) {                                                                                // 4225
          var attribute,                                                                                               // 4226
              i         = 0,                                                                                           // 4227
              length    = attributesToCopy.length;                                                                     // 4228
          for (; i<length; i++) {                                                                                      // 4229
            attribute = attributesToCopy[i];                                                                           // 4230
            if (typeof(elementToCopyFrom[attribute]) !== "undefined" && elementToCopyFrom[attribute] !== "") {         // 4231
              elementToCopyTo[attribute] = elementToCopyFrom[attribute];                                               // 4232
            }                                                                                                          // 4233
          }                                                                                                            // 4234
          return { andTo: arguments.callee };                                                                          // 4235
        }                                                                                                              // 4236
      };                                                                                                               // 4237
    }                                                                                                                  // 4238
  };                                                                                                                   // 4239
};/**                                                                                                                  // 4240
 * Copy a set of styles from one element to another                                                                    // 4241
 * Please note that this only works properly across browsers when the element from which to copy the styles            // 4242
 * is in the dom                                                                                                       // 4243
 *                                                                                                                     // 4244
 * Interesting article on how to copy styles                                                                           // 4245
 *                                                                                                                     // 4246
 * @param {Array} stylesToCopy List of styles which should be copied                                                   // 4247
 * @return {Object} Returns an object which offers the "from" method which can be invoked with the element where to    // 4248
 *    copy the styles from., this again returns an object which provides a method named "to" which can be invoked      // 4249
 *    with the element where to copy the styles to (see example)                                                       // 4250
 *                                                                                                                     // 4251
 * @example                                                                                                            // 4252
 *    var textarea    = document.querySelector("textarea"),                                                            // 4253
 *        div         = document.querySelector("div[contenteditable=true]"),                                           // 4254
 *        anotherDiv  = document.querySelector("div.preview");                                                         // 4255
 *    wysihtml5.dom.copyStyles(["overflow-y", "width", "height"]).from(textarea).to(div).andTo(anotherDiv);            // 4256
 *                                                                                                                     // 4257
 */                                                                                                                    // 4258
(function(dom) {                                                                                                       // 4259
                                                                                                                       // 4260
  /**                                                                                                                  // 4261
   * Mozilla, WebKit and Opera recalculate the computed width when box-sizing: boder-box; is set                       // 4262
   * So if an element has "width: 200px; -moz-box-sizing: border-box; border: 1px;" then                               // 4263
   * its computed css width will be 198px                                                                              // 4264
   */                                                                                                                  // 4265
  var BOX_SIZING_PROPERTIES = ["-webkit-box-sizing", "-moz-box-sizing", "-ms-box-sizing", "box-sizing"];               // 4266
                                                                                                                       // 4267
  var shouldIgnoreBoxSizingBorderBox = function(element) {                                                             // 4268
    if (hasBoxSizingBorderBox(element)) {                                                                              // 4269
       return parseInt(dom.getStyle("width").from(element), 10) < element.offsetWidth;                                 // 4270
    }                                                                                                                  // 4271
    return false;                                                                                                      // 4272
  };                                                                                                                   // 4273
                                                                                                                       // 4274
  var hasBoxSizingBorderBox = function(element) {                                                                      // 4275
    var i       = 0,                                                                                                   // 4276
        length  = BOX_SIZING_PROPERTIES.length;                                                                        // 4277
    for (; i<length; i++) {                                                                                            // 4278
      if (dom.getStyle(BOX_SIZING_PROPERTIES[i]).from(element) === "border-box") {                                     // 4279
        return BOX_SIZING_PROPERTIES[i];                                                                               // 4280
      }                                                                                                                // 4281
    }                                                                                                                  // 4282
  };                                                                                                                   // 4283
                                                                                                                       // 4284
  dom.copyStyles = function(stylesToCopy) {                                                                            // 4285
    return {                                                                                                           // 4286
      from: function(element) {                                                                                        // 4287
        if (shouldIgnoreBoxSizingBorderBox(element)) {                                                                 // 4288
          stylesToCopy = wysihtml5.lang.array(stylesToCopy).without(BOX_SIZING_PROPERTIES);                            // 4289
        }                                                                                                              // 4290
                                                                                                                       // 4291
        var cssText = "",                                                                                              // 4292
            length  = stylesToCopy.length,                                                                             // 4293
            i       = 0,                                                                                               // 4294
            property;                                                                                                  // 4295
        for (; i<length; i++) {                                                                                        // 4296
          property = stylesToCopy[i];                                                                                  // 4297
          cssText += property + ":" + dom.getStyle(property).from(element) + ";";                                      // 4298
        }                                                                                                              // 4299
                                                                                                                       // 4300
        return {                                                                                                       // 4301
          to: function(element) {                                                                                      // 4302
            dom.setStyles(cssText).on(element);                                                                        // 4303
            return { andTo: arguments.callee };                                                                        // 4304
          }                                                                                                            // 4305
        };                                                                                                             // 4306
      }                                                                                                                // 4307
    };                                                                                                                 // 4308
  };                                                                                                                   // 4309
})(wysihtml5.dom);/**                                                                                                  // 4310
 * Event Delegation                                                                                                    // 4311
 *                                                                                                                     // 4312
 * @example                                                                                                            // 4313
 *    wysihtml5.dom.delegate(document.body, "a", "click", function() {                                                 // 4314
 *      // foo                                                                                                         // 4315
 *    });                                                                                                              // 4316
 */                                                                                                                    // 4317
(function(wysihtml5) {                                                                                                 // 4318
                                                                                                                       // 4319
  wysihtml5.dom.delegate = function(container, selector, eventName, handler) {                                         // 4320
    return wysihtml5.dom.observe(container, eventName, function(event) {                                               // 4321
      var target    = event.target,                                                                                    // 4322
          match     = wysihtml5.lang.array(container.querySelectorAll(selector));                                      // 4323
                                                                                                                       // 4324
      while (target && target !== container) {                                                                         // 4325
        if (match.contains(target)) {                                                                                  // 4326
          handler.call(target, event);                                                                                 // 4327
          break;                                                                                                       // 4328
        }                                                                                                              // 4329
        target = target.parentNode;                                                                                    // 4330
      }                                                                                                                // 4331
    });                                                                                                                // 4332
  };                                                                                                                   // 4333
                                                                                                                       // 4334
})(wysihtml5);/**                                                                                                      // 4335
 * Returns the given html wrapped in a div element                                                                     // 4336
 *                                                                                                                     // 4337
 * Fixing IE's inability to treat unknown elements (HTML5 section, article, ...) correctly                             // 4338
 * when inserted via innerHTML                                                                                         // 4339
 *                                                                                                                     // 4340
 * @param {String} html The html which should be wrapped in a dom element                                              // 4341
 * @param {Obejct} [context] Document object of the context the html belongs to                                        // 4342
 *                                                                                                                     // 4343
 * @example                                                                                                            // 4344
 *    wysihtml5.dom.getAsDom("<article>foo</article>");                                                                // 4345
 */                                                                                                                    // 4346
wysihtml5.dom.getAsDom = (function() {                                                                                 // 4347
                                                                                                                       // 4348
  var _innerHTMLShiv = function(html, context) {                                                                       // 4349
    var tempElement = context.createElement("div");                                                                    // 4350
    tempElement.style.display = "none";                                                                                // 4351
    context.body.appendChild(tempElement);                                                                             // 4352
    // IE throws an exception when trying to insert <frameset></frameset> via innerHTML                                // 4353
    try { tempElement.innerHTML = html; } catch(e) {}                                                                  // 4354
    context.body.removeChild(tempElement);                                                                             // 4355
    return tempElement;                                                                                                // 4356
  };                                                                                                                   // 4357
                                                                                                                       // 4358
  /**                                                                                                                  // 4359
   * Make sure IE supports HTML5 tags, which is accomplished by simply creating one instance of each element           // 4360
   */                                                                                                                  // 4361
  var _ensureHTML5Compatibility = function(context) {                                                                  // 4362
    if (context._wysihtml5_supportsHTML5Tags) {                                                                        // 4363
      return;                                                                                                          // 4364
    }                                                                                                                  // 4365
    for (var i=0, length=HTML5_ELEMENTS.length; i<length; i++) {                                                       // 4366
      context.createElement(HTML5_ELEMENTS[i]);                                                                        // 4367
    }                                                                                                                  // 4368
    context._wysihtml5_supportsHTML5Tags = true;                                                                       // 4369
  };                                                                                                                   // 4370
                                                                                                                       // 4371
                                                                                                                       // 4372
  /**                                                                                                                  // 4373
   * List of html5 tags                                                                                                // 4374
   * taken from http://simon.html5.org/html5-elements                                                                  // 4375
   */                                                                                                                  // 4376
  var HTML5_ELEMENTS = [                                                                                               // 4377
    "abbr", "article", "aside", "audio", "bdi", "canvas", "command", "datalist", "details", "figcaption",              // 4378
    "figure", "footer", "header", "hgroup", "keygen", "mark", "meter", "nav", "output", "progress",                    // 4379
    "rp", "rt", "ruby", "svg", "section", "source", "summary", "time", "track", "video", "wbr"                         // 4380
  ];                                                                                                                   // 4381
                                                                                                                       // 4382
  return function(html, context) {                                                                                     // 4383
    context = context || document;                                                                                     // 4384
    var tempElement;                                                                                                   // 4385
    if (typeof(html) === "object" && html.nodeType) {                                                                  // 4386
      tempElement = context.createElement("div");                                                                      // 4387
      tempElement.appendChild(html);                                                                                   // 4388
    } else if (wysihtml5.browser.supportsHTML5Tags(context)) {                                                         // 4389
      tempElement = context.createElement("div");                                                                      // 4390
      tempElement.innerHTML = html;                                                                                    // 4391
    } else {                                                                                                           // 4392
      _ensureHTML5Compatibility(context);                                                                              // 4393
      tempElement = _innerHTMLShiv(html, context);                                                                     // 4394
    }                                                                                                                  // 4395
    return tempElement;                                                                                                // 4396
  };                                                                                                                   // 4397
})();/**                                                                                                               // 4398
 * Walks the dom tree from the given node up until it finds a match                                                    // 4399
 * Designed for optimal performance.                                                                                   // 4400
 *                                                                                                                     // 4401
 * @param {Element} node The from which to check the parent nodes                                                      // 4402
 * @param {Object} matchingSet Object to match against (possible properties: nodeName, className, classRegExp)         // 4403
 * @param {Number} [levels] How many parents should the function check up from the current node (defaults to 50)       // 4404
 * @return {null|Element} Returns the first element that matched the desiredNodeName(s)                                // 4405
 * @example                                                                                                            // 4406
 *    var listElement = wysihtml5.dom.getParentElement(document.querySelector("li"), { nodeName: ["MENU", "UL", "OL"] });
 *    // ... or ...                                                                                                    // 4408
 *    var unorderedListElement = wysihtml5.dom.getParentElement(document.querySelector("li"), { nodeName: "UL" });     // 4409
 *    // ... or ...                                                                                                    // 4410
 *    var coloredElement = wysihtml5.dom.getParentElement(myTextNode, { nodeName: "SPAN", className: "wysiwyg-color-red", classRegExp: /wysiwyg-color-[a-z]/g });
 */                                                                                                                    // 4412
wysihtml5.dom.getParentElement = (function() {                                                                         // 4413
                                                                                                                       // 4414
  function _isSameNodeName(nodeName, desiredNodeNames) {                                                               // 4415
    if (!desiredNodeNames || !desiredNodeNames.length) {                                                               // 4416
      return true;                                                                                                     // 4417
    }                                                                                                                  // 4418
                                                                                                                       // 4419
    if (typeof(desiredNodeNames) === "string") {                                                                       // 4420
      return nodeName === desiredNodeNames;                                                                            // 4421
    } else {                                                                                                           // 4422
      return wysihtml5.lang.array(desiredNodeNames).contains(nodeName);                                                // 4423
    }                                                                                                                  // 4424
  }                                                                                                                    // 4425
                                                                                                                       // 4426
  function _isElement(node) {                                                                                          // 4427
    return node.nodeType === wysihtml5.ELEMENT_NODE;                                                                   // 4428
  }                                                                                                                    // 4429
                                                                                                                       // 4430
  function _hasClassName(element, className, classRegExp) {                                                            // 4431
    var classNames = (element.className || "").match(classRegExp) || [];                                               // 4432
    if (!className) {                                                                                                  // 4433
      return !!classNames.length;                                                                                      // 4434
    }                                                                                                                  // 4435
    return classNames[classNames.length - 1] === className;                                                            // 4436
  }                                                                                                                    // 4437
                                                                                                                       // 4438
  function _getParentElementWithNodeName(node, nodeName, levels) {                                                     // 4439
    while (levels-- && node && node.nodeName !== "BODY") {                                                             // 4440
      if (_isSameNodeName(node.nodeName, nodeName)) {                                                                  // 4441
        return node;                                                                                                   // 4442
      }                                                                                                                // 4443
      node = node.parentNode;                                                                                          // 4444
    }                                                                                                                  // 4445
    return null;                                                                                                       // 4446
  }                                                                                                                    // 4447
                                                                                                                       // 4448
  function _getParentElementWithNodeNameAndClassName(node, nodeName, className, classRegExp, levels) {                 // 4449
    while (levels-- && node && node.nodeName !== "BODY") {                                                             // 4450
      if (_isElement(node) &&                                                                                          // 4451
          _isSameNodeName(node.nodeName, nodeName) &&                                                                  // 4452
          _hasClassName(node, className, classRegExp)) {                                                               // 4453
        return node;                                                                                                   // 4454
      }                                                                                                                // 4455
      node = node.parentNode;                                                                                          // 4456
    }                                                                                                                  // 4457
    return null;                                                                                                       // 4458
  }                                                                                                                    // 4459
                                                                                                                       // 4460
  return function(node, matchingSet, levels) {                                                                         // 4461
    levels = levels || 50; // Go max 50 nodes upwards from current node                                                // 4462
    if (matchingSet.className || matchingSet.classRegExp) {                                                            // 4463
      return _getParentElementWithNodeNameAndClassName(                                                                // 4464
        node, matchingSet.nodeName, matchingSet.className, matchingSet.classRegExp, levels                             // 4465
      );                                                                                                               // 4466
    } else {                                                                                                           // 4467
      return _getParentElementWithNodeName(                                                                            // 4468
        node, matchingSet.nodeName, levels                                                                             // 4469
      );                                                                                                               // 4470
    }                                                                                                                  // 4471
  };                                                                                                                   // 4472
})();                                                                                                                  // 4473
/**                                                                                                                    // 4474
 * Get element's style for a specific css property                                                                     // 4475
 *                                                                                                                     // 4476
 * @param {Element} element The element on which to retrieve the style                                                 // 4477
 * @param {String} property The CSS property to retrieve ("float", "display", "text-align", ...)                       // 4478
 *                                                                                                                     // 4479
 * @example                                                                                                            // 4480
 *    wysihtml5.dom.getStyle("display").from(document.body);                                                           // 4481
 *    // => "block"                                                                                                    // 4482
 */                                                                                                                    // 4483
wysihtml5.dom.getStyle = (function() {                                                                                 // 4484
  var stylePropertyMapping = {                                                                                         // 4485
        "float": ("styleFloat" in document.createElement("div").style) ? "styleFloat" : "cssFloat"                     // 4486
      },                                                                                                               // 4487
      REG_EXP_CAMELIZE = /\-[a-z]/g;                                                                                   // 4488
                                                                                                                       // 4489
  function camelize(str) {                                                                                             // 4490
    return str.replace(REG_EXP_CAMELIZE, function(match) {                                                             // 4491
      return match.charAt(1).toUpperCase();                                                                            // 4492
    });                                                                                                                // 4493
  }                                                                                                                    // 4494
                                                                                                                       // 4495
  return function(property) {                                                                                          // 4496
    return {                                                                                                           // 4497
      from: function(element) {                                                                                        // 4498
        if (element.nodeType !== wysihtml5.ELEMENT_NODE) {                                                             // 4499
          return;                                                                                                      // 4500
        }                                                                                                              // 4501
                                                                                                                       // 4502
        var doc               = element.ownerDocument,                                                                 // 4503
            camelizedProperty = stylePropertyMapping[property] || camelize(property),                                  // 4504
            style             = element.style,                                                                         // 4505
            currentStyle      = element.currentStyle,                                                                  // 4506
            styleValue        = style[camelizedProperty];                                                              // 4507
        if (styleValue) {                                                                                              // 4508
          return styleValue;                                                                                           // 4509
        }                                                                                                              // 4510
                                                                                                                       // 4511
        // currentStyle is no standard and only supported by Opera and IE but it has one important advantage over the standard-compliant
        // window.getComputedStyle, since it returns css property values in their original unit:                       // 4513
        // If you set an elements width to "50%", window.getComputedStyle will give you it's current width in px while currentStyle
        // gives you the original "50%".                                                                               // 4515
        // Opera supports both, currentStyle and window.getComputedStyle, that's why checking for currentStyle should have higher prio
        if (currentStyle) {                                                                                            // 4517
          try {                                                                                                        // 4518
                return currentStyle[camelizedProperty];                                                                // 4519
          } catch(e) {                                                                                                 // 4520
            //ie will occasionally fail for unknown reasons. swallowing exception                                      // 4521
          }                                                                                                            // 4522
        }                                                                                                              // 4523
                                                                                                                       // 4524
        var win                 = doc.defaultView || doc.parentWindow,                                                 // 4525
            needsOverflowReset  = (property === "height" || property === "width") && element.nodeName === "TEXTAREA",  // 4526
            originalOverflow,                                                                                          // 4527
            returnValue;                                                                                               // 4528
                                                                                                                       // 4529
        if (win.getComputedStyle) {                                                                                    // 4530
          // Chrome and Safari both calculate a wrong width and height for textareas when they have scroll bars        // 4531
          // therfore we remove and restore the scrollbar and calculate the value in between                           // 4532
          if (needsOverflowReset) {                                                                                    // 4533
            originalOverflow = style.overflow;                                                                         // 4534
            style.overflow = "hidden";                                                                                 // 4535
          }                                                                                                            // 4536
          returnValue = win.getComputedStyle(element, null).getPropertyValue(property);                                // 4537
          if (needsOverflowReset) {                                                                                    // 4538
            style.overflow = originalOverflow || "";                                                                   // 4539
          }                                                                                                            // 4540
          return returnValue;                                                                                          // 4541
        }                                                                                                              // 4542
      }                                                                                                                // 4543
    };                                                                                                                 // 4544
  };                                                                                                                   // 4545
})();/**                                                                                                               // 4546
 * High performant way to check whether an element with a specific tag name is in the given document                   // 4547
 * Optimized for being heavily executed                                                                                // 4548
 * Unleashes the power of live node lists                                                                              // 4549
 *                                                                                                                     // 4550
 * @param {Object} doc The document object of the context where to check                                               // 4551
 * @param {String} tagName Upper cased tag name                                                                        // 4552
 * @example                                                                                                            // 4553
 *    wysihtml5.dom.hasElementWithTagName(document, "IMG");                                                            // 4554
 */                                                                                                                    // 4555
wysihtml5.dom.hasElementWithTagName = (function() {                                                                    // 4556
  var LIVE_CACHE          = {},                                                                                        // 4557
      DOCUMENT_IDENTIFIER = 1;                                                                                         // 4558
                                                                                                                       // 4559
  function _getDocumentIdentifier(doc) {                                                                               // 4560
    return doc._wysihtml5_identifier || (doc._wysihtml5_identifier = DOCUMENT_IDENTIFIER++);                           // 4561
  }                                                                                                                    // 4562
                                                                                                                       // 4563
  return function(doc, tagName) {                                                                                      // 4564
    var key         = _getDocumentIdentifier(doc) + ":" + tagName,                                                     // 4565
        cacheEntry  = LIVE_CACHE[key];                                                                                 // 4566
    if (!cacheEntry) {                                                                                                 // 4567
      cacheEntry = LIVE_CACHE[key] = doc.getElementsByTagName(tagName);                                                // 4568
    }                                                                                                                  // 4569
                                                                                                                       // 4570
    return cacheEntry.length > 0;                                                                                      // 4571
  };                                                                                                                   // 4572
})();/**                                                                                                               // 4573
 * High performant way to check whether an element with a specific class name is in the given document                 // 4574
 * Optimized for being heavily executed                                                                                // 4575
 * Unleashes the power of live node lists                                                                              // 4576
 *                                                                                                                     // 4577
 * @param {Object} doc The document object of the context where to check                                               // 4578
 * @param {String} tagName Upper cased tag name                                                                        // 4579
 * @example                                                                                                            // 4580
 *    wysihtml5.dom.hasElementWithClassName(document, "foobar");                                                       // 4581
 */                                                                                                                    // 4582
(function(wysihtml5) {                                                                                                 // 4583
  var LIVE_CACHE          = {},                                                                                        // 4584
      DOCUMENT_IDENTIFIER = 1;                                                                                         // 4585
                                                                                                                       // 4586
  function _getDocumentIdentifier(doc) {                                                                               // 4587
    return doc._wysihtml5_identifier || (doc._wysihtml5_identifier = DOCUMENT_IDENTIFIER++);                           // 4588
  }                                                                                                                    // 4589
                                                                                                                       // 4590
  wysihtml5.dom.hasElementWithClassName = function(doc, className) {                                                   // 4591
    // getElementsByClassName is not supported by IE<9                                                                 // 4592
    // but is sometimes mocked via library code (which then doesn't return live node lists)                            // 4593
    if (!wysihtml5.browser.supportsNativeGetElementsByClassName()) {                                                   // 4594
      return !!doc.querySelector("." + className);                                                                     // 4595
    }                                                                                                                  // 4596
                                                                                                                       // 4597
    var key         = _getDocumentIdentifier(doc) + ":" + className,                                                   // 4598
        cacheEntry  = LIVE_CACHE[key];                                                                                 // 4599
    if (!cacheEntry) {                                                                                                 // 4600
      cacheEntry = LIVE_CACHE[key] = doc.getElementsByClassName(className);                                            // 4601
    }                                                                                                                  // 4602
                                                                                                                       // 4603
    return cacheEntry.length > 0;                                                                                      // 4604
  };                                                                                                                   // 4605
})(wysihtml5);                                                                                                         // 4606
wysihtml5.dom.insert = function(elementToInsert) {                                                                     // 4607
  return {                                                                                                             // 4608
    after: function(element) {                                                                                         // 4609
      element.parentNode.insertBefore(elementToInsert, element.nextSibling);                                           // 4610
    },                                                                                                                 // 4611
                                                                                                                       // 4612
    before: function(element) {                                                                                        // 4613
      element.parentNode.insertBefore(elementToInsert, element);                                                       // 4614
    },                                                                                                                 // 4615
                                                                                                                       // 4616
    into: function(element) {                                                                                          // 4617
      element.appendChild(elementToInsert);                                                                            // 4618
    }                                                                                                                  // 4619
  };                                                                                                                   // 4620
};wysihtml5.dom.insertCSS = function(rules) {                                                                          // 4621
  rules = rules.join("\n");                                                                                            // 4622
                                                                                                                       // 4623
  return {                                                                                                             // 4624
    into: function(doc) {                                                                                              // 4625
      var head         = doc.head || doc.getElementsByTagName("head")[0],                                              // 4626
          styleElement = doc.createElement("style");                                                                   // 4627
                                                                                                                       // 4628
      styleElement.type = "text/css";                                                                                  // 4629
                                                                                                                       // 4630
      if (styleElement.styleSheet) {                                                                                   // 4631
        styleElement.styleSheet.cssText = rules;                                                                       // 4632
      } else {                                                                                                         // 4633
        styleElement.appendChild(doc.createTextNode(rules));                                                           // 4634
      }                                                                                                                // 4635
                                                                                                                       // 4636
      if (head) {                                                                                                      // 4637
        head.appendChild(styleElement);                                                                                // 4638
      }                                                                                                                // 4639
    }                                                                                                                  // 4640
  };                                                                                                                   // 4641
};/**                                                                                                                  // 4642
 * Method to set dom events                                                                                            // 4643
 *                                                                                                                     // 4644
 * @example                                                                                                            // 4645
 *    wysihtml5.dom.observe(iframe.contentWindow.document.body, ["focus", "blur"], function() { ... });                // 4646
 */                                                                                                                    // 4647
wysihtml5.dom.observe = function(element, eventNames, handler) {                                                       // 4648
  eventNames = typeof(eventNames) === "string" ? [eventNames] : eventNames;                                            // 4649
                                                                                                                       // 4650
  var handlerWrapper,                                                                                                  // 4651
      eventName,                                                                                                       // 4652
      i       = 0,                                                                                                     // 4653
      length  = eventNames.length;                                                                                     // 4654
                                                                                                                       // 4655
  for (; i<length; i++) {                                                                                              // 4656
    eventName = eventNames[i];                                                                                         // 4657
    if (element.addEventListener) {                                                                                    // 4658
      element.addEventListener(eventName, handler, false);                                                             // 4659
    } else {                                                                                                           // 4660
      handlerWrapper = function(event) {                                                                               // 4661
        if (!("target" in event)) {                                                                                    // 4662
          event.target = event.srcElement;                                                                             // 4663
        }                                                                                                              // 4664
        event.preventDefault = event.preventDefault || function() {                                                    // 4665
          this.returnValue = false;                                                                                    // 4666
        };                                                                                                             // 4667
        event.stopPropagation = event.stopPropagation || function() {                                                  // 4668
          this.cancelBubble = true;                                                                                    // 4669
        };                                                                                                             // 4670
        handler.call(element, event);                                                                                  // 4671
      };                                                                                                               // 4672
      element.attachEvent("on" + eventName, handlerWrapper);                                                           // 4673
    }                                                                                                                  // 4674
  }                                                                                                                    // 4675
                                                                                                                       // 4676
  return {                                                                                                             // 4677
    stop: function() {                                                                                                 // 4678
      var eventName,                                                                                                   // 4679
          i       = 0,                                                                                                 // 4680
          length  = eventNames.length;                                                                                 // 4681
      for (; i<length; i++) {                                                                                          // 4682
        eventName = eventNames[i];                                                                                     // 4683
        if (element.removeEventListener) {                                                                             // 4684
          element.removeEventListener(eventName, handler, false);                                                      // 4685
        } else {                                                                                                       // 4686
          element.detachEvent("on" + eventName, handlerWrapper);                                                       // 4687
        }                                                                                                              // 4688
      }                                                                                                                // 4689
    }                                                                                                                  // 4690
  };                                                                                                                   // 4691
};                                                                                                                     // 4692
/**                                                                                                                    // 4693
 * HTML Sanitizer                                                                                                      // 4694
 * Rewrites the HTML based on given rules                                                                              // 4695
 *                                                                                                                     // 4696
 * @param {Element|String} elementOrHtml HTML String to be sanitized OR element whose content should be sanitized      // 4697
 * @param {Object} [rules] List of rules for rewriting the HTML, if there's no rule for an element it will             // 4698
 *    be converted to a "span". Each rule is a key/value pair where key is the tag to convert, and value the           // 4699
 *    desired substitution.                                                                                            // 4700
 * @param {Object} context Document object in which to parse the html, needed to sandbox the parsing                   // 4701
 *                                                                                                                     // 4702
 * @return {Element|String} Depends on the elementOrHtml parameter. When html then the sanitized html as string elsewise the element.
 *                                                                                                                     // 4704
 * @example                                                                                                            // 4705
 *    var userHTML = '<div id="foo" onclick="alert(1);"><p><font color="red">foo</font><script>alert(1);</script></p></div>';
 *    wysihtml5.dom.parse(userHTML, {                                                                                  // 4707
 *      tags {                                                                                                         // 4708
 *        p:      "div",      // Rename p tags to div tags                                                             // 4709
 *        font:   "span"      // Rename font tags to span tags                                                         // 4710
 *        div:    true,       // Keep them, also possible (same result when passing: "div" or true)                    // 4711
 *        script: undefined   // Remove script elements                                                                // 4712
 *      }                                                                                                              // 4713
 *    });                                                                                                              // 4714
 *    // => <div><div><span>foo bar</span></div></div>                                                                 // 4715
 *                                                                                                                     // 4716
 *    var userHTML = '<table><tbody><tr><td>I'm a table!</td></tr></tbody></table>';                                   // 4717
 *    wysihtml5.dom.parse(userHTML);                                                                                   // 4718
 *    // => '<span><span><span><span>I'm a table!</span></span></span></span>'                                         // 4719
 *                                                                                                                     // 4720
 *    var userHTML = '<div>foobar<br>foobar</div>';                                                                    // 4721
 *    wysihtml5.dom.parse(userHTML, {                                                                                  // 4722
 *      tags: {                                                                                                        // 4723
 *        div: undefined,                                                                                              // 4724
 *        br:  true                                                                                                    // 4725
 *      }                                                                                                              // 4726
 *    });                                                                                                              // 4727
 *    // => ''                                                                                                         // 4728
 *                                                                                                                     // 4729
 *    var userHTML = '<div class="red">foo</div><div class="pink">bar</div>';                                          // 4730
 *    wysihtml5.dom.parse(userHTML, {                                                                                  // 4731
 *      classes: {                                                                                                     // 4732
 *        red:    1,                                                                                                   // 4733
 *        green:  1                                                                                                    // 4734
 *      },                                                                                                             // 4735
 *      tags: {                                                                                                        // 4736
 *        div: {                                                                                                       // 4737
 *          rename_tag:     "p"                                                                                        // 4738
 *        }                                                                                                            // 4739
 *      }                                                                                                              // 4740
 *    });                                                                                                              // 4741
 *    // => '<p class="red">foo</p><p>bar</p>'                                                                         // 4742
 */                                                                                                                    // 4743
wysihtml5.dom.parse = (function() {                                                                                    // 4744
                                                                                                                       // 4745
  /**                                                                                                                  // 4746
   * It's not possible to use a XMLParser/DOMParser as HTML5 is not always well-formed XML                             // 4747
   * new DOMParser().parseFromString('<img src="foo.gif">') will cause a parseError since the                          // 4748
   * node isn't closed                                                                                                 // 4749
   *                                                                                                                   // 4750
   * Therefore we've to use the browser's ordinary HTML parser invoked by setting innerHTML.                           // 4751
   */                                                                                                                  // 4752
  var NODE_TYPE_MAPPING = {                                                                                            // 4753
        "1": _handleElement,                                                                                           // 4754
        "3": _handleText                                                                                               // 4755
      },                                                                                                               // 4756
      // Rename unknown tags to this                                                                                   // 4757
      DEFAULT_NODE_NAME   = "span",                                                                                    // 4758
      WHITE_SPACE_REG_EXP = /\s+/,                                                                                     // 4759
      defaultRules        = { tags: {}, classes: {} },                                                                 // 4760
      currentRules        = {};                                                                                        // 4761
                                                                                                                       // 4762
  /**                                                                                                                  // 4763
   * Iterates over all childs of the element, recreates them, appends them into a document fragment                    // 4764
   * which later replaces the entire body content                                                                      // 4765
   */                                                                                                                  // 4766
  function parse(elementOrHtml, rules, context, cleanUp) {                                                             // 4767
    wysihtml5.lang.object(currentRules).merge(defaultRules).merge(rules).get();                                        // 4768
                                                                                                                       // 4769
    context           = context || elementOrHtml.ownerDocument || document;                                            // 4770
    var fragment      = context.createDocumentFragment(),                                                              // 4771
        isString      = typeof(elementOrHtml) === "string",                                                            // 4772
        element,                                                                                                       // 4773
        newNode,                                                                                                       // 4774
        firstChild;                                                                                                    // 4775
                                                                                                                       // 4776
    if (isString) {                                                                                                    // 4777
      element = wysihtml5.dom.getAsDom(elementOrHtml, context);                                                        // 4778
    } else {                                                                                                           // 4779
      element = elementOrHtml;                                                                                         // 4780
    }                                                                                                                  // 4781
                                                                                                                       // 4782
    while (element.firstChild) {                                                                                       // 4783
      firstChild  = element.firstChild;                                                                                // 4784
      element.removeChild(firstChild);                                                                                 // 4785
      newNode = _convert(firstChild, cleanUp);                                                                         // 4786
      if (newNode) {                                                                                                   // 4787
        fragment.appendChild(newNode);                                                                                 // 4788
      }                                                                                                                // 4789
    }                                                                                                                  // 4790
                                                                                                                       // 4791
    // Clear element contents                                                                                          // 4792
    element.innerHTML = "";                                                                                            // 4793
                                                                                                                       // 4794
    // Insert new DOM tree                                                                                             // 4795
    element.appendChild(fragment);                                                                                     // 4796
                                                                                                                       // 4797
    return isString ? wysihtml5.quirks.getCorrectInnerHTML(element) : element;                                         // 4798
  }                                                                                                                    // 4799
                                                                                                                       // 4800
  function _convert(oldNode, cleanUp) {                                                                                // 4801
    var oldNodeType     = oldNode.nodeType,                                                                            // 4802
        oldChilds       = oldNode.childNodes,                                                                          // 4803
        oldChildsLength = oldChilds.length,                                                                            // 4804
        newNode,                                                                                                       // 4805
        method          = NODE_TYPE_MAPPING[oldNodeType],                                                              // 4806
        i               = 0;                                                                                           // 4807
                                                                                                                       // 4808
    newNode = method && method(oldNode);                                                                               // 4809
                                                                                                                       // 4810
    if (!newNode) {                                                                                                    // 4811
      return null;                                                                                                     // 4812
    }                                                                                                                  // 4813
                                                                                                                       // 4814
    for (i=0; i<oldChildsLength; i++) {                                                                                // 4815
      newChild = _convert(oldChilds[i], cleanUp);                                                                      // 4816
      if (newChild) {                                                                                                  // 4817
        newNode.appendChild(newChild);                                                                                 // 4818
      }                                                                                                                // 4819
    }                                                                                                                  // 4820
                                                                                                                       // 4821
    // Cleanup senseless <span> elements                                                                               // 4822
    if (cleanUp &&                                                                                                     // 4823
        newNode.childNodes.length <= 1 &&                                                                              // 4824
        newNode.nodeName.toLowerCase() === DEFAULT_NODE_NAME &&                                                        // 4825
        !newNode.attributes.length) {                                                                                  // 4826
      return newNode.firstChild;                                                                                       // 4827
    }                                                                                                                  // 4828
                                                                                                                       // 4829
    return newNode;                                                                                                    // 4830
  }                                                                                                                    // 4831
                                                                                                                       // 4832
  function _handleElement(oldNode) {                                                                                   // 4833
    var rule,                                                                                                          // 4834
        newNode,                                                                                                       // 4835
        endTag,                                                                                                        // 4836
        tagRules    = currentRules.tags,                                                                               // 4837
        nodeName    = oldNode.nodeName.toLowerCase(),                                                                  // 4838
        scopeName   = oldNode.scopeName;                                                                               // 4839
                                                                                                                       // 4840
    /**                                                                                                                // 4841
     * We already parsed that element                                                                                  // 4842
     * ignore it! (yes, this sometimes happens in IE8 when the html is invalid)                                        // 4843
     */                                                                                                                // 4844
    if (oldNode._wysihtml5) {                                                                                          // 4845
      return null;                                                                                                     // 4846
    }                                                                                                                  // 4847
    oldNode._wysihtml5 = 1;                                                                                            // 4848
                                                                                                                       // 4849
    if (oldNode.className === "wysihtml5-temp") {                                                                      // 4850
      return null;                                                                                                     // 4851
    }                                                                                                                  // 4852
                                                                                                                       // 4853
    /**                                                                                                                // 4854
     * IE is the only browser who doesn't include the namespace in the                                                 // 4855
     * nodeName, that's why we have to prepend it by ourselves                                                         // 4856
     * scopeName is a proprietary IE feature                                                                           // 4857
     * read more here http://msdn.microsoft.com/en-us/library/ms534388(v=vs.85).aspx                                   // 4858
     */                                                                                                                // 4859
    if (scopeName && scopeName != "HTML") {                                                                            // 4860
      nodeName = scopeName + ":" + nodeName;                                                                           // 4861
    }                                                                                                                  // 4862
                                                                                                                       // 4863
    /**                                                                                                                // 4864
     * Repair node                                                                                                     // 4865
     * IE is a bit bitchy when it comes to invalid nested markup which includes unclosed tags                          // 4866
     * A <p> doesn't need to be closed according HTML4-5 spec, we simply replace it with a <div> to preserve its content and layout
     */                                                                                                                // 4868
    if ("outerHTML" in oldNode) {                                                                                      // 4869
      if (!wysihtml5.browser.autoClosesUnclosedTags() &&                                                               // 4870
          oldNode.nodeName === "P" &&                                                                                  // 4871
          oldNode.outerHTML.slice(-4).toLowerCase() !== "</p>") {                                                      // 4872
        nodeName = "div";                                                                                              // 4873
      }                                                                                                                // 4874
    }                                                                                                                  // 4875
                                                                                                                       // 4876
    if (nodeName in tagRules) {                                                                                        // 4877
      rule = tagRules[nodeName];                                                                                       // 4878
      if (!rule || rule.remove) {                                                                                      // 4879
        return null;                                                                                                   // 4880
      }                                                                                                                // 4881
                                                                                                                       // 4882
      rule = typeof(rule) === "string" ? { rename_tag: rule } : rule;                                                  // 4883
    } else if (oldNode.firstChild) {                                                                                   // 4884
      rule = { rename_tag: DEFAULT_NODE_NAME };                                                                        // 4885
    } else {                                                                                                           // 4886
      // Remove empty unknown elements                                                                                 // 4887
      return null;                                                                                                     // 4888
    }                                                                                                                  // 4889
                                                                                                                       // 4890
    newNode = oldNode.ownerDocument.createElement(rule.rename_tag || nodeName);                                        // 4891
    _handleAttributes(oldNode, newNode, rule);                                                                         // 4892
                                                                                                                       // 4893
    oldNode = null;                                                                                                    // 4894
    return newNode;                                                                                                    // 4895
  }                                                                                                                    // 4896
                                                                                                                       // 4897
  function _handleAttributes(oldNode, newNode, rule) {                                                                 // 4898
    var attributes          = {},                         // fresh new set of attributes to set on newNode             // 4899
        setClass            = rule.set_class,             // classes to set                                            // 4900
        addClass            = rule.add_class,             // add classes based on existing attributes                  // 4901
        setAttributes       = rule.set_attributes,        // attributes to set on the current node                     // 4902
        checkAttributes     = rule.check_attributes,      // check/convert values of attributes                        // 4903
        allowedClasses      = currentRules.classes,                                                                    // 4904
        i                   = 0,                                                                                       // 4905
        classes             = [],                                                                                      // 4906
        newClasses          = [],                                                                                      // 4907
        newUniqueClasses    = [],                                                                                      // 4908
        oldClasses          = [],                                                                                      // 4909
        classesLength,                                                                                                 // 4910
        newClassesLength,                                                                                              // 4911
        currentClass,                                                                                                  // 4912
        newClass,                                                                                                      // 4913
        attributeName,                                                                                                 // 4914
        newAttributeValue,                                                                                             // 4915
        method;                                                                                                        // 4916
                                                                                                                       // 4917
    if (setAttributes) {                                                                                               // 4918
      attributes = wysihtml5.lang.object(setAttributes).clone();                                                       // 4919
    }                                                                                                                  // 4920
                                                                                                                       // 4921
    if (checkAttributes) {                                                                                             // 4922
      for (attributeName in checkAttributes) {                                                                         // 4923
        method = attributeCheckMethods[checkAttributes[attributeName]];                                                // 4924
        if (!method) {                                                                                                 // 4925
          continue;                                                                                                    // 4926
        }                                                                                                              // 4927
        newAttributeValue = method(_getAttribute(oldNode, attributeName));                                             // 4928
        if (typeof(newAttributeValue) === "string") {                                                                  // 4929
          attributes[attributeName] = newAttributeValue;                                                               // 4930
        }                                                                                                              // 4931
      }                                                                                                                // 4932
    }                                                                                                                  // 4933
                                                                                                                       // 4934
    if (setClass) {                                                                                                    // 4935
      classes.push(setClass);                                                                                          // 4936
    }                                                                                                                  // 4937
                                                                                                                       // 4938
    if (addClass) {                                                                                                    // 4939
      for (attributeName in addClass) {                                                                                // 4940
        method = addClassMethods[addClass[attributeName]];                                                             // 4941
        if (!method) {                                                                                                 // 4942
          continue;                                                                                                    // 4943
        }                                                                                                              // 4944
        newClass = method(_getAttribute(oldNode, attributeName));                                                      // 4945
        if (typeof(newClass) === "string") {                                                                           // 4946
          classes.push(newClass);                                                                                      // 4947
        }                                                                                                              // 4948
      }                                                                                                                // 4949
    }                                                                                                                  // 4950
                                                                                                                       // 4951
    // make sure that wysihtml5 temp class doesn't get stripped out                                                    // 4952
    allowedClasses["_wysihtml5-temp-placeholder"] = 1;                                                                 // 4953
                                                                                                                       // 4954
    // add old classes last                                                                                            // 4955
    oldClasses = oldNode.getAttribute("class");                                                                        // 4956
    if (oldClasses) {                                                                                                  // 4957
      classes = classes.concat(oldClasses.split(WHITE_SPACE_REG_EXP));                                                 // 4958
    }                                                                                                                  // 4959
    classesLength = classes.length;                                                                                    // 4960
    for (; i<classesLength; i++) {                                                                                     // 4961
      currentClass = classes[i];                                                                                       // 4962
      if (allowedClasses[currentClass]) {                                                                              // 4963
        newClasses.push(currentClass);                                                                                 // 4964
      }                                                                                                                // 4965
    }                                                                                                                  // 4966
                                                                                                                       // 4967
    // remove duplicate entries and preserve class specificity                                                         // 4968
    newClassesLength = newClasses.length;                                                                              // 4969
    while (newClassesLength--) {                                                                                       // 4970
      currentClass = newClasses[newClassesLength];                                                                     // 4971
      if (!wysihtml5.lang.array(newUniqueClasses).contains(currentClass)) {                                            // 4972
        newUniqueClasses.unshift(currentClass);                                                                        // 4973
      }                                                                                                                // 4974
    }                                                                                                                  // 4975
                                                                                                                       // 4976
    if (newUniqueClasses.length) {                                                                                     // 4977
      attributes["class"] = newUniqueClasses.join(" ");                                                                // 4978
    }                                                                                                                  // 4979
                                                                                                                       // 4980
    // set attributes on newNode                                                                                       // 4981
    for (attributeName in attributes) {                                                                                // 4982
      // Setting attributes can cause a js error in IE under certain circumstances                                     // 4983
      // eg. on a <img> under https when it's new attribute value is non-https                                         // 4984
      // TODO: Investigate this further and check for smarter handling                                                 // 4985
      try {                                                                                                            // 4986
        newNode.setAttribute(attributeName, attributes[attributeName]);                                                // 4987
      } catch(e) {}                                                                                                    // 4988
    }                                                                                                                  // 4989
                                                                                                                       // 4990
    // IE8 sometimes loses the width/height attributes when those are set before the "src"                             // 4991
    // so we make sure to set them again                                                                               // 4992
    if (attributes.src) {                                                                                              // 4993
      if (typeof(attributes.width) !== "undefined") {                                                                  // 4994
        newNode.setAttribute("width", attributes.width);                                                               // 4995
      }                                                                                                                // 4996
      if (typeof(attributes.height) !== "undefined") {                                                                 // 4997
        newNode.setAttribute("height", attributes.height);                                                             // 4998
      }                                                                                                                // 4999
    }                                                                                                                  // 5000
  }                                                                                                                    // 5001
                                                                                                                       // 5002
  /**                                                                                                                  // 5003
   * IE gives wrong results for hasAttribute/getAttribute, for example:                                                // 5004
   *    var td = document.createElement("td");                                                                         // 5005
   *    td.getAttribute("rowspan"); // => "1" in IE                                                                    // 5006
   *                                                                                                                   // 5007
   * Therefore we have to check the element's outerHTML for the attribute                                              // 5008
   */                                                                                                                  // 5009
  var HAS_GET_ATTRIBUTE_BUG = !wysihtml5.browser.supportsGetAttributeCorrectly();                                      // 5010
  function _getAttribute(node, attributeName) {                                                                        // 5011
    attributeName = attributeName.toLowerCase();                                                                       // 5012
    var nodeName = node.nodeName;                                                                                      // 5013
    if (nodeName == "IMG" && attributeName == "src" && _isLoadedImage(node) === true) {                                // 5014
      // Get 'src' attribute value via object property since this will always contain the                              // 5015
      // full absolute url (http://...)                                                                                // 5016
      // this fixes a very annoying bug in firefox (ver 3.6 & 4) and IE 8 where images copied from the same host       // 5017
      // will have relative paths, which the sanitizer strips out (see attributeCheckMethods.url)                      // 5018
      return node.src;                                                                                                 // 5019
    } else if (HAS_GET_ATTRIBUTE_BUG && "outerHTML" in node) {                                                         // 5020
      // Don't trust getAttribute/hasAttribute in IE 6-8, instead check the element's outerHTML                        // 5021
      var outerHTML      = node.outerHTML.toLowerCase(),                                                               // 5022
          // TODO: This might not work for attributes without value: <input disabled>                                  // 5023
          hasAttribute   = outerHTML.indexOf(" " + attributeName +  "=") != -1;                                        // 5024
                                                                                                                       // 5025
      return hasAttribute ? node.getAttribute(attributeName) : null;                                                   // 5026
    } else{                                                                                                            // 5027
      return node.getAttribute(attributeName);                                                                         // 5028
    }                                                                                                                  // 5029
  }                                                                                                                    // 5030
                                                                                                                       // 5031
  /**                                                                                                                  // 5032
   * Check whether the given node is a proper loaded image                                                             // 5033
   * FIXME: Returns undefined when unknown (Chrome, Safari)                                                            // 5034
   */                                                                                                                  // 5035
  function _isLoadedImage(node) {                                                                                      // 5036
    try {                                                                                                              // 5037
      return node.complete && !node.mozMatchesSelector(":-moz-broken");                                                // 5038
    } catch(e) {                                                                                                       // 5039
      if (node.complete && node.readyState === "complete") {                                                           // 5040
        return true;                                                                                                   // 5041
      }                                                                                                                // 5042
    }                                                                                                                  // 5043
  }                                                                                                                    // 5044
                                                                                                                       // 5045
  function _handleText(oldNode) {                                                                                      // 5046
    return oldNode.ownerDocument.createTextNode(oldNode.data);                                                         // 5047
  }                                                                                                                    // 5048
                                                                                                                       // 5049
                                                                                                                       // 5050
  // ------------ attribute checks ------------ \\
  var attributeCheckMethods = {                                                                                        // 5052
    url: (function() {                                                                                                 // 5053
      var REG_EXP = /^https?:\/\//i;                                                                                   // 5054
      return function(attributeValue) {                                                                                // 5055
        if (!attributeValue || !attributeValue.match(REG_EXP)) {                                                       // 5056
          return null;                                                                                                 // 5057
        }                                                                                                              // 5058
        return attributeValue.replace(REG_EXP, function(match) {                                                       // 5059
          return match.toLowerCase();                                                                                  // 5060
        });                                                                                                            // 5061
      };                                                                                                               // 5062
    })(),                                                                                                              // 5063
                                                                                                                       // 5064
    alt: (function() {                                                                                                 // 5065
      var REG_EXP = /[^ a-z0-9_\-]/gi;                                                                                 // 5066
      return function(attributeValue) {                                                                                // 5067
        if (!attributeValue) {                                                                                         // 5068
          return "";                                                                                                   // 5069
        }                                                                                                              // 5070
        return attributeValue.replace(REG_EXP, "");                                                                    // 5071
      };                                                                                                               // 5072
    })(),                                                                                                              // 5073
                                                                                                                       // 5074
    numbers: (function() {                                                                                             // 5075
      var REG_EXP = /\D/g;                                                                                             // 5076
      return function(attributeValue) {                                                                                // 5077
        attributeValue = (attributeValue || "").replace(REG_EXP, "");                                                  // 5078
        return attributeValue || null;                                                                                 // 5079
      };                                                                                                               // 5080
    })()                                                                                                               // 5081
  };                                                                                                                   // 5082
                                                                                                                       // 5083
  // ------------ class converter (converts an html attribute to a class name) ------------ \\
  var addClassMethods = {                                                                                              // 5085
    align_img: (function() {                                                                                           // 5086
      var mapping = {                                                                                                  // 5087
        left:   "wysiwyg-float-left",                                                                                  // 5088
        right:  "wysiwyg-float-right"                                                                                  // 5089
      };                                                                                                               // 5090
      return function(attributeValue) {                                                                                // 5091
        return mapping[String(attributeValue).toLowerCase()];                                                          // 5092
      };                                                                                                               // 5093
    })(),                                                                                                              // 5094
                                                                                                                       // 5095
    align_text: (function() {                                                                                          // 5096
      var mapping = {                                                                                                  // 5097
        left:     "wysiwyg-text-align-left",                                                                           // 5098
        right:    "wysiwyg-text-align-right",                                                                          // 5099
        center:   "wysiwyg-text-align-center",                                                                         // 5100
        justify:  "wysiwyg-text-align-justify"                                                                         // 5101
      };                                                                                                               // 5102
      return function(attributeValue) {                                                                                // 5103
        return mapping[String(attributeValue).toLowerCase()];                                                          // 5104
      };                                                                                                               // 5105
    })(),                                                                                                              // 5106
                                                                                                                       // 5107
    clear_br: (function() {                                                                                            // 5108
      var mapping = {                                                                                                  // 5109
        left:   "wysiwyg-clear-left",                                                                                  // 5110
        right:  "wysiwyg-clear-right",                                                                                 // 5111
        both:   "wysiwyg-clear-both",                                                                                  // 5112
        all:    "wysiwyg-clear-both"                                                                                   // 5113
      };                                                                                                               // 5114
      return function(attributeValue) {                                                                                // 5115
        return mapping[String(attributeValue).toLowerCase()];                                                          // 5116
      };                                                                                                               // 5117
    })(),                                                                                                              // 5118
                                                                                                                       // 5119
    size_font: (function() {                                                                                           // 5120
      var mapping = {                                                                                                  // 5121
        "1": "wysiwyg-font-size-xx-small",                                                                             // 5122
        "2": "wysiwyg-font-size-small",                                                                                // 5123
        "3": "wysiwyg-font-size-medium",                                                                               // 5124
        "4": "wysiwyg-font-size-large",                                                                                // 5125
        "5": "wysiwyg-font-size-x-large",                                                                              // 5126
        "6": "wysiwyg-font-size-xx-large",                                                                             // 5127
        "7": "wysiwyg-font-size-xx-large",                                                                             // 5128
        "-": "wysiwyg-font-size-smaller",                                                                              // 5129
        "+": "wysiwyg-font-size-larger"                                                                                // 5130
      };                                                                                                               // 5131
      return function(attributeValue) {                                                                                // 5132
        return mapping[String(attributeValue).charAt(0)];                                                              // 5133
      };                                                                                                               // 5134
    })()                                                                                                               // 5135
  };                                                                                                                   // 5136
                                                                                                                       // 5137
  return parse;                                                                                                        // 5138
})();/**                                                                                                               // 5139
 * Checks for empty text node childs and removes them                                                                  // 5140
 *                                                                                                                     // 5141
 * @param {Element} node The element in which to cleanup                                                               // 5142
 * @example                                                                                                            // 5143
 *    wysihtml5.dom.removeEmptyTextNodes(element);                                                                     // 5144
 */                                                                                                                    // 5145
wysihtml5.dom.removeEmptyTextNodes = function(node) {                                                                  // 5146
  var childNode,                                                                                                       // 5147
      childNodes        = wysihtml5.lang.array(node.childNodes).get(),                                                 // 5148
      childNodesLength  = childNodes.length,                                                                           // 5149
      i                 = 0;                                                                                           // 5150
  for (; i<childNodesLength; i++) {                                                                                    // 5151
    childNode = childNodes[i];                                                                                         // 5152
    if (childNode.nodeType === wysihtml5.TEXT_NODE && childNode.data === "") {                                         // 5153
      childNode.parentNode.removeChild(childNode);                                                                     // 5154
    }                                                                                                                  // 5155
  }                                                                                                                    // 5156
};                                                                                                                     // 5157
/**                                                                                                                    // 5158
 * Renames an element (eg. a <div> to a <p>) and keeps its childs                                                      // 5159
 *                                                                                                                     // 5160
 * @param {Element} element The list element which should be renamed                                                   // 5161
 * @param {Element} newNodeName The desired tag name                                                                   // 5162
 *                                                                                                                     // 5163
 * @example                                                                                                            // 5164
 *    <!-- Assume the following dom: -->                                                                               // 5165
 *    <ul id="list">                                                                                                   // 5166
 *      <li>eminem</li>                                                                                                // 5167
 *      <li>dr. dre</li>                                                                                               // 5168
 *      <li>50 Cent</li>                                                                                               // 5169
 *    </ul>                                                                                                            // 5170
 *                                                                                                                     // 5171
 *    <script>                                                                                                         // 5172
 *      wysihtml5.dom.renameElement(document.getElementById("list"), "ol");                                            // 5173
 *    </script>                                                                                                        // 5174
 *                                                                                                                     // 5175
 *    <!-- Will result in: -->                                                                                         // 5176
 *    <ol>                                                                                                             // 5177
 *      <li>eminem</li>                                                                                                // 5178
 *      <li>dr. dre</li>                                                                                               // 5179
 *      <li>50 Cent</li>                                                                                               // 5180
 *    </ol>                                                                                                            // 5181
 */                                                                                                                    // 5182
wysihtml5.dom.renameElement = function(element, newNodeName) {                                                         // 5183
  var newElement = element.ownerDocument.createElement(newNodeName),                                                   // 5184
      firstChild;                                                                                                      // 5185
  while (firstChild = element.firstChild) {                                                                            // 5186
    newElement.appendChild(firstChild);                                                                                // 5187
  }                                                                                                                    // 5188
  wysihtml5.dom.copyAttributes(["align", "className"]).from(element).to(newElement);                                   // 5189
  element.parentNode.replaceChild(newElement, element);                                                                // 5190
  return newElement;                                                                                                   // 5191
};/**                                                                                                                  // 5192
 * Takes an element, removes it and replaces it with it's childs                                                       // 5193
 *                                                                                                                     // 5194
 * @param {Object} node The node which to replace with it's child nodes                                                // 5195
 * @example                                                                                                            // 5196
 *    <div id="foo">                                                                                                   // 5197
 *      <span>hello</span>                                                                                             // 5198
 *    </div>                                                                                                           // 5199
 *    <script>                                                                                                         // 5200
 *      // Remove #foo and replace with it's children                                                                  // 5201
 *      wysihtml5.dom.replaceWithChildNodes(document.getElementById("foo"));                                           // 5202
 *    </script>                                                                                                        // 5203
 */                                                                                                                    // 5204
wysihtml5.dom.replaceWithChildNodes = function(node) {                                                                 // 5205
  if (!node.parentNode) {                                                                                              // 5206
    return;                                                                                                            // 5207
  }                                                                                                                    // 5208
                                                                                                                       // 5209
  if (!node.firstChild) {                                                                                              // 5210
    node.parentNode.removeChild(node);                                                                                 // 5211
    return;                                                                                                            // 5212
  }                                                                                                                    // 5213
                                                                                                                       // 5214
  var fragment = node.ownerDocument.createDocumentFragment();                                                          // 5215
  while (node.firstChild) {                                                                                            // 5216
    fragment.appendChild(node.firstChild);                                                                             // 5217
  }                                                                                                                    // 5218
  node.parentNode.replaceChild(fragment, node);                                                                        // 5219
  node = fragment = null;                                                                                              // 5220
};                                                                                                                     // 5221
/**                                                                                                                    // 5222
 * Unwraps an unordered/ordered list                                                                                   // 5223
 *                                                                                                                     // 5224
 * @param {Element} element The list element which should be unwrapped                                                 // 5225
 *                                                                                                                     // 5226
 * @example                                                                                                            // 5227
 *    <!-- Assume the following dom: -->                                                                               // 5228
 *    <ul id="list">                                                                                                   // 5229
 *      <li>eminem</li>                                                                                                // 5230
 *      <li>dr. dre</li>                                                                                               // 5231
 *      <li>50 Cent</li>                                                                                               // 5232
 *    </ul>                                                                                                            // 5233
 *                                                                                                                     // 5234
 *    <script>                                                                                                         // 5235
 *      wysihtml5.dom.resolveList(document.getElementById("list"));                                                    // 5236
 *    </script>                                                                                                        // 5237
 *                                                                                                                     // 5238
 *    <!-- Will result in: -->                                                                                         // 5239
 *    eminem<br>                                                                                                       // 5240
 *    dr. dre<br>                                                                                                      // 5241
 *    50 Cent<br>                                                                                                      // 5242
 */                                                                                                                    // 5243
(function(dom) {                                                                                                       // 5244
  function _isBlockElement(node) {                                                                                     // 5245
    return dom.getStyle("display").from(node) === "block";                                                             // 5246
  }                                                                                                                    // 5247
                                                                                                                       // 5248
  function _isLineBreak(node) {                                                                                        // 5249
    return node.nodeName === "BR";                                                                                     // 5250
  }                                                                                                                    // 5251
                                                                                                                       // 5252
  function _appendLineBreak(element) {                                                                                 // 5253
    var lineBreak = element.ownerDocument.createElement("br");                                                         // 5254
    element.appendChild(lineBreak);                                                                                    // 5255
  }                                                                                                                    // 5256
                                                                                                                       // 5257
  function resolveList(list) {                                                                                         // 5258
    if (list.nodeName !== "MENU" && list.nodeName !== "UL" && list.nodeName !== "OL") {                                // 5259
      return;                                                                                                          // 5260
    }                                                                                                                  // 5261
                                                                                                                       // 5262
    var doc             = list.ownerDocument,                                                                          // 5263
        fragment        = doc.createDocumentFragment(),                                                                // 5264
        previousSibling = list.previousElementSibling || list.previousSibling,                                         // 5265
        firstChild,                                                                                                    // 5266
        lastChild,                                                                                                     // 5267
        isLastChild,                                                                                                   // 5268
        shouldAppendLineBreak,                                                                                         // 5269
        listItem;                                                                                                      // 5270
                                                                                                                       // 5271
    if (previousSibling && !_isBlockElement(previousSibling)) {                                                        // 5272
      _appendLineBreak(fragment);                                                                                      // 5273
    }                                                                                                                  // 5274
                                                                                                                       // 5275
    while (listItem = list.firstChild) {                                                                               // 5276
      lastChild = listItem.lastChild;                                                                                  // 5277
      while (firstChild = listItem.firstChild) {                                                                       // 5278
        isLastChild           = firstChild === lastChild;                                                              // 5279
        // This needs to be done before appending it to the fragment, as it otherwise will loose style information     // 5280
        shouldAppendLineBreak = isLastChild && !_isBlockElement(firstChild) && !_isLineBreak(firstChild);              // 5281
        fragment.appendChild(firstChild);                                                                              // 5282
        if (shouldAppendLineBreak) {                                                                                   // 5283
          _appendLineBreak(fragment);                                                                                  // 5284
        }                                                                                                              // 5285
      }                                                                                                                // 5286
                                                                                                                       // 5287
      listItem.parentNode.removeChild(listItem);                                                                       // 5288
    }                                                                                                                  // 5289
    list.parentNode.replaceChild(fragment, list);                                                                      // 5290
  }                                                                                                                    // 5291
                                                                                                                       // 5292
  dom.resolveList = resolveList;                                                                                       // 5293
})(wysihtml5.dom);/**                                                                                                  // 5294
 * Sandbox for executing javascript, parsing css styles and doing dom operations in a secure way                       // 5295
 *                                                                                                                     // 5296
 * Browser Compatibility:                                                                                              // 5297
 *  - Secure in MSIE 6+, but only when the user hasn't made changes to his security level "restricted"                 // 5298
 *  - Partially secure in other browsers (Firefox, Opera, Safari, Chrome, ...)                                         // 5299
 *                                                                                                                     // 5300
 * Please note that this class can't benefit from the HTML5 sandbox attribute for the following reasons:               // 5301
 *    - sandboxing doesn't work correctly with inlined content (src="javascript:'<html>...</html>'")                   // 5302
 *    - sandboxing of physical documents causes that the dom isn't accessible anymore from the outside (iframe.contentWindow, ...)
 *    - setting the "allow-same-origin" flag would fix that, but then still javascript and dom events refuse to fire   // 5304
 *    - therefore the "allow-scripts" flag is needed, which then would deactivate any security, as the js executed inside the iframe
 *      can do anything as if the sandbox attribute wasn't set                                                         // 5306
 *                                                                                                                     // 5307
 * @param {Function} [readyCallback] Method that gets invoked when the sandbox is ready                                // 5308
 * @param {Object} [config] Optional parameters                                                                        // 5309
 *                                                                                                                     // 5310
 * @example                                                                                                            // 5311
 *    new wysihtml5.dom.Sandbox(function(sandbox) {                                                                    // 5312
 *      sandbox.getWindow().document.body.innerHTML = '<img src=foo.gif onerror="alert(document.cookie)">';            // 5313
 *    });                                                                                                              // 5314
 */                                                                                                                    // 5315
(function(wysihtml5) {                                                                                                 // 5316
  var /**                                                                                                              // 5317
       * Default configuration                                                                                         // 5318
       */                                                                                                              // 5319
      doc                 = document,                                                                                  // 5320
      /**                                                                                                              // 5321
       * Properties to unset/protect on the window object                                                              // 5322
       */                                                                                                              // 5323
      windowProperties    = [                                                                                          // 5324
        "parent", "top", "opener", "frameElement", "frames",                                                           // 5325
        "localStorage", "globalStorage", "sessionStorage", "indexedDB"                                                 // 5326
      ],                                                                                                               // 5327
      /**                                                                                                              // 5328
       * Properties on the window object which are set to an empty function                                            // 5329
       */                                                                                                              // 5330
      windowProperties2   = [                                                                                          // 5331
        "open", "close", "openDialog", "showModalDialog",                                                              // 5332
        "alert", "confirm", "prompt",                                                                                  // 5333
        "openDatabase", "postMessage",                                                                                 // 5334
        "XMLHttpRequest", "XDomainRequest"                                                                             // 5335
      ],                                                                                                               // 5336
      /**                                                                                                              // 5337
       * Properties to unset/protect on the document object                                                            // 5338
       */                                                                                                              // 5339
      documentProperties  = [                                                                                          // 5340
        "referrer",                                                                                                    // 5341
        "write", "open", "close"                                                                                       // 5342
      ];                                                                                                               // 5343
                                                                                                                       // 5344
  wysihtml5.dom.Sandbox = Base.extend(                                                                                 // 5345
    /** @scope wysihtml5.dom.Sandbox.prototype */ {                                                                    // 5346
                                                                                                                       // 5347
    constructor: function(readyCallback, config) {                                                                     // 5348
      this.callback = readyCallback || wysihtml5.EMPTY_FUNCTION;                                                       // 5349
      this.config   = wysihtml5.lang.object({}).merge(config).get();                                                   // 5350
      this.iframe   = this._createIframe();                                                                            // 5351
    },                                                                                                                 // 5352
                                                                                                                       // 5353
    insertInto: function(element) {                                                                                    // 5354
      if (typeof(element) === "string") {                                                                              // 5355
        element = doc.getElementById(element);                                                                         // 5356
      }                                                                                                                // 5357
                                                                                                                       // 5358
      element.appendChild(this.iframe);                                                                                // 5359
    },                                                                                                                 // 5360
                                                                                                                       // 5361
    getIframe: function() {                                                                                            // 5362
      return this.iframe;                                                                                              // 5363
    },                                                                                                                 // 5364
                                                                                                                       // 5365
    getWindow: function() {                                                                                            // 5366
      this._readyError();                                                                                              // 5367
    },                                                                                                                 // 5368
                                                                                                                       // 5369
    getDocument: function() {                                                                                          // 5370
      this._readyError();                                                                                              // 5371
    },                                                                                                                 // 5372
                                                                                                                       // 5373
    destroy: function() {                                                                                              // 5374
      var iframe = this.getIframe();                                                                                   // 5375
      iframe.parentNode.removeChild(iframe);                                                                           // 5376
    },                                                                                                                 // 5377
                                                                                                                       // 5378
    _readyError: function() {                                                                                          // 5379
      throw new Error("wysihtml5.Sandbox: Sandbox iframe isn't loaded yet");                                           // 5380
    },                                                                                                                 // 5381
                                                                                                                       // 5382
    /**                                                                                                                // 5383
     * Creates the sandbox iframe                                                                                      // 5384
     *                                                                                                                 // 5385
     * Some important notes:                                                                                           // 5386
     *  - We can't use HTML5 sandbox for now:                                                                          // 5387
     *    setting it causes that the iframe's dom can't be accessed from the outside                                   // 5388
     *    Therefore we need to set the "allow-same-origin" flag which enables accessing the iframe's dom               // 5389
     *    But then there's another problem, DOM events (focus, blur, change, keypress, ...) aren't fired.              // 5390
     *    In order to make this happen we need to set the "allow-scripts" flag.                                        // 5391
     *    A combination of allow-scripts and allow-same-origin is almost the same as setting no sandbox attribute at all.
     *  - Chrome & Safari, doesn't seem to support sandboxing correctly when the iframe's html is inlined (no physical document)
     *  - IE needs to have the security="restricted" attribute set before the iframe is                                // 5394
     *    inserted into the dom tree                                                                                   // 5395
     *  - Believe it or not but in IE "security" in document.createElement("iframe") is false, even                    // 5396
     *    though it supports it                                                                                        // 5397
     *  - When an iframe has security="restricted", in IE eval() & execScript() don't work anymore                     // 5398
     *  - IE doesn't fire the onload event when the content is inlined in the src attribute, therefore we rely         // 5399
     *    on the onreadystatechange event                                                                              // 5400
     */                                                                                                                // 5401
    _createIframe: function() {                                                                                        // 5402
      var that   = this,                                                                                               // 5403
          iframe = doc.createElement("iframe");                                                                        // 5404
      iframe.className = "wysihtml5-sandbox";                                                                          // 5405
      wysihtml5.dom.setAttributes({                                                                                    // 5406
        "security":           "restricted",                                                                            // 5407
        "allowtransparency":  "true",                                                                                  // 5408
        "frameborder":        0,                                                                                       // 5409
        "width":              0,                                                                                       // 5410
        "height":             0,                                                                                       // 5411
        "marginwidth":        0,                                                                                       // 5412
        "marginheight":       0                                                                                        // 5413
      }).on(iframe);                                                                                                   // 5414
                                                                                                                       // 5415
      // Setting the src like this prevents ssl warnings in IE6                                                        // 5416
      if (wysihtml5.browser.throwsMixedContentWarningWhenIframeSrcIsEmpty()) {                                         // 5417
        iframe.src = "javascript:'<html></html>'";                                                                     // 5418
      }                                                                                                                // 5419
                                                                                                                       // 5420
      iframe.onload = function() {                                                                                     // 5421
        iframe.onreadystatechange = iframe.onload = null;                                                              // 5422
        that._onLoadIframe(iframe);                                                                                    // 5423
      };                                                                                                               // 5424
                                                                                                                       // 5425
      iframe.onreadystatechange = function() {                                                                         // 5426
        if (/loaded|complete/.test(iframe.readyState)) {                                                               // 5427
          iframe.onreadystatechange = iframe.onload = null;                                                            // 5428
          that._onLoadIframe(iframe);                                                                                  // 5429
        }                                                                                                              // 5430
      };                                                                                                               // 5431
                                                                                                                       // 5432
      return iframe;                                                                                                   // 5433
    },                                                                                                                 // 5434
                                                                                                                       // 5435
    /**                                                                                                                // 5436
     * Callback for when the iframe has finished loading                                                               // 5437
     */                                                                                                                // 5438
    _onLoadIframe: function(iframe) {                                                                                  // 5439
      // don't resume when the iframe got unloaded (eg. by removing it from the dom)                                   // 5440
      if (!wysihtml5.dom.contains(doc.documentElement, iframe)) {                                                      // 5441
        return;                                                                                                        // 5442
      }                                                                                                                // 5443
                                                                                                                       // 5444
      var that           = this,                                                                                       // 5445
          iframeWindow   = iframe.contentWindow,                                                                       // 5446
          iframeDocument = iframe.contentWindow.document,                                                              // 5447
          charset        = doc.characterSet || doc.charset || "utf-8",                                                 // 5448
          sandboxHtml    = this._getHtml({                                                                             // 5449
            charset:      charset,                                                                                     // 5450
            stylesheets:  this.config.stylesheets                                                                      // 5451
          });                                                                                                          // 5452
                                                                                                                       // 5453
      // Create the basic dom tree including proper DOCTYPE and charset                                                // 5454
      iframeDocument.open("text/html", "replace");                                                                     // 5455
      iframeDocument.write(sandboxHtml);                                                                               // 5456
      iframeDocument.close();                                                                                          // 5457
                                                                                                                       // 5458
      this.getWindow = function() { return iframe.contentWindow; };                                                    // 5459
      this.getDocument = function() { return iframe.contentWindow.document; };                                         // 5460
                                                                                                                       // 5461
      // Catch js errors and pass them to the parent's onerror event                                                   // 5462
      // addEventListener("error") doesn't work properly in some browsers                                              // 5463
      // TODO: apparently this doesn't work in IE9!                                                                    // 5464
      iframeWindow.onerror = function(errorMessage, fileName, lineNumber) {                                            // 5465
        throw new Error("wysihtml5.Sandbox: " + errorMessage, fileName, lineNumber);                                   // 5466
      };                                                                                                               // 5467
                                                                                                                       // 5468
      if (!wysihtml5.browser.supportsSandboxedIframes()) {                                                             // 5469
        // Unset a bunch of sensitive variables                                                                        // 5470
        // Please note: This isn't hack safe!                                                                          // 5471
        // It more or less just takes care of basic attacks and prevents accidental theft of sensitive information     // 5472
        // IE is secure though, which is the most important thing, since IE is the only browser, who                   // 5473
        // takes over scripts & styles into contentEditable elements when copied from external websites                // 5474
        // or applications (Microsoft Word, ...)                                                                       // 5475
        var i, length;                                                                                                 // 5476
        for (i=0, length=windowProperties.length; i<length; i++) {                                                     // 5477
          this._unset(iframeWindow, windowProperties[i]);                                                              // 5478
        }                                                                                                              // 5479
        for (i=0, length=windowProperties2.length; i<length; i++) {                                                    // 5480
          this._unset(iframeWindow, windowProperties2[i], wysihtml5.EMPTY_FUNCTION);                                   // 5481
        }                                                                                                              // 5482
        for (i=0, length=documentProperties.length; i<length; i++) {                                                   // 5483
          this._unset(iframeDocument, documentProperties[i]);                                                          // 5484
        }                                                                                                              // 5485
        // This doesn't work in Safari 5                                                                               // 5486
        // See http://stackoverflow.com/questions/992461/is-it-possible-to-override-document-cookie-in-webkit          // 5487
        this._unset(iframeDocument, "cookie", "", true);                                                               // 5488
      }                                                                                                                // 5489
                                                                                                                       // 5490
      this.loaded = true;                                                                                              // 5491
                                                                                                                       // 5492
      // Trigger the callback                                                                                          // 5493
      setTimeout(function() { that.callback(that); }, 0);                                                              // 5494
    },                                                                                                                 // 5495
                                                                                                                       // 5496
    _getHtml: function(templateVars) {                                                                                 // 5497
      var stylesheets = templateVars.stylesheets,                                                                      // 5498
          html        = "",                                                                                            // 5499
          i           = 0,                                                                                             // 5500
          length;                                                                                                      // 5501
      stylesheets = typeof(stylesheets) === "string" ? [stylesheets] : stylesheets;                                    // 5502
      if (stylesheets) {                                                                                               // 5503
        length = stylesheets.length;                                                                                   // 5504
        for (; i<length; i++) {                                                                                        // 5505
          html += '<link rel="stylesheet" href="' + stylesheets[i] + '">';                                             // 5506
        }                                                                                                              // 5507
      }                                                                                                                // 5508
      templateVars.stylesheets = html;                                                                                 // 5509
                                                                                                                       // 5510
      return wysihtml5.lang.string(                                                                                    // 5511
        '<!DOCTYPE html><html><head>'                                                                                  // 5512
        + '<meta charset="#{charset}">#{stylesheets}</head>'                                                           // 5513
        + '<body></body></html>'                                                                                       // 5514
      ).interpolate(templateVars);                                                                                     // 5515
    },                                                                                                                 // 5516
                                                                                                                       // 5517
    /**                                                                                                                // 5518
     * Method to unset/override existing variables                                                                     // 5519
     * @example                                                                                                        // 5520
     *    // Make cookie unreadable and unwritable                                                                     // 5521
     *    this._unset(document, "cookie", "", true);                                                                   // 5522
     */                                                                                                                // 5523
    _unset: function(object, property, value, setter) {                                                                // 5524
      try { object[property] = value; } catch(e) {}                                                                    // 5525
                                                                                                                       // 5526
      try { object.__defineGetter__(property, function() { return value; }); } catch(e) {}                             // 5527
      if (setter) {                                                                                                    // 5528
        try { object.__defineSetter__(property, function() {}); } catch(e) {}                                          // 5529
      }                                                                                                                // 5530
                                                                                                                       // 5531
      if (!wysihtml5.browser.crashesWhenDefineProperty(property)) {                                                    // 5532
        try {                                                                                                          // 5533
          var config = {                                                                                               // 5534
            get: function() { return value; }                                                                          // 5535
          };                                                                                                           // 5536
          if (setter) {                                                                                                // 5537
            config.set = function() {};                                                                                // 5538
          }                                                                                                            // 5539
          Object.defineProperty(object, property, config);                                                             // 5540
        } catch(e) {}                                                                                                  // 5541
      }                                                                                                                // 5542
    }                                                                                                                  // 5543
  });                                                                                                                  // 5544
})(wysihtml5);                                                                                                         // 5545
(function() {                                                                                                          // 5546
  var mapping = {                                                                                                      // 5547
    "className": "class"                                                                                               // 5548
  };                                                                                                                   // 5549
  wysihtml5.dom.setAttributes = function(attributes) {                                                                 // 5550
    return {                                                                                                           // 5551
      on: function(element) {                                                                                          // 5552
        for (var i in attributes) {                                                                                    // 5553
          element.setAttribute(mapping[i] || i, attributes[i]);                                                        // 5554
        }                                                                                                              // 5555
      }                                                                                                                // 5556
    }                                                                                                                  // 5557
  };                                                                                                                   // 5558
})();wysihtml5.dom.setStyles = function(styles) {                                                                      // 5559
  return {                                                                                                             // 5560
    on: function(element) {                                                                                            // 5561
      var style = element.style;                                                                                       // 5562
      if (typeof(styles) === "string") {                                                                               // 5563
        style.cssText += ";" + styles;                                                                                 // 5564
        return;                                                                                                        // 5565
      }                                                                                                                // 5566
      for (var i in styles) {                                                                                          // 5567
        if (i === "float") {                                                                                           // 5568
          style.cssFloat = styles[i];                                                                                  // 5569
          style.styleFloat = styles[i];                                                                                // 5570
        } else {                                                                                                       // 5571
          style[i] = styles[i];                                                                                        // 5572
        }                                                                                                              // 5573
      }                                                                                                                // 5574
    }                                                                                                                  // 5575
  };                                                                                                                   // 5576
};/**                                                                                                                  // 5577
 * Simulate HTML5 placeholder attribute                                                                                // 5578
 *                                                                                                                     // 5579
 * Needed since                                                                                                        // 5580
 *    - div[contentEditable] elements don't support it                                                                 // 5581
 *    - older browsers (such as IE8 and Firefox 3.6) don't support it at all                                           // 5582
 *                                                                                                                     // 5583
 * @param {Object} parent Instance of main wysihtml5.Editor class                                                      // 5584
 * @param {Element} view Instance of wysihtml5.views.* class                                                           // 5585
 * @param {String} placeholderText                                                                                     // 5586
 *                                                                                                                     // 5587
 * @example                                                                                                            // 5588
 *    wysihtml.dom.simulatePlaceholder(this, composer, "Foobar");                                                      // 5589
 */                                                                                                                    // 5590
(function(dom) {                                                                                                       // 5591
  dom.simulatePlaceholder = function(editor, view, placeholderText) {                                                  // 5592
    var CLASS_NAME = "placeholder",                                                                                    // 5593
        unset = function() {                                                                                           // 5594
          if (view.hasPlaceholderSet()) {                                                                              // 5595
            view.clear();                                                                                              // 5596
          }                                                                                                            // 5597
          dom.removeClass(view.element, CLASS_NAME);                                                                   // 5598
        },                                                                                                             // 5599
        set = function() {                                                                                             // 5600
          if (view.isEmpty()) {                                                                                        // 5601
            view.setValue(placeholderText);                                                                            // 5602
            dom.addClass(view.element, CLASS_NAME);                                                                    // 5603
          }                                                                                                            // 5604
        };                                                                                                             // 5605
                                                                                                                       // 5606
    editor                                                                                                             // 5607
      .observe("set_placeholder", set)                                                                                 // 5608
      .observe("unset_placeholder", unset)                                                                             // 5609
      .observe("focus:composer", unset)                                                                                // 5610
      .observe("paste:composer", unset)                                                                                // 5611
      .observe("blur:composer", set);                                                                                  // 5612
                                                                                                                       // 5613
    set();                                                                                                             // 5614
  };                                                                                                                   // 5615
})(wysihtml5.dom);                                                                                                     // 5616
(function(dom) {                                                                                                       // 5617
  var documentElement = document.documentElement;                                                                      // 5618
  if ("textContent" in documentElement) {                                                                              // 5619
    dom.setTextContent = function(element, text) {                                                                     // 5620
      element.textContent = text;                                                                                      // 5621
    };                                                                                                                 // 5622
                                                                                                                       // 5623
    dom.getTextContent = function(element) {                                                                           // 5624
      return element.textContent;                                                                                      // 5625
    };                                                                                                                 // 5626
  } else if ("innerText" in documentElement) {                                                                         // 5627
    dom.setTextContent = function(element, text) {                                                                     // 5628
      element.innerText = text;                                                                                        // 5629
    };                                                                                                                 // 5630
                                                                                                                       // 5631
    dom.getTextContent = function(element) {                                                                           // 5632
      return element.innerText;                                                                                        // 5633
    };                                                                                                                 // 5634
  } else {                                                                                                             // 5635
    dom.setTextContent = function(element, text) {                                                                     // 5636
      element.nodeValue = text;                                                                                        // 5637
    };                                                                                                                 // 5638
                                                                                                                       // 5639
    dom.getTextContent = function(element) {                                                                           // 5640
      return element.nodeValue;                                                                                        // 5641
    };                                                                                                                 // 5642
  }                                                                                                                    // 5643
})(wysihtml5.dom);                                                                                                     // 5644
                                                                                                                       // 5645
/**                                                                                                                    // 5646
 * Fix most common html formatting misbehaviors of browsers implementation when inserting                              // 5647
 * content via copy & paste contentEditable                                                                            // 5648
 *                                                                                                                     // 5649
 * @author Christopher Blum                                                                                            // 5650
 */                                                                                                                    // 5651
wysihtml5.quirks.cleanPastedHTML = (function() {                                                                       // 5652
  // TODO: We probably need more rules here                                                                            // 5653
  var defaultRules = {                                                                                                 // 5654
    // When pasting underlined links <a> into a contentEditable, IE thinks, it has to insert <u> to keep the styling   // 5655
    "a u": wysihtml5.dom.replaceWithChildNodes                                                                         // 5656
  };                                                                                                                   // 5657
                                                                                                                       // 5658
  function cleanPastedHTML(elementOrHtml, rules, context) {                                                            // 5659
    rules   = rules || defaultRules;                                                                                   // 5660
    context = context || elementOrHtml.ownerDocument || document;                                                      // 5661
                                                                                                                       // 5662
    var element,                                                                                                       // 5663
        isString = typeof(elementOrHtml) === "string",                                                                 // 5664
        method,                                                                                                        // 5665
        matches,                                                                                                       // 5666
        matchesLength,                                                                                                 // 5667
        i,                                                                                                             // 5668
        j = 0;                                                                                                         // 5669
    if (isString) {                                                                                                    // 5670
      element = wysihtml5.dom.getAsDom(elementOrHtml, context);                                                        // 5671
    } else {                                                                                                           // 5672
      element = elementOrHtml;                                                                                         // 5673
    }                                                                                                                  // 5674
                                                                                                                       // 5675
    for (i in rules) {                                                                                                 // 5676
      matches       = element.querySelectorAll(i);                                                                     // 5677
      method        = rules[i];                                                                                        // 5678
      matchesLength = matches.length;                                                                                  // 5679
      for (; j<matchesLength; j++) {                                                                                   // 5680
        method(matches[j]);                                                                                            // 5681
      }                                                                                                                // 5682
    }                                                                                                                  // 5683
                                                                                                                       // 5684
    matches = elementOrHtml = rules = null;                                                                            // 5685
                                                                                                                       // 5686
    return isString ? element.innerHTML : element;                                                                     // 5687
  }                                                                                                                    // 5688
                                                                                                                       // 5689
  return cleanPastedHTML;                                                                                              // 5690
})();/**                                                                                                               // 5691
 * IE and Opera leave an empty paragraph in the contentEditable element after clearing it                              // 5692
 *                                                                                                                     // 5693
 * @param {Object} contentEditableElement The contentEditable element to observe for clearing events                   // 5694
 * @exaple                                                                                                             // 5695
 *    wysihtml5.quirks.ensureProperClearing(myContentEditableElement);                                                 // 5696
 */                                                                                                                    // 5697
(function(wysihtml5) {                                                                                                 // 5698
  var dom = wysihtml5.dom;                                                                                             // 5699
                                                                                                                       // 5700
  wysihtml5.quirks.ensureProperClearing = (function() {                                                                // 5701
    var clearIfNecessary = function(event) {                                                                           // 5702
      var element = this;                                                                                              // 5703
      setTimeout(function() {                                                                                          // 5704
        var innerHTML = element.innerHTML.toLowerCase();                                                               // 5705
        if (innerHTML == "<p>&nbsp;</p>" ||                                                                            // 5706
            innerHTML == "<p>&nbsp;</p><p>&nbsp;</p>") {                                                               // 5707
          element.innerHTML = "";                                                                                      // 5708
        }                                                                                                              // 5709
      }, 0);                                                                                                           // 5710
    };                                                                                                                 // 5711
                                                                                                                       // 5712
    return function(composer) {                                                                                        // 5713
      dom.observe(composer.element, ["cut", "keydown"], clearIfNecessary);                                             // 5714
    };                                                                                                                 // 5715
  })();                                                                                                                // 5716
                                                                                                                       // 5717
                                                                                                                       // 5718
                                                                                                                       // 5719
  /**                                                                                                                  // 5720
   * In Opera when the caret is in the first and only item of a list (<ul><li>|</li></ul>) and the list is the first child of the contentEditable element, it's impossible to delete the list by hitting backspace
   *                                                                                                                   // 5722
   * @param {Object} contentEditableElement The contentEditable element to observe for clearing events                 // 5723
   * @exaple                                                                                                           // 5724
   *    wysihtml5.quirks.ensureProperClearing(myContentEditableElement);                                               // 5725
   */                                                                                                                  // 5726
  wysihtml5.quirks.ensureProperClearingOfLists = (function() {                                                         // 5727
    var ELEMENTS_THAT_CONTAIN_LI = ["OL", "UL", "MENU"];                                                               // 5728
                                                                                                                       // 5729
    var clearIfNecessary = function(element, contentEditableElement) {                                                 // 5730
      if (!contentEditableElement.firstChild || !wysihtml5.lang.array(ELEMENTS_THAT_CONTAIN_LI).contains(contentEditableElement.firstChild.nodeName)) {
        return;                                                                                                        // 5732
      }                                                                                                                // 5733
                                                                                                                       // 5734
      var list = dom.getParentElement(element, { nodeName: ELEMENTS_THAT_CONTAIN_LI });                                // 5735
      if (!list) {                                                                                                     // 5736
        return;                                                                                                        // 5737
      }                                                                                                                // 5738
                                                                                                                       // 5739
      var listIsFirstChildOfContentEditable = list == contentEditableElement.firstChild;                               // 5740
      if (!listIsFirstChildOfContentEditable) {                                                                        // 5741
        return;                                                                                                        // 5742
      }                                                                                                                // 5743
                                                                                                                       // 5744
      var hasOnlyOneListItem = list.childNodes.length <= 1;                                                            // 5745
      if (!hasOnlyOneListItem) {                                                                                       // 5746
        return;                                                                                                        // 5747
      }                                                                                                                // 5748
                                                                                                                       // 5749
      var onlyListItemIsEmpty = list.firstChild ? list.firstChild.innerHTML === "" : true;                             // 5750
      if (!onlyListItemIsEmpty) {                                                                                      // 5751
        return;                                                                                                        // 5752
      }                                                                                                                // 5753
                                                                                                                       // 5754
      list.parentNode.removeChild(list);                                                                               // 5755
    };                                                                                                                 // 5756
                                                                                                                       // 5757
    return function(composer) {                                                                                        // 5758
      dom.observe(composer.element, "keydown", function(event) {                                                       // 5759
        if (event.keyCode !== wysihtml5.BACKSPACE_KEY) {                                                               // 5760
          return;                                                                                                      // 5761
        }                                                                                                              // 5762
                                                                                                                       // 5763
        var element = composer.selection.getSelectedNode();                                                            // 5764
        clearIfNecessary(element, composer.element);                                                                   // 5765
      });                                                                                                              // 5766
    };                                                                                                                 // 5767
  })();                                                                                                                // 5768
                                                                                                                       // 5769
})(wysihtml5);                                                                                                         // 5770
// See https://bugzilla.mozilla.org/show_bug.cgi?id=664398                                                             // 5771
//                                                                                                                     // 5772
// In Firefox this:                                                                                                    // 5773
//      var d = document.createElement("div");                                                                         // 5774
//      d.innerHTML ='<a href="~"></a>';                                                                               // 5775
//      d.innerHTML;                                                                                                   // 5776
// will result in:                                                                                                     // 5777
//      <a href="%7E"></a>                                                                                             // 5778
// which is wrong                                                                                                      // 5779
(function(wysihtml5) {                                                                                                 // 5780
  var TILDE_ESCAPED = "%7E";                                                                                           // 5781
  wysihtml5.quirks.getCorrectInnerHTML = function(element) {                                                           // 5782
    var innerHTML = element.innerHTML;                                                                                 // 5783
    if (innerHTML.indexOf(TILDE_ESCAPED) === -1) {                                                                     // 5784
      return innerHTML;                                                                                                // 5785
    }                                                                                                                  // 5786
                                                                                                                       // 5787
    var elementsWithTilde = element.querySelectorAll("[href*='~'], [src*='~']"),                                       // 5788
        url,                                                                                                           // 5789
        urlToSearch,                                                                                                   // 5790
        length,                                                                                                        // 5791
        i;                                                                                                             // 5792
    for (i=0, length=elementsWithTilde.length; i<length; i++) {                                                        // 5793
      url         = elementsWithTilde[i].href || elementsWithTilde[i].src;                                             // 5794
      urlToSearch = wysihtml5.lang.string(url).replace("~").by(TILDE_ESCAPED);                                         // 5795
      innerHTML   = wysihtml5.lang.string(innerHTML).replace(urlToSearch).by(url);                                     // 5796
    }                                                                                                                  // 5797
    return innerHTML;                                                                                                  // 5798
  };                                                                                                                   // 5799
})(wysihtml5);/**                                                                                                      // 5800
 * Some browsers don't insert line breaks when hitting return in a contentEditable element                             // 5801
 *    - Opera & IE insert new <p> on return                                                                            // 5802
 *    - Chrome & Safari insert new <div> on return                                                                     // 5803
 *    - Firefox inserts <br> on return (yippie!)                                                                       // 5804
 *                                                                                                                     // 5805
 * @param {Element} element                                                                                            // 5806
 *                                                                                                                     // 5807
 * @example                                                                                                            // 5808
 *    wysihtml5.quirks.insertLineBreakOnReturn(element);                                                               // 5809
 */                                                                                                                    // 5810
(function(wysihtml5) {                                                                                                 // 5811
  var dom                                           = wysihtml5.dom,                                                   // 5812
      USE_NATIVE_LINE_BREAK_WHEN_CARET_INSIDE_TAGS  = ["LI", "P", "H1", "H2", "H3", "H4", "H5", "H6"],                 // 5813
      LIST_TAGS                                     = ["UL", "OL", "MENU"];                                            // 5814
                                                                                                                       // 5815
  wysihtml5.quirks.insertLineBreakOnReturn = function(composer) {                                                      // 5816
    function unwrap(selectedNode) {                                                                                    // 5817
      var parentElement = dom.getParentElement(selectedNode, { nodeName: ["P", "DIV"] }, 2);                           // 5818
      if (!parentElement) {                                                                                            // 5819
        return;                                                                                                        // 5820
      }                                                                                                                // 5821
                                                                                                                       // 5822
      var invisibleSpace = document.createTextNode(wysihtml5.INVISIBLE_SPACE);                                         // 5823
      dom.insert(invisibleSpace).before(parentElement);                                                                // 5824
      dom.replaceWithChildNodes(parentElement);                                                                        // 5825
      composer.selection.selectNode(invisibleSpace);                                                                   // 5826
    }                                                                                                                  // 5827
                                                                                                                       // 5828
    function keyDown(event) {                                                                                          // 5829
      var keyCode = event.keyCode;                                                                                     // 5830
      if (event.shiftKey || (keyCode !== wysihtml5.ENTER_KEY && keyCode !== wysihtml5.BACKSPACE_KEY)) {                // 5831
        return;                                                                                                        // 5832
      }                                                                                                                // 5833
                                                                                                                       // 5834
      var element         = event.target,                                                                              // 5835
          selectedNode    = composer.selection.getSelectedNode(),                                                      // 5836
          blockElement    = dom.getParentElement(selectedNode, { nodeName: USE_NATIVE_LINE_BREAK_WHEN_CARET_INSIDE_TAGS }, 4);
      if (blockElement) {                                                                                              // 5838
        // Some browsers create <p> elements after leaving a list                                                      // 5839
        // check after keydown of backspace and return whether a <p> got inserted and unwrap it                        // 5840
        if (blockElement.nodeName === "LI" && (keyCode === wysihtml5.ENTER_KEY || keyCode === wysihtml5.BACKSPACE_KEY)) {
          setTimeout(function() {                                                                                      // 5842
            var selectedNode = composer.selection.getSelectedNode(),                                                   // 5843
                list,                                                                                                  // 5844
                div;                                                                                                   // 5845
            if (!selectedNode) {                                                                                       // 5846
              return;                                                                                                  // 5847
            }                                                                                                          // 5848
                                                                                                                       // 5849
            list = dom.getParentElement(selectedNode, {                                                                // 5850
              nodeName: LIST_TAGS                                                                                      // 5851
            }, 2);                                                                                                     // 5852
                                                                                                                       // 5853
            if (list) {                                                                                                // 5854
              return;                                                                                                  // 5855
            }                                                                                                          // 5856
                                                                                                                       // 5857
            unwrap(selectedNode);                                                                                      // 5858
          }, 0);                                                                                                       // 5859
        } else if (blockElement.nodeName.match(/H[1-6]/) && keyCode === wysihtml5.ENTER_KEY) {                         // 5860
          setTimeout(function() {                                                                                      // 5861
            unwrap(composer.selection.getSelectedNode());                                                              // 5862
          }, 0);                                                                                                       // 5863
        }                                                                                                              // 5864
        return;                                                                                                        // 5865
      }                                                                                                                // 5866
                                                                                                                       // 5867
      if (keyCode === wysihtml5.ENTER_KEY && !wysihtml5.browser.insertsLineBreaksOnReturn()) {                         // 5868
        composer.commands.exec("insertLineBreak");                                                                     // 5869
        event.preventDefault();                                                                                        // 5870
      }                                                                                                                // 5871
    }                                                                                                                  // 5872
                                                                                                                       // 5873
    // keypress doesn't fire when you hit backspace                                                                    // 5874
    dom.observe(composer.element.ownerDocument, "keydown", keyDown);                                                   // 5875
  };                                                                                                                   // 5876
})(wysihtml5);/**                                                                                                      // 5877
 * Force rerendering of a given element                                                                                // 5878
 * Needed to fix display misbehaviors of IE                                                                            // 5879
 *                                                                                                                     // 5880
 * @param {Element} element The element object which needs to be rerendered                                            // 5881
 * @example                                                                                                            // 5882
 *    wysihtml5.quirks.redraw(document.body);                                                                          // 5883
 */                                                                                                                    // 5884
(function(wysihtml5) {                                                                                                 // 5885
  var CLASS_NAME = "wysihtml5-quirks-redraw";                                                                          // 5886
                                                                                                                       // 5887
  wysihtml5.quirks.redraw = function(element) {                                                                        // 5888
    wysihtml5.dom.addClass(element, CLASS_NAME);                                                                       // 5889
    wysihtml5.dom.removeClass(element, CLASS_NAME);                                                                    // 5890
                                                                                                                       // 5891
    // Following hack is needed for firefox to make sure that image resize handles are properly removed                // 5892
    try {                                                                                                              // 5893
      var doc = element.ownerDocument;                                                                                 // 5894
      doc.execCommand("italic", false, null);                                                                          // 5895
      doc.execCommand("italic", false, null);                                                                          // 5896
    } catch(e) {}                                                                                                      // 5897
  };                                                                                                                   // 5898
})(wysihtml5);/**                                                                                                      // 5899
 * Selection API                                                                                                       // 5900
 *                                                                                                                     // 5901
 * @example                                                                                                            // 5902
 *    var selection = new wysihtml5.Selection(editor);                                                                 // 5903
 */                                                                                                                    // 5904
(function(wysihtml5) {                                                                                                 // 5905
  var dom = wysihtml5.dom;                                                                                             // 5906
                                                                                                                       // 5907
  function _getCumulativeOffsetTop(element) {                                                                          // 5908
    var top = 0;                                                                                                       // 5909
    if (element.parentNode) {                                                                                          // 5910
      do {                                                                                                             // 5911
        top += element.offsetTop || 0;                                                                                 // 5912
        element = element.offsetParent;                                                                                // 5913
      } while (element);                                                                                               // 5914
    }                                                                                                                  // 5915
    return top;                                                                                                        // 5916
  }                                                                                                                    // 5917
                                                                                                                       // 5918
  wysihtml5.Selection = Base.extend(                                                                                   // 5919
    /** @scope wysihtml5.Selection.prototype */ {                                                                      // 5920
    constructor: function(editor) {                                                                                    // 5921
      // Make sure that our external range library is initialized                                                      // 5922
      window.rangy.init();                                                                                             // 5923
                                                                                                                       // 5924
      this.editor   = editor;                                                                                          // 5925
      this.composer = editor.composer;                                                                                 // 5926
      this.doc      = this.composer.doc;                                                                               // 5927
    },                                                                                                                 // 5928
                                                                                                                       // 5929
    /**                                                                                                                // 5930
     * Get the current selection as a bookmark to be able to later restore it                                          // 5931
     *                                                                                                                 // 5932
     * @return {Object} An object that represents the current selection                                                // 5933
     */                                                                                                                // 5934
    getBookmark: function() {                                                                                          // 5935
      var range = this.getRange();                                                                                     // 5936
      return range && range.cloneRange();                                                                              // 5937
    },                                                                                                                 // 5938
                                                                                                                       // 5939
    /**                                                                                                                // 5940
     * Restore a selection retrieved via wysihtml5.Selection.prototype.getBookmark                                     // 5941
     *                                                                                                                 // 5942
     * @param {Object} bookmark An object that represents the current selection                                        // 5943
     */                                                                                                                // 5944
    setBookmark: function(bookmark) {                                                                                  // 5945
      if (!bookmark) {                                                                                                 // 5946
        return;                                                                                                        // 5947
      }                                                                                                                // 5948
                                                                                                                       // 5949
      this.setSelection(bookmark);                                                                                     // 5950
    },                                                                                                                 // 5951
                                                                                                                       // 5952
    /**                                                                                                                // 5953
     * Set the caret in front of the given node                                                                        // 5954
     *                                                                                                                 // 5955
     * @param {Object} node The element or text node where to position the caret in front of                           // 5956
     * @example                                                                                                        // 5957
     *    selection.setBefore(myElement);                                                                              // 5958
     */                                                                                                                // 5959
    setBefore: function(node) {                                                                                        // 5960
      var range = rangy.createRange(this.doc);                                                                         // 5961
      range.setStartBefore(node);                                                                                      // 5962
      range.setEndBefore(node);                                                                                        // 5963
      return this.setSelection(range);                                                                                 // 5964
    },                                                                                                                 // 5965
                                                                                                                       // 5966
    /**                                                                                                                // 5967
     * Set the caret after the given node                                                                              // 5968
     *                                                                                                                 // 5969
     * @param {Object} node The element or text node where to position the caret in front of                           // 5970
     * @example                                                                                                        // 5971
     *    selection.setBefore(myElement);                                                                              // 5972
     */                                                                                                                // 5973
    setAfter: function(node) {                                                                                         // 5974
      var range = rangy.createRange(this.doc);                                                                         // 5975
      range.setStartAfter(node);                                                                                       // 5976
      range.setEndAfter(node);                                                                                         // 5977
      return this.setSelection(range);                                                                                 // 5978
    },                                                                                                                 // 5979
                                                                                                                       // 5980
    /**                                                                                                                // 5981
     * Ability to select/mark nodes                                                                                    // 5982
     *                                                                                                                 // 5983
     * @param {Element} node The node/element to select                                                                // 5984
     * @example                                                                                                        // 5985
     *    selection.selectNode(document.getElementById("my-image"));                                                   // 5986
     */                                                                                                                // 5987
    selectNode: function(node) {                                                                                       // 5988
      var range           = rangy.createRange(this.doc),                                                               // 5989
          isElement       = node.nodeType === wysihtml5.ELEMENT_NODE,                                                  // 5990
          canHaveHTML     = "canHaveHTML" in node ? node.canHaveHTML : (node.nodeName !== "IMG"),                      // 5991
          content         = isElement ? node.innerHTML : node.data,                                                    // 5992
          isEmpty         = (content === "" || content === wysihtml5.INVISIBLE_SPACE),                                 // 5993
          displayStyle    = dom.getStyle("display").from(node),                                                        // 5994
          isBlockElement  = (displayStyle === "block" || displayStyle === "list-item");                                // 5995
                                                                                                                       // 5996
      if (isEmpty && isElement && canHaveHTML) {                                                                       // 5997
        // Make sure that caret is visible in node by inserting a zero width no breaking space                         // 5998
        try { node.innerHTML = wysihtml5.INVISIBLE_SPACE; } catch(e) {}                                                // 5999
      }                                                                                                                // 6000
                                                                                                                       // 6001
      if (canHaveHTML) {                                                                                               // 6002
        range.selectNodeContents(node);                                                                                // 6003
      } else {                                                                                                         // 6004
        range.selectNode(node);                                                                                        // 6005
      }                                                                                                                // 6006
                                                                                                                       // 6007
      if (canHaveHTML && isEmpty && isElement) {                                                                       // 6008
        range.collapse(isBlockElement);                                                                                // 6009
      } else if (canHaveHTML && isEmpty) {                                                                             // 6010
        range.setStartAfter(node);                                                                                     // 6011
        range.setEndAfter(node);                                                                                       // 6012
      }                                                                                                                // 6013
                                                                                                                       // 6014
      this.setSelection(range);                                                                                        // 6015
    },                                                                                                                 // 6016
                                                                                                                       // 6017
    /**                                                                                                                // 6018
     * Get the node which contains the selection                                                                       // 6019
     *                                                                                                                 // 6020
     * @param {Boolean} [controlRange] (only IE) Whether it should return the selected ControlRange element when the selection type is a "ControlRange"
     * @return {Object} The node that contains the caret                                                               // 6022
     * @example                                                                                                        // 6023
     *    var nodeThatContainsCaret = selection.getSelectedNode();                                                     // 6024
     */                                                                                                                // 6025
    getSelectedNode: function(controlRange) {                                                                          // 6026
      var selection,                                                                                                   // 6027
          range;                                                                                                       // 6028
                                                                                                                       // 6029
      if (controlRange && this.doc.selection && this.doc.selection.type === "Control") {                               // 6030
        range = this.doc.selection.createRange();                                                                      // 6031
        if (range && range.length) {                                                                                   // 6032
          return range.item(0);                                                                                        // 6033
        }                                                                                                              // 6034
      }                                                                                                                // 6035
                                                                                                                       // 6036
      selection = this.getSelection(this.doc);                                                                         // 6037
      if (selection.focusNode === selection.anchorNode) {                                                              // 6038
        return selection.focusNode;                                                                                    // 6039
      } else {                                                                                                         // 6040
        range = this.getRange(this.doc);                                                                               // 6041
        return range ? range.commonAncestorContainer : this.doc.body;                                                  // 6042
      }                                                                                                                // 6043
    },                                                                                                                 // 6044
                                                                                                                       // 6045
    executeAndRestore: function(method, restoreScrollPosition) {                                                       // 6046
      var body                  = this.doc.body,                                                                       // 6047
          oldScrollTop          = restoreScrollPosition && body.scrollTop,                                             // 6048
          oldScrollLeft         = restoreScrollPosition && body.scrollLeft,                                            // 6049
          className             = "_wysihtml5-temp-placeholder",                                                       // 6050
          placeholderHTML       = '<span class="' + className + '">' + wysihtml5.INVISIBLE_SPACE + '</span>',          // 6051
          range                 = this.getRange(this.doc),                                                             // 6052
          newRange;                                                                                                    // 6053
                                                                                                                       // 6054
      // Nothing selected, execute and say goodbye                                                                     // 6055
      if (!range) {                                                                                                    // 6056
        method(body, body);                                                                                            // 6057
        return;                                                                                                        // 6058
      }                                                                                                                // 6059
                                                                                                                       // 6060
      var node = range.createContextualFragment(placeholderHTML);                                                      // 6061
      range.insertNode(node);                                                                                          // 6062
                                                                                                                       // 6063
      // Make sure that a potential error doesn't cause our placeholder element to be left as a placeholder            // 6064
      try {                                                                                                            // 6065
        method(range.startContainer, range.endContainer);                                                              // 6066
      } catch(e3) {                                                                                                    // 6067
        setTimeout(function() { throw e3; }, 0);                                                                       // 6068
      }                                                                                                                // 6069
                                                                                                                       // 6070
      caretPlaceholder = this.doc.querySelector("." + className);                                                      // 6071
      if (caretPlaceholder) {                                                                                          // 6072
        newRange = rangy.createRange(this.doc);                                                                        // 6073
        newRange.selectNode(caretPlaceholder);                                                                         // 6074
        newRange.deleteContents();                                                                                     // 6075
        this.setSelection(newRange);                                                                                   // 6076
      } else {                                                                                                         // 6077
        // fallback for when all hell breaks loose                                                                     // 6078
        body.focus();                                                                                                  // 6079
      }                                                                                                                // 6080
                                                                                                                       // 6081
      if (restoreScrollPosition) {                                                                                     // 6082
        body.scrollTop  = oldScrollTop;                                                                                // 6083
        body.scrollLeft = oldScrollLeft;                                                                               // 6084
      }                                                                                                                // 6085
                                                                                                                       // 6086
      // Remove it again, just to make sure that the placeholder is definitely out of the dom tree                     // 6087
      try {                                                                                                            // 6088
        caretPlaceholder.parentNode.removeChild(caretPlaceholder);                                                     // 6089
      } catch(e4) {}                                                                                                   // 6090
    },                                                                                                                 // 6091
                                                                                                                       // 6092
    /**                                                                                                                // 6093
     * Different approach of preserving the selection (doesn't modify the dom)                                         // 6094
     * Takes all text nodes in the selection and saves the selection position in the first and last one                // 6095
     */                                                                                                                // 6096
    executeAndRestoreSimple: function(method) {                                                                        // 6097
      var range = this.getRange(),                                                                                     // 6098
          body  = this.doc.body,                                                                                       // 6099
          newRange,                                                                                                    // 6100
          firstNode,                                                                                                   // 6101
          lastNode,                                                                                                    // 6102
          textNodes,                                                                                                   // 6103
          rangeBackup;                                                                                                 // 6104
                                                                                                                       // 6105
      // Nothing selected, execute and say goodbye                                                                     // 6106
      if (!range) {                                                                                                    // 6107
        method(body, body);                                                                                            // 6108
        return;                                                                                                        // 6109
      }                                                                                                                // 6110
                                                                                                                       // 6111
      textNodes = range.getNodes([3]);                                                                                 // 6112
      firstNode = textNodes[0] || range.startContainer;                                                                // 6113
      lastNode  = textNodes[textNodes.length - 1] || range.endContainer;                                               // 6114
                                                                                                                       // 6115
      rangeBackup = {                                                                                                  // 6116
        collapsed:      range.collapsed,                                                                               // 6117
        startContainer: firstNode,                                                                                     // 6118
        startOffset:    firstNode === range.startContainer ? range.startOffset : 0,                                    // 6119
        endContainer:   lastNode,                                                                                      // 6120
        endOffset:      lastNode === range.endContainer ? range.endOffset : lastNode.length                            // 6121
      };                                                                                                               // 6122
                                                                                                                       // 6123
      try {                                                                                                            // 6124
        method(range.startContainer, range.endContainer);                                                              // 6125
      } catch(e) {                                                                                                     // 6126
        setTimeout(function() { throw e; }, 0);                                                                        // 6127
      }                                                                                                                // 6128
                                                                                                                       // 6129
      newRange = rangy.createRange(this.doc);                                                                          // 6130
      try { newRange.setStart(rangeBackup.startContainer, rangeBackup.startOffset); } catch(e1) {}                     // 6131
      try { newRange.setEnd(rangeBackup.endContainer, rangeBackup.endOffset); } catch(e2) {}                           // 6132
      try { this.setSelection(newRange); } catch(e3) {}                                                                // 6133
    },                                                                                                                 // 6134
                                                                                                                       // 6135
    /**                                                                                                                // 6136
     * Insert html at the caret position and move the cursor after the inserted html                                   // 6137
     *                                                                                                                 // 6138
     * @param {String} html HTML string to insert                                                                      // 6139
     * @example                                                                                                        // 6140
     *    selection.insertHTML("<p>foobar</p>");                                                                       // 6141
     */                                                                                                                // 6142
    insertHTML: function(html) {                                                                                       // 6143
      var range     = rangy.createRange(this.doc),                                                                     // 6144
          node      = range.createContextualFragment(html),                                                            // 6145
          lastChild = node.lastChild;                                                                                  // 6146
      this.insertNode(node);                                                                                           // 6147
      if (lastChild) {                                                                                                 // 6148
        this.setAfter(lastChild);                                                                                      // 6149
      }                                                                                                                // 6150
    },                                                                                                                 // 6151
                                                                                                                       // 6152
    /**                                                                                                                // 6153
     * Insert a node at the caret position and move the cursor behind it                                               // 6154
     *                                                                                                                 // 6155
     * @param {Object} node HTML string to insert                                                                      // 6156
     * @example                                                                                                        // 6157
     *    selection.insertNode(document.createTextNode("foobar"));                                                     // 6158
     */                                                                                                                // 6159
    insertNode: function(node) {                                                                                       // 6160
      var range = this.getRange();                                                                                     // 6161
      if (range) {                                                                                                     // 6162
        range.insertNode(node);                                                                                        // 6163
      }                                                                                                                // 6164
    },                                                                                                                 // 6165
                                                                                                                       // 6166
    /**                                                                                                                // 6167
     * Wraps current selection with the given node                                                                     // 6168
     *                                                                                                                 // 6169
     * @param {Object} node The node to surround the selected elements with                                            // 6170
     */                                                                                                                // 6171
    surround: function(node) {                                                                                         // 6172
      var range = this.getRange();                                                                                     // 6173
      if (!range) {                                                                                                    // 6174
        return;                                                                                                        // 6175
      }                                                                                                                // 6176
                                                                                                                       // 6177
      try {                                                                                                            // 6178
        // This only works when the range boundaries are not overlapping other elements                                // 6179
        range.surroundContents(node);                                                                                  // 6180
        this.selectNode(node);                                                                                         // 6181
      } catch(e) {                                                                                                     // 6182
        // fallback                                                                                                    // 6183
        node.appendChild(range.extractContents());                                                                     // 6184
        range.insertNode(node);                                                                                        // 6185
      }                                                                                                                // 6186
    },                                                                                                                 // 6187
                                                                                                                       // 6188
    /**                                                                                                                // 6189
     * Scroll the current caret position into the view                                                                 // 6190
     * FIXME: This is a bit hacky, there might be a smarter way of doing this                                          // 6191
     *                                                                                                                 // 6192
     * @example                                                                                                        // 6193
     *    selection.scrollIntoView();                                                                                  // 6194
     */                                                                                                                // 6195
    scrollIntoView: function() {                                                                                       // 6196
      var doc           = this.doc,                                                                                    // 6197
          hasScrollBars = doc.documentElement.scrollHeight > doc.documentElement.offsetHeight,                         // 6198
          tempElement   = doc._wysihtml5ScrollIntoViewElement = doc._wysihtml5ScrollIntoViewElement || (function() {   // 6199
            var element = doc.createElement("span");                                                                   // 6200
            // The element needs content in order to be able to calculate it's position properly                       // 6201
            element.innerHTML = wysihtml5.INVISIBLE_SPACE;                                                             // 6202
            return element;                                                                                            // 6203
          })(),                                                                                                        // 6204
          offsetTop;                                                                                                   // 6205
                                                                                                                       // 6206
      if (hasScrollBars) {                                                                                             // 6207
        this.insertNode(tempElement);                                                                                  // 6208
        offsetTop = _getCumulativeOffsetTop(tempElement);                                                              // 6209
        tempElement.parentNode.removeChild(tempElement);                                                               // 6210
        if (offsetTop > doc.body.scrollTop) {                                                                          // 6211
          doc.body.scrollTop = offsetTop;                                                                              // 6212
        }                                                                                                              // 6213
      }                                                                                                                // 6214
    },                                                                                                                 // 6215
                                                                                                                       // 6216
    /**                                                                                                                // 6217
     * Select line where the caret is in                                                                               // 6218
     */                                                                                                                // 6219
    selectLine: function() {                                                                                           // 6220
      if (wysihtml5.browser.supportsSelectionModify()) {                                                               // 6221
        this._selectLine_W3C();                                                                                        // 6222
      } else if (this.doc.selection) {                                                                                 // 6223
        this._selectLine_MSIE();                                                                                       // 6224
      }                                                                                                                // 6225
    },                                                                                                                 // 6226
                                                                                                                       // 6227
    /**                                                                                                                // 6228
     * See https://developer.mozilla.org/en/DOM/Selection/modify                                                       // 6229
     */                                                                                                                // 6230
    _selectLine_W3C: function() {                                                                                      // 6231
      var win       = this.doc.defaultView,                                                                            // 6232
          selection = win.getSelection();                                                                              // 6233
      selection.modify("extend", "left", "lineboundary");                                                              // 6234
      selection.modify("extend", "right", "lineboundary");                                                             // 6235
    },                                                                                                                 // 6236
                                                                                                                       // 6237
    _selectLine_MSIE: function() {                                                                                     // 6238
      var range       = this.doc.selection.createRange(),                                                              // 6239
          rangeTop    = range.boundingTop,                                                                             // 6240
          rangeHeight = range.boundingHeight,                                                                          // 6241
          scrollWidth = this.doc.body.scrollWidth,                                                                     // 6242
          rangeBottom,                                                                                                 // 6243
          rangeEnd,                                                                                                    // 6244
          measureNode,                                                                                                 // 6245
          i,                                                                                                           // 6246
          j;                                                                                                           // 6247
                                                                                                                       // 6248
      if (!range.moveToPoint) {                                                                                        // 6249
        return;                                                                                                        // 6250
      }                                                                                                                // 6251
                                                                                                                       // 6252
      if (rangeTop === 0) {                                                                                            // 6253
        // Don't know why, but when the selection ends at the end of a line                                            // 6254
        // range.boundingTop is 0                                                                                      // 6255
        measureNode = this.doc.createElement("span");                                                                  // 6256
        this.insertNode(measureNode);                                                                                  // 6257
        rangeTop = measureNode.offsetTop;                                                                              // 6258
        measureNode.parentNode.removeChild(measureNode);                                                               // 6259
      }                                                                                                                // 6260
                                                                                                                       // 6261
      rangeTop += 1;                                                                                                   // 6262
                                                                                                                       // 6263
      for (i=-10; i<scrollWidth; i+=2) {                                                                               // 6264
        try {                                                                                                          // 6265
          range.moveToPoint(i, rangeTop);                                                                              // 6266
          break;                                                                                                       // 6267
        } catch(e1) {}                                                                                                 // 6268
      }                                                                                                                // 6269
                                                                                                                       // 6270
      // Investigate the following in order to handle multi line selections                                            // 6271
      // rangeBottom = rangeTop + (rangeHeight ? (rangeHeight - 1) : 0);                                               // 6272
      rangeBottom = rangeTop;                                                                                          // 6273
      rangeEnd = this.doc.selection.createRange();                                                                     // 6274
      for (j=scrollWidth; j>=0; j--) {                                                                                 // 6275
        try {                                                                                                          // 6276
          rangeEnd.moveToPoint(j, rangeBottom);                                                                        // 6277
          break;                                                                                                       // 6278
        } catch(e2) {}                                                                                                 // 6279
      }                                                                                                                // 6280
                                                                                                                       // 6281
      range.setEndPoint("EndToEnd", rangeEnd);                                                                         // 6282
      range.select();                                                                                                  // 6283
    },                                                                                                                 // 6284
                                                                                                                       // 6285
    getText: function() {                                                                                              // 6286
      var selection = this.getSelection();                                                                             // 6287
      return selection ? selection.toString() : "";                                                                    // 6288
    },                                                                                                                 // 6289
                                                                                                                       // 6290
    getNodes: function(nodeType, filter) {                                                                             // 6291
      var range = this.getRange();                                                                                     // 6292
      if (range) {                                                                                                     // 6293
        return range.getNodes([nodeType], filter);                                                                     // 6294
      } else {                                                                                                         // 6295
        return [];                                                                                                     // 6296
      }                                                                                                                // 6297
    },                                                                                                                 // 6298
                                                                                                                       // 6299
    getRange: function() {                                                                                             // 6300
      var selection = this.getSelection();                                                                             // 6301
      return selection && selection.rangeCount && selection.getRangeAt(0);                                             // 6302
    },                                                                                                                 // 6303
                                                                                                                       // 6304
    getSelection: function() {                                                                                         // 6305
      return rangy.getSelection(this.doc.defaultView || this.doc.parentWindow);                                        // 6306
    },                                                                                                                 // 6307
                                                                                                                       // 6308
    setSelection: function(range) {                                                                                    // 6309
      var win       = this.doc.defaultView || this.doc.parentWindow,                                                   // 6310
          selection = rangy.getSelection(win);                                                                         // 6311
      return selection.setSingleRange(range);                                                                          // 6312
    }                                                                                                                  // 6313
  });                                                                                                                  // 6314
                                                                                                                       // 6315
})(wysihtml5);                                                                                                         // 6316
/**                                                                                                                    // 6317
 * Inspired by the rangy CSS Applier module written by Tim Down and licensed under the MIT license.                    // 6318
 * http://code.google.com/p/rangy/                                                                                     // 6319
 *                                                                                                                     // 6320
 * changed in order to be able ...                                                                                     // 6321
 *    - to use custom tags                                                                                             // 6322
 *    - to detect and replace similar css classes via reg exp                                                          // 6323
 */                                                                                                                    // 6324
(function(wysihtml5, rangy) {                                                                                          // 6325
  var defaultTagName = "span";                                                                                         // 6326
                                                                                                                       // 6327
  var REG_EXP_WHITE_SPACE = /\s+/g;                                                                                    // 6328
                                                                                                                       // 6329
  function hasClass(el, cssClass, regExp) {                                                                            // 6330
    if (!el.className) {                                                                                               // 6331
      return false;                                                                                                    // 6332
    }                                                                                                                  // 6333
                                                                                                                       // 6334
    var matchingClassNames = el.className.match(regExp) || [];                                                         // 6335
    return matchingClassNames[matchingClassNames.length - 1] === cssClass;                                             // 6336
  }                                                                                                                    // 6337
                                                                                                                       // 6338
  function addClass(el, cssClass, regExp) {                                                                            // 6339
    if (el.className) {                                                                                                // 6340
      removeClass(el, regExp);                                                                                         // 6341
      el.className += " " + cssClass;                                                                                  // 6342
    } else {                                                                                                           // 6343
      el.className = cssClass;                                                                                         // 6344
    }                                                                                                                  // 6345
  }                                                                                                                    // 6346
                                                                                                                       // 6347
  function removeClass(el, regExp) {                                                                                   // 6348
    if (el.className) {                                                                                                // 6349
      el.className = el.className.replace(regExp, "");                                                                 // 6350
    }                                                                                                                  // 6351
  }                                                                                                                    // 6352
                                                                                                                       // 6353
  function hasSameClasses(el1, el2) {                                                                                  // 6354
    return el1.className.replace(REG_EXP_WHITE_SPACE, " ") == el2.className.replace(REG_EXP_WHITE_SPACE, " ");         // 6355
  }                                                                                                                    // 6356
                                                                                                                       // 6357
  function replaceWithOwnChildren(el) {                                                                                // 6358
    var parent = el.parentNode;                                                                                        // 6359
    while (el.firstChild) {                                                                                            // 6360
      parent.insertBefore(el.firstChild, el);                                                                          // 6361
    }                                                                                                                  // 6362
    parent.removeChild(el);                                                                                            // 6363
  }                                                                                                                    // 6364
                                                                                                                       // 6365
  function elementsHaveSameNonClassAttributes(el1, el2) {                                                              // 6366
    if (el1.attributes.length != el2.attributes.length) {                                                              // 6367
      return false;                                                                                                    // 6368
    }                                                                                                                  // 6369
    for (var i = 0, len = el1.attributes.length, attr1, attr2, name; i < len; ++i) {                                   // 6370
      attr1 = el1.attributes[i];                                                                                       // 6371
      name = attr1.name;                                                                                               // 6372
      if (name != "class") {                                                                                           // 6373
        attr2 = el2.attributes.getNamedItem(name);                                                                     // 6374
        if (attr1.specified != attr2.specified) {                                                                      // 6375
          return false;                                                                                                // 6376
        }                                                                                                              // 6377
        if (attr1.specified && attr1.nodeValue !== attr2.nodeValue) {                                                  // 6378
          return false;                                                                                                // 6379
        }                                                                                                              // 6380
      }                                                                                                                // 6381
    }                                                                                                                  // 6382
    return true;                                                                                                       // 6383
  }                                                                                                                    // 6384
                                                                                                                       // 6385
  function isSplitPoint(node, offset) {                                                                                // 6386
    if (rangy.dom.isCharacterDataNode(node)) {                                                                         // 6387
      if (offset == 0) {                                                                                               // 6388
        return !!node.previousSibling;                                                                                 // 6389
      } else if (offset == node.length) {                                                                              // 6390
        return !!node.nextSibling;                                                                                     // 6391
      } else {                                                                                                         // 6392
        return true;                                                                                                   // 6393
      }                                                                                                                // 6394
    }                                                                                                                  // 6395
                                                                                                                       // 6396
    return offset > 0 && offset < node.childNodes.length;                                                              // 6397
  }                                                                                                                    // 6398
                                                                                                                       // 6399
  function splitNodeAt(node, descendantNode, descendantOffset) {                                                       // 6400
    var newNode;                                                                                                       // 6401
    if (rangy.dom.isCharacterDataNode(descendantNode)) {                                                               // 6402
      if (descendantOffset == 0) {                                                                                     // 6403
        descendantOffset = rangy.dom.getNodeIndex(descendantNode);                                                     // 6404
        descendantNode = descendantNode.parentNode;                                                                    // 6405
      } else if (descendantOffset == descendantNode.length) {                                                          // 6406
        descendantOffset = rangy.dom.getNodeIndex(descendantNode) + 1;                                                 // 6407
        descendantNode = descendantNode.parentNode;                                                                    // 6408
      } else {                                                                                                         // 6409
        newNode = rangy.dom.splitDataNode(descendantNode, descendantOffset);                                           // 6410
      }                                                                                                                // 6411
    }                                                                                                                  // 6412
    if (!newNode) {                                                                                                    // 6413
      newNode = descendantNode.cloneNode(false);                                                                       // 6414
      if (newNode.id) {                                                                                                // 6415
        newNode.removeAttribute("id");                                                                                 // 6416
      }                                                                                                                // 6417
      var child;                                                                                                       // 6418
      while ((child = descendantNode.childNodes[descendantOffset])) {                                                  // 6419
        newNode.appendChild(child);                                                                                    // 6420
      }                                                                                                                // 6421
      rangy.dom.insertAfter(newNode, descendantNode);                                                                  // 6422
    }                                                                                                                  // 6423
    return (descendantNode == node) ? newNode : splitNodeAt(node, newNode.parentNode, rangy.dom.getNodeIndex(newNode));
  }                                                                                                                    // 6425
                                                                                                                       // 6426
  function Merge(firstNode) {                                                                                          // 6427
    this.isElementMerge = (firstNode.nodeType == wysihtml5.ELEMENT_NODE);                                              // 6428
    this.firstTextNode = this.isElementMerge ? firstNode.lastChild : firstNode;                                        // 6429
    this.textNodes = [this.firstTextNode];                                                                             // 6430
  }                                                                                                                    // 6431
                                                                                                                       // 6432
  Merge.prototype = {                                                                                                  // 6433
    doMerge: function() {                                                                                              // 6434
      var textBits = [], textNode, parent, text;                                                                       // 6435
      for (var i = 0, len = this.textNodes.length; i < len; ++i) {                                                     // 6436
        textNode = this.textNodes[i];                                                                                  // 6437
        parent = textNode.parentNode;                                                                                  // 6438
        textBits[i] = textNode.data;                                                                                   // 6439
        if (i) {                                                                                                       // 6440
          parent.removeChild(textNode);                                                                                // 6441
          if (!parent.hasChildNodes()) {                                                                               // 6442
            parent.parentNode.removeChild(parent);                                                                     // 6443
          }                                                                                                            // 6444
        }                                                                                                              // 6445
      }                                                                                                                // 6446
      this.firstTextNode.data = text = textBits.join("");                                                              // 6447
      return text;                                                                                                     // 6448
    },                                                                                                                 // 6449
                                                                                                                       // 6450
    getLength: function() {                                                                                            // 6451
      var i = this.textNodes.length, len = 0;                                                                          // 6452
      while (i--) {                                                                                                    // 6453
        len += this.textNodes[i].length;                                                                               // 6454
      }                                                                                                                // 6455
      return len;                                                                                                      // 6456
    },                                                                                                                 // 6457
                                                                                                                       // 6458
    toString: function() {                                                                                             // 6459
      var textBits = [];                                                                                               // 6460
      for (var i = 0, len = this.textNodes.length; i < len; ++i) {                                                     // 6461
        textBits[i] = "'" + this.textNodes[i].data + "'";                                                              // 6462
      }                                                                                                                // 6463
      return "[Merge(" + textBits.join(",") + ")]";                                                                    // 6464
    }                                                                                                                  // 6465
  };                                                                                                                   // 6466
                                                                                                                       // 6467
  function HTMLApplier(tagNames, cssClass, similarClassRegExp, normalize) {                                            // 6468
    this.tagNames = tagNames || [defaultTagName];                                                                      // 6469
    this.cssClass = cssClass || "";                                                                                    // 6470
    this.similarClassRegExp = similarClassRegExp;                                                                      // 6471
    this.normalize = normalize;                                                                                        // 6472
    this.applyToAnyTagName = false;                                                                                    // 6473
  }                                                                                                                    // 6474
                                                                                                                       // 6475
  HTMLApplier.prototype = {                                                                                            // 6476
    getAncestorWithClass: function(node) {                                                                             // 6477
      var cssClassMatch;                                                                                               // 6478
      while (node) {                                                                                                   // 6479
        cssClassMatch = this.cssClass ? hasClass(node, this.cssClass, this.similarClassRegExp) : true;                 // 6480
        if (node.nodeType == wysihtml5.ELEMENT_NODE && rangy.dom.arrayContains(this.tagNames, node.tagName.toLowerCase()) && cssClassMatch) {
          return node;                                                                                                 // 6482
        }                                                                                                              // 6483
        node = node.parentNode;                                                                                        // 6484
      }                                                                                                                // 6485
      return false;                                                                                                    // 6486
    },                                                                                                                 // 6487
                                                                                                                       // 6488
    // Normalizes nodes after applying a CSS class to a Range.                                                         // 6489
    postApply: function(textNodes, range) {                                                                            // 6490
      var firstNode = textNodes[0], lastNode = textNodes[textNodes.length - 1];                                        // 6491
                                                                                                                       // 6492
      var merges = [], currentMerge;                                                                                   // 6493
                                                                                                                       // 6494
      var rangeStartNode = firstNode, rangeEndNode = lastNode;                                                         // 6495
      var rangeStartOffset = 0, rangeEndOffset = lastNode.length;                                                      // 6496
                                                                                                                       // 6497
      var textNode, precedingTextNode;                                                                                 // 6498
                                                                                                                       // 6499
      for (var i = 0, len = textNodes.length; i < len; ++i) {                                                          // 6500
        textNode = textNodes[i];                                                                                       // 6501
        precedingTextNode = this.getAdjacentMergeableTextNode(textNode.parentNode, false);                             // 6502
        if (precedingTextNode) {                                                                                       // 6503
          if (!currentMerge) {                                                                                         // 6504
            currentMerge = new Merge(precedingTextNode);                                                               // 6505
            merges.push(currentMerge);                                                                                 // 6506
          }                                                                                                            // 6507
          currentMerge.textNodes.push(textNode);                                                                       // 6508
          if (textNode === firstNode) {                                                                                // 6509
            rangeStartNode = currentMerge.firstTextNode;                                                               // 6510
            rangeStartOffset = rangeStartNode.length;                                                                  // 6511
          }                                                                                                            // 6512
          if (textNode === lastNode) {                                                                                 // 6513
            rangeEndNode = currentMerge.firstTextNode;                                                                 // 6514
            rangeEndOffset = currentMerge.getLength();                                                                 // 6515
          }                                                                                                            // 6516
        } else {                                                                                                       // 6517
          currentMerge = null;                                                                                         // 6518
        }                                                                                                              // 6519
      }                                                                                                                // 6520
                                                                                                                       // 6521
      // Test whether the first node after the range needs merging                                                     // 6522
      var nextTextNode = this.getAdjacentMergeableTextNode(lastNode.parentNode, true);                                 // 6523
      if (nextTextNode) {                                                                                              // 6524
        if (!currentMerge) {                                                                                           // 6525
          currentMerge = new Merge(lastNode);                                                                          // 6526
          merges.push(currentMerge);                                                                                   // 6527
        }                                                                                                              // 6528
        currentMerge.textNodes.push(nextTextNode);                                                                     // 6529
      }                                                                                                                // 6530
                                                                                                                       // 6531
      // Do the merges                                                                                                 // 6532
      if (merges.length) {                                                                                             // 6533
        for (i = 0, len = merges.length; i < len; ++i) {                                                               // 6534
          merges[i].doMerge();                                                                                         // 6535
        }                                                                                                              // 6536
        // Set the range boundaries                                                                                    // 6537
        range.setStart(rangeStartNode, rangeStartOffset);                                                              // 6538
        range.setEnd(rangeEndNode, rangeEndOffset);                                                                    // 6539
      }                                                                                                                // 6540
    },                                                                                                                 // 6541
                                                                                                                       // 6542
    getAdjacentMergeableTextNode: function(node, forward) {                                                            // 6543
        var isTextNode = (node.nodeType == wysihtml5.TEXT_NODE);                                                       // 6544
        var el = isTextNode ? node.parentNode : node;                                                                  // 6545
        var adjacentNode;                                                                                              // 6546
        var propName = forward ? "nextSibling" : "previousSibling";                                                    // 6547
        if (isTextNode) {                                                                                              // 6548
          // Can merge if the node's previous/next sibling is a text node                                              // 6549
          adjacentNode = node[propName];                                                                               // 6550
          if (adjacentNode && adjacentNode.nodeType == wysihtml5.TEXT_NODE) {                                          // 6551
            return adjacentNode;                                                                                       // 6552
          }                                                                                                            // 6553
        } else {                                                                                                       // 6554
          // Compare element with its sibling                                                                          // 6555
          adjacentNode = el[propName];                                                                                 // 6556
          if (adjacentNode && this.areElementsMergeable(node, adjacentNode)) {                                         // 6557
            return adjacentNode[forward ? "firstChild" : "lastChild"];                                                 // 6558
          }                                                                                                            // 6559
        }                                                                                                              // 6560
        return null;                                                                                                   // 6561
    },                                                                                                                 // 6562
                                                                                                                       // 6563
    areElementsMergeable: function(el1, el2) {                                                                         // 6564
      return rangy.dom.arrayContains(this.tagNames, (el1.tagName || "").toLowerCase())                                 // 6565
        && rangy.dom.arrayContains(this.tagNames, (el2.tagName || "").toLowerCase())                                   // 6566
        && hasSameClasses(el1, el2)                                                                                    // 6567
        && elementsHaveSameNonClassAttributes(el1, el2);                                                               // 6568
    },                                                                                                                 // 6569
                                                                                                                       // 6570
    createContainer: function(doc) {                                                                                   // 6571
      var el = doc.createElement(this.tagNames[0]);                                                                    // 6572
      if (this.cssClass) {                                                                                             // 6573
        el.className = this.cssClass;                                                                                  // 6574
      }                                                                                                                // 6575
      return el;                                                                                                       // 6576
    },                                                                                                                 // 6577
                                                                                                                       // 6578
    applyToTextNode: function(textNode) {                                                                              // 6579
      var parent = textNode.parentNode;                                                                                // 6580
      if (parent.childNodes.length == 1 && rangy.dom.arrayContains(this.tagNames, parent.tagName.toLowerCase())) {     // 6581
        if (this.cssClass) {                                                                                           // 6582
          addClass(parent, this.cssClass, this.similarClassRegExp);                                                    // 6583
        }                                                                                                              // 6584
      } else {                                                                                                         // 6585
        var el = this.createContainer(rangy.dom.getDocument(textNode));                                                // 6586
        textNode.parentNode.insertBefore(el, textNode);                                                                // 6587
        el.appendChild(textNode);                                                                                      // 6588
      }                                                                                                                // 6589
    },                                                                                                                 // 6590
                                                                                                                       // 6591
    isRemovable: function(el) {                                                                                        // 6592
      return rangy.dom.arrayContains(this.tagNames, el.tagName.toLowerCase()) && wysihtml5.lang.string(el.className).trim() == this.cssClass;
    },                                                                                                                 // 6594
                                                                                                                       // 6595
    undoToTextNode: function(textNode, range, ancestorWithClass) {                                                     // 6596
      if (!range.containsNode(ancestorWithClass)) {                                                                    // 6597
        // Split out the portion of the ancestor from which we can remove the CSS class                                // 6598
        var ancestorRange = range.cloneRange();                                                                        // 6599
        ancestorRange.selectNode(ancestorWithClass);                                                                   // 6600
                                                                                                                       // 6601
        if (ancestorRange.isPointInRange(range.endContainer, range.endOffset) && isSplitPoint(range.endContainer, range.endOffset)) {
          splitNodeAt(ancestorWithClass, range.endContainer, range.endOffset);                                         // 6603
          range.setEndAfter(ancestorWithClass);                                                                        // 6604
        }                                                                                                              // 6605
        if (ancestorRange.isPointInRange(range.startContainer, range.startOffset) && isSplitPoint(range.startContainer, range.startOffset)) {
          ancestorWithClass = splitNodeAt(ancestorWithClass, range.startContainer, range.startOffset);                 // 6607
        }                                                                                                              // 6608
      }                                                                                                                // 6609
                                                                                                                       // 6610
      if (this.similarClassRegExp) {                                                                                   // 6611
        removeClass(ancestorWithClass, this.similarClassRegExp);                                                       // 6612
      }                                                                                                                // 6613
      if (this.isRemovable(ancestorWithClass)) {                                                                       // 6614
        replaceWithOwnChildren(ancestorWithClass);                                                                     // 6615
      }                                                                                                                // 6616
    },                                                                                                                 // 6617
                                                                                                                       // 6618
    applyToRange: function(range) {                                                                                    // 6619
        var textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                         // 6620
        if (!textNodes.length) {                                                                                       // 6621
          try {                                                                                                        // 6622
            var node = this.createContainer(range.endContainer.ownerDocument);                                         // 6623
            range.surroundContents(node);                                                                              // 6624
            this.selectNode(range, node);                                                                              // 6625
            return;                                                                                                    // 6626
          } catch(e) {}                                                                                                // 6627
        }                                                                                                              // 6628
                                                                                                                       // 6629
        range.splitBoundaries();                                                                                       // 6630
        textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                             // 6631
                                                                                                                       // 6632
        if (textNodes.length) {                                                                                        // 6633
          var textNode;                                                                                                // 6634
                                                                                                                       // 6635
          for (var i = 0, len = textNodes.length; i < len; ++i) {                                                      // 6636
            textNode = textNodes[i];                                                                                   // 6637
            if (!this.getAncestorWithClass(textNode)) {                                                                // 6638
              this.applyToTextNode(textNode);                                                                          // 6639
            }                                                                                                          // 6640
          }                                                                                                            // 6641
                                                                                                                       // 6642
          range.setStart(textNodes[0], 0);                                                                             // 6643
          textNode = textNodes[textNodes.length - 1];                                                                  // 6644
          range.setEnd(textNode, textNode.length);                                                                     // 6645
                                                                                                                       // 6646
          if (this.normalize) {                                                                                        // 6647
            this.postApply(textNodes, range);                                                                          // 6648
          }                                                                                                            // 6649
        }                                                                                                              // 6650
    },                                                                                                                 // 6651
                                                                                                                       // 6652
    undoToRange: function(range) {                                                                                     // 6653
      var textNodes = range.getNodes([wysihtml5.TEXT_NODE]), textNode, ancestorWithClass;                              // 6654
      if (textNodes.length) {                                                                                          // 6655
        range.splitBoundaries();                                                                                       // 6656
        textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                             // 6657
      } else {                                                                                                         // 6658
        var doc = range.endContainer.ownerDocument,                                                                    // 6659
            node = doc.createTextNode(wysihtml5.INVISIBLE_SPACE);                                                      // 6660
        range.insertNode(node);                                                                                        // 6661
        range.selectNode(node);                                                                                        // 6662
        textNodes = [node];                                                                                            // 6663
      }                                                                                                                // 6664
                                                                                                                       // 6665
      for (var i = 0, len = textNodes.length; i < len; ++i) {                                                          // 6666
        textNode = textNodes[i];                                                                                       // 6667
        ancestorWithClass = this.getAncestorWithClass(textNode);                                                       // 6668
        if (ancestorWithClass) {                                                                                       // 6669
          this.undoToTextNode(textNode, range, ancestorWithClass);                                                     // 6670
        }                                                                                                              // 6671
      }                                                                                                                // 6672
                                                                                                                       // 6673
      if (len == 1) {                                                                                                  // 6674
        this.selectNode(range, textNodes[0]);                                                                          // 6675
      } else {                                                                                                         // 6676
        range.setStart(textNodes[0], 0);                                                                               // 6677
        textNode = textNodes[textNodes.length - 1];                                                                    // 6678
        range.setEnd(textNode, textNode.length);                                                                       // 6679
                                                                                                                       // 6680
        if (this.normalize) {                                                                                          // 6681
          this.postApply(textNodes, range);                                                                            // 6682
        }                                                                                                              // 6683
      }                                                                                                                // 6684
    },                                                                                                                 // 6685
                                                                                                                       // 6686
    selectNode: function(range, node) {                                                                                // 6687
      var isElement       = node.nodeType === wysihtml5.ELEMENT_NODE,                                                  // 6688
          canHaveHTML     = "canHaveHTML" in node ? node.canHaveHTML : true,                                           // 6689
          content         = isElement ? node.innerHTML : node.data,                                                    // 6690
          isEmpty         = (content === "" || content === wysihtml5.INVISIBLE_SPACE);                                 // 6691
                                                                                                                       // 6692
      if (isEmpty && isElement && canHaveHTML) {                                                                       // 6693
        // Make sure that caret is visible in node by inserting a zero width no breaking space                         // 6694
        try { node.innerHTML = wysihtml5.INVISIBLE_SPACE; } catch(e) {}                                                // 6695
      }                                                                                                                // 6696
      range.selectNodeContents(node);                                                                                  // 6697
      if (isEmpty && isElement) {                                                                                      // 6698
        range.collapse(false);                                                                                         // 6699
      } else if (isEmpty) {                                                                                            // 6700
        range.setStartAfter(node);                                                                                     // 6701
        range.setEndAfter(node);                                                                                       // 6702
      }                                                                                                                // 6703
    },                                                                                                                 // 6704
                                                                                                                       // 6705
    getTextSelectedByRange: function(textNode, range) {                                                                // 6706
      var textRange = range.cloneRange();                                                                              // 6707
      textRange.selectNodeContents(textNode);                                                                          // 6708
                                                                                                                       // 6709
      var intersectionRange = textRange.intersection(range);                                                           // 6710
      var text = intersectionRange ? intersectionRange.toString() : "";                                                // 6711
      textRange.detach();                                                                                              // 6712
                                                                                                                       // 6713
      return text;                                                                                                     // 6714
    },                                                                                                                 // 6715
                                                                                                                       // 6716
    isAppliedToRange: function(range) {                                                                                // 6717
      var ancestors = [],                                                                                              // 6718
          ancestor,                                                                                                    // 6719
          textNodes = range.getNodes([wysihtml5.TEXT_NODE]);                                                           // 6720
      if (!textNodes.length) {                                                                                         // 6721
        ancestor = this.getAncestorWithClass(range.startContainer);                                                    // 6722
        return ancestor ? [ancestor] : false;                                                                          // 6723
      }                                                                                                                // 6724
                                                                                                                       // 6725
      for (var i = 0, len = textNodes.length, selectedText; i < len; ++i) {                                            // 6726
        selectedText = this.getTextSelectedByRange(textNodes[i], range);                                               // 6727
        ancestor = this.getAncestorWithClass(textNodes[i]);                                                            // 6728
        if (selectedText != "" && !ancestor) {                                                                         // 6729
          return false;                                                                                                // 6730
        } else {                                                                                                       // 6731
          ancestors.push(ancestor);                                                                                    // 6732
        }                                                                                                              // 6733
      }                                                                                                                // 6734
      return ancestors;                                                                                                // 6735
    },                                                                                                                 // 6736
                                                                                                                       // 6737
    toggleRange: function(range) {                                                                                     // 6738
      if (this.isAppliedToRange(range)) {                                                                              // 6739
        this.undoToRange(range);                                                                                       // 6740
      } else {                                                                                                         // 6741
        this.applyToRange(range);                                                                                      // 6742
      }                                                                                                                // 6743
    }                                                                                                                  // 6744
  };                                                                                                                   // 6745
                                                                                                                       // 6746
  wysihtml5.selection.HTMLApplier = HTMLApplier;                                                                       // 6747
                                                                                                                       // 6748
})(wysihtml5, rangy);/**                                                                                               // 6749
 * Rich Text Query/Formatting Commands                                                                                 // 6750
 *                                                                                                                     // 6751
 * @example                                                                                                            // 6752
 *    var commands = new wysihtml5.Commands(editor);                                                                   // 6753
 */                                                                                                                    // 6754
wysihtml5.Commands = Base.extend(                                                                                      // 6755
  /** @scope wysihtml5.Commands.prototype */ {                                                                         // 6756
  constructor: function(editor) {                                                                                      // 6757
    this.editor   = editor;                                                                                            // 6758
    this.composer = editor.composer;                                                                                   // 6759
    this.doc      = this.composer.doc;                                                                                 // 6760
  },                                                                                                                   // 6761
                                                                                                                       // 6762
  /**                                                                                                                  // 6763
   * Check whether the browser supports the given command                                                              // 6764
   *                                                                                                                   // 6765
   * @param {String} command The command string which to check (eg. "bold", "italic", "insertUnorderedList")           // 6766
   * @example                                                                                                          // 6767
   *    commands.supports("createLink");                                                                               // 6768
   */                                                                                                                  // 6769
  support: function(command) {                                                                                         // 6770
    return wysihtml5.browser.supportsCommand(this.doc, command);                                                       // 6771
  },                                                                                                                   // 6772
                                                                                                                       // 6773
  /**                                                                                                                  // 6774
   * Check whether the browser supports the given command                                                              // 6775
   *                                                                                                                   // 6776
   * @param {String} command The command string which to execute (eg. "bold", "italic", "insertUnorderedList")         // 6777
   * @param {String} [value] The command value parameter, needed for some commands ("createLink", "insertImage", ...), optional for commands that don't require one ("bold", "underline", ...)
   * @example                                                                                                          // 6779
   *    commands.exec("insertImage", "http://a1.twimg.com/profile_images/113868655/schrei_twitter_reasonably_small.jpg");
   */                                                                                                                  // 6781
  exec: function(command, value) {                                                                                     // 6782
    var obj     = wysihtml5.commands[command],                                                                         // 6783
        args    = wysihtml5.lang.array(arguments).get(),                                                               // 6784
        method  = obj && obj.exec,                                                                                     // 6785
        result  = null;                                                                                                // 6786
                                                                                                                       // 6787
    this.editor.fire("beforecommand:composer");                                                                        // 6788
                                                                                                                       // 6789
    if (method) {                                                                                                      // 6790
      args.unshift(this.composer);                                                                                     // 6791
      result = method.apply(obj, args);                                                                                // 6792
    } else {                                                                                                           // 6793
      try {                                                                                                            // 6794
        // try/catch for buggy firefox                                                                                 // 6795
        result = this.doc.execCommand(command, false, value);                                                          // 6796
      } catch(e) {}                                                                                                    // 6797
    }                                                                                                                  // 6798
                                                                                                                       // 6799
    this.editor.fire("aftercommand:composer");                                                                         // 6800
    return result;                                                                                                     // 6801
  },                                                                                                                   // 6802
                                                                                                                       // 6803
  /**                                                                                                                  // 6804
   * Check whether the current command is active                                                                       // 6805
   * If the caret is within a bold text, then calling this with command "bold" should return true                      // 6806
   *                                                                                                                   // 6807
   * @param {String} command The command string which to check (eg. "bold", "italic", "insertUnorderedList")           // 6808
   * @param {String} [commandValue] The command value parameter (eg. for "insertImage" the image src)                  // 6809
   * @return {Boolean} Whether the command is active                                                                   // 6810
   * @example                                                                                                          // 6811
   *    var isCurrentSelectionBold = commands.state("bold");                                                           // 6812
   */                                                                                                                  // 6813
  state: function(command, commandValue) {                                                                             // 6814
    var obj     = wysihtml5.commands[command],                                                                         // 6815
        args    = wysihtml5.lang.array(arguments).get(),                                                               // 6816
        method  = obj && obj.state;                                                                                    // 6817
    if (method) {                                                                                                      // 6818
      args.unshift(this.composer);                                                                                     // 6819
      return method.apply(obj, args);                                                                                  // 6820
    } else {                                                                                                           // 6821
      try {                                                                                                            // 6822
        // try/catch for buggy firefox                                                                                 // 6823
        return this.doc.queryCommandState(command);                                                                    // 6824
      } catch(e) {                                                                                                     // 6825
        return false;                                                                                                  // 6826
      }                                                                                                                // 6827
    }                                                                                                                  // 6828
  },                                                                                                                   // 6829
                                                                                                                       // 6830
  /**                                                                                                                  // 6831
   * Get the current command's value                                                                                   // 6832
   *                                                                                                                   // 6833
   * @param {String} command The command string which to check (eg. "formatBlock")                                     // 6834
   * @return {String} The command value                                                                                // 6835
   * @example                                                                                                          // 6836
   *    var currentBlockElement = commands.value("formatBlock");                                                       // 6837
   */                                                                                                                  // 6838
  value: function(command) {                                                                                           // 6839
    var obj     = wysihtml5.commands[command],                                                                         // 6840
        method  = obj && obj.value;                                                                                    // 6841
    if (method) {                                                                                                      // 6842
      return method.call(obj, this.composer, command);                                                                 // 6843
    } else {                                                                                                           // 6844
      try {                                                                                                            // 6845
        // try/catch for buggy firefox                                                                                 // 6846
        return this.doc.queryCommandValue(command);                                                                    // 6847
      } catch(e) {                                                                                                     // 6848
        return null;                                                                                                   // 6849
      }                                                                                                                // 6850
    }                                                                                                                  // 6851
  }                                                                                                                    // 6852
});                                                                                                                    // 6853
(function(wysihtml5) {                                                                                                 // 6854
  var undef;                                                                                                           // 6855
                                                                                                                       // 6856
  wysihtml5.commands.bold = {                                                                                          // 6857
    exec: function(composer, command) {                                                                                // 6858
      return wysihtml5.commands.formatInline.exec(composer, command, "b");                                             // 6859
    },                                                                                                                 // 6860
                                                                                                                       // 6861
    state: function(composer, command, color) {                                                                        // 6862
      // element.ownerDocument.queryCommandState("bold") results:                                                      // 6863
      // firefox: only <b>                                                                                             // 6864
      // chrome:  <b>, <strong>, <h1>, <h2>, ...                                                                       // 6865
      // ie:      <b>, <strong>                                                                                        // 6866
      // opera:   <b>, <strong>                                                                                        // 6867
      return wysihtml5.commands.formatInline.state(composer, command, "b");                                            // 6868
    },                                                                                                                 // 6869
                                                                                                                       // 6870
    value: function() {                                                                                                // 6871
      return undef;                                                                                                    // 6872
    }                                                                                                                  // 6873
  };                                                                                                                   // 6874
})(wysihtml5);                                                                                                         // 6875
                                                                                                                       // 6876
(function(wysihtml5) {                                                                                                 // 6877
  var undef,                                                                                                           // 6878
      NODE_NAME = "A",                                                                                                 // 6879
      dom       = wysihtml5.dom;                                                                                       // 6880
                                                                                                                       // 6881
  function _removeFormat(composer, anchors) {                                                                          // 6882
    var length  = anchors.length,                                                                                      // 6883
        i       = 0,                                                                                                   // 6884
        anchor,                                                                                                        // 6885
        codeElement,                                                                                                   // 6886
        textContent;                                                                                                   // 6887
    for (; i<length; i++) {                                                                                            // 6888
      anchor      = anchors[i];                                                                                        // 6889
      codeElement = dom.getParentElement(anchor, { nodeName: "code" });                                                // 6890
      textContent = dom.getTextContent(anchor);                                                                        // 6891
                                                                                                                       // 6892
      // if <a> contains url-like text content, rename it to <code> to prevent re-autolinking                          // 6893
      // else replace <a> with its childNodes                                                                          // 6894
      if (textContent.match(dom.autoLink.URL_REG_EXP) && !codeElement) {                                               // 6895
        // <code> element is used to prevent later auto-linking of the content                                         // 6896
        codeElement = dom.renameElement(anchor, "code");                                                               // 6897
      } else {                                                                                                         // 6898
        dom.replaceWithChildNodes(anchor);                                                                             // 6899
      }                                                                                                                // 6900
    }                                                                                                                  // 6901
  }                                                                                                                    // 6902
                                                                                                                       // 6903
  function _format(composer, attributes) {                                                                             // 6904
    var doc             = composer.doc,                                                                                // 6905
        tempClass       = "_wysihtml5-temp-" + (+new Date()),                                                          // 6906
        tempClassRegExp = /non-matching-class/g,                                                                       // 6907
        i               = 0,                                                                                           // 6908
        length,                                                                                                        // 6909
        anchors,                                                                                                       // 6910
        anchor,                                                                                                        // 6911
        hasElementChild,                                                                                               // 6912
        isEmpty,                                                                                                       // 6913
        elementToSetCaretAfter,                                                                                        // 6914
        textContent,                                                                                                   // 6915
        whiteSpace,                                                                                                    // 6916
        j;                                                                                                             // 6917
    wysihtml5.commands.formatInline.exec(composer, undef, NODE_NAME, tempClass, tempClassRegExp);                      // 6918
    anchors = doc.querySelectorAll(NODE_NAME + "." + tempClass);                                                       // 6919
    length  = anchors.length;                                                                                          // 6920
    for (; i<length; i++) {                                                                                            // 6921
      anchor = anchors[i];                                                                                             // 6922
      anchor.removeAttribute("class");                                                                                 // 6923
      for (j in attributes) {                                                                                          // 6924
        anchor.setAttribute(j, attributes[j]);                                                                         // 6925
      }                                                                                                                // 6926
    }                                                                                                                  // 6927
                                                                                                                       // 6928
    elementToSetCaretAfter = anchor;                                                                                   // 6929
    if (length === 1) {                                                                                                // 6930
      textContent = dom.getTextContent(anchor);                                                                        // 6931
      hasElementChild = !!anchor.querySelector("*");                                                                   // 6932
      isEmpty = textContent === "" || textContent === wysihtml5.INVISIBLE_SPACE;                                       // 6933
      if (!hasElementChild && isEmpty) {                                                                               // 6934
        dom.setTextContent(anchor, attributes.text || anchor.href);                                                    // 6935
        whiteSpace = doc.createTextNode(" ");                                                                          // 6936
        composer.selection.setAfter(anchor);                                                                           // 6937
        composer.selection.insertNode(whiteSpace);                                                                     // 6938
        elementToSetCaretAfter = whiteSpace;                                                                           // 6939
      }                                                                                                                // 6940
    }                                                                                                                  // 6941
    composer.selection.setAfter(elementToSetCaretAfter);                                                               // 6942
  }                                                                                                                    // 6943
                                                                                                                       // 6944
  wysihtml5.commands.createLink = {                                                                                    // 6945
    /**                                                                                                                // 6946
     * TODO: Use HTMLApplier or formatInline here                                                                      // 6947
     *                                                                                                                 // 6948
     * Turns selection into a link                                                                                     // 6949
     * If selection is already a link, it removes the link and wraps it with a <code> element                          // 6950
     * The <code> element is needed to avoid auto linking                                                              // 6951
     *                                                                                                                 // 6952
     * @example                                                                                                        // 6953
     *    // either ...                                                                                                // 6954
     *    wysihtml5.commands.createLink.exec(composer, "createLink", "http://www.google.de");                          // 6955
     *    // ... or ...                                                                                                // 6956
     *    wysihtml5.commands.createLink.exec(composer, "createLink", { href: "http://www.google.de", target: "_blank" });
     */                                                                                                                // 6958
    exec: function(composer, command, value) {                                                                         // 6959
      var anchors = this.state(composer, command);                                                                     // 6960
      if (anchors) {                                                                                                   // 6961
        // Selection contains links                                                                                    // 6962
        composer.selection.executeAndRestore(function() {                                                              // 6963
          _removeFormat(composer, anchors);                                                                            // 6964
        });                                                                                                            // 6965
      } else {                                                                                                         // 6966
        // Create links                                                                                                // 6967
        value = typeof(value) === "object" ? value : { href: value };                                                  // 6968
        _format(composer, value);                                                                                      // 6969
      }                                                                                                                // 6970
    },                                                                                                                 // 6971
                                                                                                                       // 6972
    state: function(composer, command) {                                                                               // 6973
      return wysihtml5.commands.formatInline.state(composer, command, "A");                                            // 6974
    },                                                                                                                 // 6975
                                                                                                                       // 6976
    value: function() {                                                                                                // 6977
      return undef;                                                                                                    // 6978
    }                                                                                                                  // 6979
  };                                                                                                                   // 6980
})(wysihtml5);/**                                                                                                      // 6981
 * document.execCommand("fontSize") will create either inline styles (firefox, chrome) or use font tags                // 6982
 * which we don't want                                                                                                 // 6983
 * Instead we set a css class                                                                                          // 6984
 */                                                                                                                    // 6985
(function(wysihtml5) {                                                                                                 // 6986
  var undef,                                                                                                           // 6987
      REG_EXP = /wysiwyg-font-size-[a-z\-]+/g;                                                                         // 6988
                                                                                                                       // 6989
  wysihtml5.commands.fontSize = {                                                                                      // 6990
    exec: function(composer, command, size) {                                                                          // 6991
      return wysihtml5.commands.formatInline.exec(composer, command, "span", "wysiwyg-font-size-" + size, REG_EXP);    // 6992
    },                                                                                                                 // 6993
                                                                                                                       // 6994
    state: function(composer, command, size) {                                                                         // 6995
      return wysihtml5.commands.formatInline.state(composer, command, "span", "wysiwyg-font-size-" + size, REG_EXP);   // 6996
    },                                                                                                                 // 6997
                                                                                                                       // 6998
    value: function() {                                                                                                // 6999
      return undef;                                                                                                    // 7000
    }                                                                                                                  // 7001
  };                                                                                                                   // 7002
})(wysihtml5);                                                                                                         // 7003
/**                                                                                                                    // 7004
 * document.execCommand("foreColor") will create either inline styles (firefox, chrome) or use font tags               // 7005
 * which we don't want                                                                                                 // 7006
 * Instead we set a css class                                                                                          // 7007
 */                                                                                                                    // 7008
(function(wysihtml5) {                                                                                                 // 7009
  var undef,                                                                                                           // 7010
      REG_EXP = /wysiwyg-color-[a-z]+/g;                                                                               // 7011
                                                                                                                       // 7012
  wysihtml5.commands.foreColor = {                                                                                     // 7013
    exec: function(composer, command, color) {                                                                         // 7014
      return wysihtml5.commands.formatInline.exec(composer, command, "span", "wysiwyg-color-" + color, REG_EXP);       // 7015
    },                                                                                                                 // 7016
                                                                                                                       // 7017
    state: function(composer, command, color) {                                                                        // 7018
      return wysihtml5.commands.formatInline.state(composer, command, "span", "wysiwyg-color-" + color, REG_EXP);      // 7019
    },                                                                                                                 // 7020
                                                                                                                       // 7021
    value: function() {                                                                                                // 7022
      return undef;                                                                                                    // 7023
    }                                                                                                                  // 7024
  };                                                                                                                   // 7025
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7026
  var undef,                                                                                                           // 7027
      dom                     = wysihtml5.dom,                                                                         // 7028
      DEFAULT_NODE_NAME       = "DIV",                                                                                 // 7029
      // Following elements are grouped                                                                                // 7030
      // when the caret is within a H1 and the H4 is invoked, the H1 should turn into H4                               // 7031
      // instead of creating a H4 within a H1 which would result in semantically invalid html                          // 7032
      BLOCK_ELEMENTS_GROUP    = ["H1", "H2", "H3", "H4", "H5", "H6", "P", "BLOCKQUOTE", DEFAULT_NODE_NAME];            // 7033
                                                                                                                       // 7034
  /**                                                                                                                  // 7035
   * Remove similiar classes (based on classRegExp)                                                                    // 7036
   * and add the desired class name                                                                                    // 7037
   */                                                                                                                  // 7038
  function _addClass(element, className, classRegExp) {                                                                // 7039
    if (element.className) {                                                                                           // 7040
      _removeClass(element, classRegExp);                                                                              // 7041
      element.className += " " + className;                                                                            // 7042
    } else {                                                                                                           // 7043
      element.className = className;                                                                                   // 7044
    }                                                                                                                  // 7045
  }                                                                                                                    // 7046
                                                                                                                       // 7047
  function _removeClass(element, classRegExp) {                                                                        // 7048
    element.className = element.className.replace(classRegExp, "");                                                    // 7049
  }                                                                                                                    // 7050
                                                                                                                       // 7051
  /**                                                                                                                  // 7052
   * Check whether given node is a text node and whether it's empty                                                    // 7053
   */                                                                                                                  // 7054
  function _isBlankTextNode(node) {                                                                                    // 7055
    return node.nodeType === wysihtml5.TEXT_NODE && !wysihtml5.lang.string(node.data).trim();                          // 7056
  }                                                                                                                    // 7057
                                                                                                                       // 7058
  /**                                                                                                                  // 7059
   * Returns previous sibling node that is not a blank text node                                                       // 7060
   */                                                                                                                  // 7061
  function _getPreviousSiblingThatIsNotBlank(node) {                                                                   // 7062
    var previousSibling = node.previousSibling;                                                                        // 7063
    while (previousSibling && _isBlankTextNode(previousSibling)) {                                                     // 7064
      previousSibling = previousSibling.previousSibling;                                                               // 7065
    }                                                                                                                  // 7066
    return previousSibling;                                                                                            // 7067
  }                                                                                                                    // 7068
                                                                                                                       // 7069
  /**                                                                                                                  // 7070
   * Returns next sibling node that is not a blank text node                                                           // 7071
   */                                                                                                                  // 7072
  function _getNextSiblingThatIsNotBlank(node) {                                                                       // 7073
    var nextSibling = node.nextSibling;                                                                                // 7074
    while (nextSibling && _isBlankTextNode(nextSibling)) {                                                             // 7075
      nextSibling = nextSibling.nextSibling;                                                                           // 7076
    }                                                                                                                  // 7077
    return nextSibling;                                                                                                // 7078
  }                                                                                                                    // 7079
                                                                                                                       // 7080
  /**                                                                                                                  // 7081
   * Adds line breaks before and after the given node if the previous and next siblings                                // 7082
   * aren't already causing a visual line break (block element or <br>)                                                // 7083
   */                                                                                                                  // 7084
  function _addLineBreakBeforeAndAfter(node) {                                                                         // 7085
    var doc             = node.ownerDocument,                                                                          // 7086
        nextSibling     = _getNextSiblingThatIsNotBlank(node),                                                         // 7087
        previousSibling = _getPreviousSiblingThatIsNotBlank(node);                                                     // 7088
                                                                                                                       // 7089
    if (nextSibling && !_isLineBreakOrBlockElement(nextSibling)) {                                                     // 7090
      node.parentNode.insertBefore(doc.createElement("br"), nextSibling);                                              // 7091
    }                                                                                                                  // 7092
    if (previousSibling && !_isLineBreakOrBlockElement(previousSibling)) {                                             // 7093
      node.parentNode.insertBefore(doc.createElement("br"), node);                                                     // 7094
    }                                                                                                                  // 7095
  }                                                                                                                    // 7096
                                                                                                                       // 7097
  /**                                                                                                                  // 7098
   * Removes line breaks before and after the given node                                                               // 7099
   */                                                                                                                  // 7100
  function _removeLineBreakBeforeAndAfter(node) {                                                                      // 7101
    var nextSibling     = _getNextSiblingThatIsNotBlank(node),                                                         // 7102
        previousSibling = _getPreviousSiblingThatIsNotBlank(node);                                                     // 7103
                                                                                                                       // 7104
    if (nextSibling && _isLineBreak(nextSibling)) {                                                                    // 7105
      nextSibling.parentNode.removeChild(nextSibling);                                                                 // 7106
    }                                                                                                                  // 7107
    if (previousSibling && _isLineBreak(previousSibling)) {                                                            // 7108
      previousSibling.parentNode.removeChild(previousSibling);                                                         // 7109
    }                                                                                                                  // 7110
  }                                                                                                                    // 7111
                                                                                                                       // 7112
  function _removeLastChildIfLineBreak(node) {                                                                         // 7113
    var lastChild = node.lastChild;                                                                                    // 7114
    if (lastChild && _isLineBreak(lastChild)) {                                                                        // 7115
      lastChild.parentNode.removeChild(lastChild);                                                                     // 7116
    }                                                                                                                  // 7117
  }                                                                                                                    // 7118
                                                                                                                       // 7119
  function _isLineBreak(node) {                                                                                        // 7120
    return node.nodeName === "BR";                                                                                     // 7121
  }                                                                                                                    // 7122
                                                                                                                       // 7123
  /**                                                                                                                  // 7124
   * Checks whether the elment causes a visual line break                                                              // 7125
   * (<br> or block elements)                                                                                          // 7126
   */                                                                                                                  // 7127
  function _isLineBreakOrBlockElement(element) {                                                                       // 7128
    if (_isLineBreak(element)) {                                                                                       // 7129
      return true;                                                                                                     // 7130
    }                                                                                                                  // 7131
                                                                                                                       // 7132
    if (dom.getStyle("display").from(element) === "block") {                                                           // 7133
      return true;                                                                                                     // 7134
    }                                                                                                                  // 7135
                                                                                                                       // 7136
    return false;                                                                                                      // 7137
  }                                                                                                                    // 7138
                                                                                                                       // 7139
  /**                                                                                                                  // 7140
   * Execute native query command                                                                                      // 7141
   * and if necessary modify the inserted node's className                                                             // 7142
   */                                                                                                                  // 7143
  function _execCommand(doc, command, nodeName, className) {                                                           // 7144
    if (className) {                                                                                                   // 7145
      var eventListener = dom.observe(doc, "DOMNodeInserted", function(event) {                                        // 7146
        var target = event.target,                                                                                     // 7147
            displayStyle;                                                                                              // 7148
        if (target.nodeType !== wysihtml5.ELEMENT_NODE) {                                                              // 7149
          return;                                                                                                      // 7150
        }                                                                                                              // 7151
        displayStyle = dom.getStyle("display").from(target);                                                           // 7152
        if (displayStyle.substr(0, 6) !== "inline") {                                                                  // 7153
          // Make sure that only block elements receive the given class                                                // 7154
          target.className += " " + className;                                                                         // 7155
        }                                                                                                              // 7156
      });                                                                                                              // 7157
    }                                                                                                                  // 7158
    doc.execCommand(command, false, nodeName);                                                                         // 7159
    if (eventListener) {                                                                                               // 7160
      eventListener.stop();                                                                                            // 7161
    }                                                                                                                  // 7162
  }                                                                                                                    // 7163
                                                                                                                       // 7164
  function _selectLineAndWrap(composer, element) {                                                                     // 7165
    composer.selection.selectLine();                                                                                   // 7166
    composer.selection.surround(element);                                                                              // 7167
    _removeLineBreakBeforeAndAfter(element);                                                                           // 7168
    _removeLastChildIfLineBreak(element);                                                                              // 7169
    composer.selection.selectNode(element);                                                                            // 7170
  }                                                                                                                    // 7171
                                                                                                                       // 7172
  function _hasClasses(element) {                                                                                      // 7173
    return !!wysihtml5.lang.string(element.className).trim();                                                          // 7174
  }                                                                                                                    // 7175
                                                                                                                       // 7176
  wysihtml5.commands.formatBlock = {                                                                                   // 7177
    exec: function(composer, command, nodeName, className, classRegExp) {                                              // 7178
      var doc          = composer.doc,                                                                                 // 7179
          blockElement = this.state(composer, command, nodeName, className, classRegExp),                              // 7180
          selectedNode;                                                                                                // 7181
                                                                                                                       // 7182
      nodeName = typeof(nodeName) === "string" ? nodeName.toUpperCase() : nodeName;                                    // 7183
                                                                                                                       // 7184
      if (blockElement) {                                                                                              // 7185
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7186
          if (classRegExp) {                                                                                           // 7187
            _removeClass(blockElement, classRegExp);                                                                   // 7188
          }                                                                                                            // 7189
          var hasClasses = _hasClasses(blockElement);                                                                  // 7190
          if (!hasClasses && blockElement.nodeName === (nodeName || DEFAULT_NODE_NAME)) {                              // 7191
            // Insert a line break afterwards and beforewards when there are siblings                                  // 7192
            // that are not of type line break or block element                                                        // 7193
            _addLineBreakBeforeAndAfter(blockElement);                                                                 // 7194
            dom.replaceWithChildNodes(blockElement);                                                                   // 7195
          } else if (hasClasses) {                                                                                     // 7196
            // Make sure that styling is kept by renaming the element to <div> and copying over the class name         // 7197
            dom.renameElement(blockElement, DEFAULT_NODE_NAME);                                                        // 7198
          }                                                                                                            // 7199
        });                                                                                                            // 7200
        return;                                                                                                        // 7201
      }                                                                                                                // 7202
                                                                                                                       // 7203
      // Find similiar block element and rename it (<h2 class="foo"></h2>  =>  <h1 class="foo"></h1>)                  // 7204
      if (nodeName === null || wysihtml5.lang.array(BLOCK_ELEMENTS_GROUP).contains(nodeName)) {                        // 7205
        selectedNode = composer.selection.getSelectedNode();                                                           // 7206
        blockElement = dom.getParentElement(selectedNode, {                                                            // 7207
          nodeName: BLOCK_ELEMENTS_GROUP                                                                               // 7208
        });                                                                                                            // 7209
                                                                                                                       // 7210
        if (blockElement) {                                                                                            // 7211
          composer.selection.executeAndRestoreSimple(function() {                                                      // 7212
            // Rename current block element to new block element and add class                                         // 7213
            if (nodeName) {                                                                                            // 7214
              blockElement = dom.renameElement(blockElement, nodeName);                                                // 7215
            }                                                                                                          // 7216
            if (className) {                                                                                           // 7217
              _addClass(blockElement, className, classRegExp);                                                         // 7218
            }                                                                                                          // 7219
          });                                                                                                          // 7220
          return;                                                                                                      // 7221
        }                                                                                                              // 7222
      }                                                                                                                // 7223
                                                                                                                       // 7224
      if (composer.commands.support(command)) {                                                                        // 7225
        _execCommand(doc, command, nodeName || DEFAULT_NODE_NAME, className);                                          // 7226
        return;                                                                                                        // 7227
      }                                                                                                                // 7228
                                                                                                                       // 7229
      blockElement = doc.createElement(nodeName || DEFAULT_NODE_NAME);                                                 // 7230
      if (className) {                                                                                                 // 7231
        blockElement.className = className;                                                                            // 7232
      }                                                                                                                // 7233
      _selectLineAndWrap(composer, blockElement);                                                                      // 7234
    },                                                                                                                 // 7235
                                                                                                                       // 7236
    state: function(composer, command, nodeName, className, classRegExp) {                                             // 7237
      nodeName = typeof(nodeName) === "string" ? nodeName.toUpperCase() : nodeName;                                    // 7238
      var selectedNode = composer.selection.getSelectedNode();                                                         // 7239
      return dom.getParentElement(selectedNode, {                                                                      // 7240
        nodeName:     nodeName,                                                                                        // 7241
        className:    className,                                                                                       // 7242
        classRegExp:  classRegExp                                                                                      // 7243
      });                                                                                                              // 7244
    },                                                                                                                 // 7245
                                                                                                                       // 7246
    value: function() {                                                                                                // 7247
      return undef;                                                                                                    // 7248
    }                                                                                                                  // 7249
  };                                                                                                                   // 7250
})(wysihtml5);/**                                                                                                      // 7251
 * formatInline scenarios for tag "B" (| = caret, |foo| = selected text)                                               // 7252
 *                                                                                                                     // 7253
 *   #1 caret in unformatted text:                                                                                     // 7254
 *      abcdefg|                                                                                                       // 7255
 *   output:                                                                                                           // 7256
 *      abcdefg<b>|</b>                                                                                                // 7257
 *                                                                                                                     // 7258
 *   #2 unformatted text selected:                                                                                     // 7259
 *      abc|deg|h                                                                                                      // 7260
 *   output:                                                                                                           // 7261
 *      abc<b>|deg|</b>h                                                                                               // 7262
 *                                                                                                                     // 7263
 *   #3 unformatted text selected across boundaries:                                                                   // 7264
 *      ab|c <span>defg|h</span>                                                                                       // 7265
 *   output:                                                                                                           // 7266
 *      ab<b>|c </b><span><b>defg</b>|h</span>                                                                         // 7267
 *                                                                                                                     // 7268
 *   #4 formatted text entirely selected                                                                               // 7269
 *      <b>|abc|</b>                                                                                                   // 7270
 *   output:                                                                                                           // 7271
 *      |abc|                                                                                                          // 7272
 *                                                                                                                     // 7273
 *   #5 formatted text partially selected                                                                              // 7274
 *      <b>ab|c|</b>                                                                                                   // 7275
 *   output:                                                                                                           // 7276
 *      <b>ab</b>|c|                                                                                                   // 7277
 *                                                                                                                     // 7278
 *   #6 formatted text selected across boundaries                                                                      // 7279
 *      <span>ab|c</span> <b>de|fgh</b>                                                                                // 7280
 *   output:                                                                                                           // 7281
 *      <span>ab|c</span> de|<b>fgh</b>                                                                                // 7282
 */                                                                                                                    // 7283
(function(wysihtml5) {                                                                                                 // 7284
  var undef,                                                                                                           // 7285
      // Treat <b> as <strong> and vice versa                                                                          // 7286
      ALIAS_MAPPING = {                                                                                                // 7287
        "strong": "b",                                                                                                 // 7288
        "em":     "i",                                                                                                 // 7289
        "b":      "strong",                                                                                            // 7290
        "i":      "em"                                                                                                 // 7291
      },                                                                                                               // 7292
      htmlApplier = {};                                                                                                // 7293
                                                                                                                       // 7294
  function _getTagNames(tagName) {                                                                                     // 7295
    var alias = ALIAS_MAPPING[tagName];                                                                                // 7296
    return alias ? [tagName.toLowerCase(), alias.toLowerCase()] : [tagName.toLowerCase()];                             // 7297
  }                                                                                                                    // 7298
                                                                                                                       // 7299
  function _getApplier(tagName, className, classRegExp) {                                                              // 7300
    var identifier = tagName + ":" + className;                                                                        // 7301
    if (!htmlApplier[identifier]) {                                                                                    // 7302
      htmlApplier[identifier] = new wysihtml5.selection.HTMLApplier(_getTagNames(tagName), className, classRegExp, true);
    }                                                                                                                  // 7304
    return htmlApplier[identifier];                                                                                    // 7305
  }                                                                                                                    // 7306
                                                                                                                       // 7307
  wysihtml5.commands.formatInline = {                                                                                  // 7308
    exec: function(composer, command, tagName, className, classRegExp) {                                               // 7309
      var range = composer.selection.getRange();                                                                       // 7310
      if (!range) {                                                                                                    // 7311
        return false;                                                                                                  // 7312
      }                                                                                                                // 7313
      _getApplier(tagName, className, classRegExp).toggleRange(range);                                                 // 7314
      composer.selection.setSelection(range);                                                                          // 7315
    },                                                                                                                 // 7316
                                                                                                                       // 7317
    state: function(composer, command, tagName, className, classRegExp) {                                              // 7318
      var doc           = composer.doc,                                                                                // 7319
          aliasTagName  = ALIAS_MAPPING[tagName] || tagName,                                                           // 7320
          range;                                                                                                       // 7321
                                                                                                                       // 7322
      // Check whether the document contains a node with the desired tagName                                           // 7323
      if (!wysihtml5.dom.hasElementWithTagName(doc, tagName) &&                                                        // 7324
          !wysihtml5.dom.hasElementWithTagName(doc, aliasTagName)) {                                                   // 7325
        return false;                                                                                                  // 7326
      }                                                                                                                // 7327
                                                                                                                       // 7328
       // Check whether the document contains a node with the desired className                                        // 7329
      if (className && !wysihtml5.dom.hasElementWithClassName(doc, className)) {                                       // 7330
         return false;                                                                                                 // 7331
      }                                                                                                                // 7332
                                                                                                                       // 7333
      range = composer.selection.getRange();                                                                           // 7334
      if (!range) {                                                                                                    // 7335
        return false;                                                                                                  // 7336
      }                                                                                                                // 7337
                                                                                                                       // 7338
      return _getApplier(tagName, className, classRegExp).isAppliedToRange(range);                                     // 7339
    },                                                                                                                 // 7340
                                                                                                                       // 7341
    value: function() {                                                                                                // 7342
      return undef;                                                                                                    // 7343
    }                                                                                                                  // 7344
  };                                                                                                                   // 7345
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7346
  var undef;                                                                                                           // 7347
                                                                                                                       // 7348
  wysihtml5.commands.insertHTML = {                                                                                    // 7349
    exec: function(composer, command, html) {                                                                          // 7350
      if (composer.commands.support(command)) {                                                                        // 7351
        composer.doc.execCommand(command, false, html);                                                                // 7352
      } else {                                                                                                         // 7353
        composer.selection.insertHTML(html);                                                                           // 7354
      }                                                                                                                // 7355
    },                                                                                                                 // 7356
                                                                                                                       // 7357
    state: function() {                                                                                                // 7358
      return false;                                                                                                    // 7359
    },                                                                                                                 // 7360
                                                                                                                       // 7361
    value: function() {                                                                                                // 7362
      return undef;                                                                                                    // 7363
    }                                                                                                                  // 7364
  };                                                                                                                   // 7365
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7366
  var NODE_NAME = "IMG";                                                                                               // 7367
                                                                                                                       // 7368
  wysihtml5.commands.insertImage = {                                                                                   // 7369
    /**                                                                                                                // 7370
     * Inserts an <img>                                                                                                // 7371
     * If selection is already an image link, it removes it                                                            // 7372
     *                                                                                                                 // 7373
     * @example                                                                                                        // 7374
     *    // either ...                                                                                                // 7375
     *    wysihtml5.commands.insertImage.exec(composer, "insertImage", "http://www.google.de/logo.jpg");               // 7376
     *    // ... or ...                                                                                                // 7377
     *    wysihtml5.commands.insertImage.exec(composer, "insertImage", { src: "http://www.google.de/logo.jpg", title: "foo" });
     */                                                                                                                // 7379
    exec: function(composer, command, value) {                                                                         // 7380
      value = typeof(value) === "object" ? value : { src: value };                                                     // 7381
                                                                                                                       // 7382
      var doc     = composer.doc,                                                                                      // 7383
          image   = this.state(composer),                                                                              // 7384
          textNode,                                                                                                    // 7385
          i,                                                                                                           // 7386
          parent;                                                                                                      // 7387
                                                                                                                       // 7388
      if (image) {                                                                                                     // 7389
        // Image already selected, set the caret before it and delete it                                               // 7390
        composer.selection.setBefore(image);                                                                           // 7391
        parent = image.parentNode;                                                                                     // 7392
        parent.removeChild(image);                                                                                     // 7393
                                                                                                                       // 7394
        // and it's parent <a> too if it hasn't got any other relevant child nodes                                     // 7395
        wysihtml5.dom.removeEmptyTextNodes(parent);                                                                    // 7396
        if (parent.nodeName === "A" && !parent.firstChild) {                                                           // 7397
          composer.selection.setAfter(parent);                                                                         // 7398
          parent.parentNode.removeChild(parent);                                                                       // 7399
        }                                                                                                              // 7400
                                                                                                                       // 7401
        // firefox and ie sometimes don't remove the image handles, even though the image got removed                  // 7402
        wysihtml5.quirks.redraw(composer.element);                                                                     // 7403
        return;                                                                                                        // 7404
      }                                                                                                                // 7405
                                                                                                                       // 7406
      image = doc.createElement(NODE_NAME);                                                                            // 7407
                                                                                                                       // 7408
      for (i in value) {                                                                                               // 7409
        image[i] = value[i];                                                                                           // 7410
      }                                                                                                                // 7411
                                                                                                                       // 7412
      composer.selection.insertNode(image);                                                                            // 7413
      if (wysihtml5.browser.hasProblemsSettingCaretAfterImg()) {                                                       // 7414
        textNode = doc.createTextNode(wysihtml5.INVISIBLE_SPACE);                                                      // 7415
        composer.selection.insertNode(textNode);                                                                       // 7416
        composer.selection.setAfter(textNode);                                                                         // 7417
      } else {                                                                                                         // 7418
        composer.selection.setAfter(image);                                                                            // 7419
      }                                                                                                                // 7420
    },                                                                                                                 // 7421
                                                                                                                       // 7422
    state: function(composer) {                                                                                        // 7423
      var doc = composer.doc,                                                                                          // 7424
          selectedNode,                                                                                                // 7425
          text,                                                                                                        // 7426
          imagesInSelection;                                                                                           // 7427
                                                                                                                       // 7428
      if (!wysihtml5.dom.hasElementWithTagName(doc, NODE_NAME)) {                                                      // 7429
        return false;                                                                                                  // 7430
      }                                                                                                                // 7431
                                                                                                                       // 7432
      selectedNode = composer.selection.getSelectedNode();                                                             // 7433
      if (!selectedNode) {                                                                                             // 7434
        return false;                                                                                                  // 7435
      }                                                                                                                // 7436
                                                                                                                       // 7437
      if (selectedNode.nodeName === NODE_NAME) {                                                                       // 7438
        // This works perfectly in IE                                                                                  // 7439
        return selectedNode;                                                                                           // 7440
      }                                                                                                                // 7441
                                                                                                                       // 7442
      if (selectedNode.nodeType !== wysihtml5.ELEMENT_NODE) {                                                          // 7443
        return false;                                                                                                  // 7444
      }                                                                                                                // 7445
                                                                                                                       // 7446
      text = composer.selection.getText();                                                                             // 7447
      text = wysihtml5.lang.string(text).trim();                                                                       // 7448
      if (text) {                                                                                                      // 7449
        return false;                                                                                                  // 7450
      }                                                                                                                // 7451
                                                                                                                       // 7452
      imagesInSelection = composer.selection.getNodes(wysihtml5.ELEMENT_NODE, function(node) {                         // 7453
        return node.nodeName === "IMG";                                                                                // 7454
      });                                                                                                              // 7455
                                                                                                                       // 7456
      if (imagesInSelection.length !== 1) {                                                                            // 7457
        return false;                                                                                                  // 7458
      }                                                                                                                // 7459
                                                                                                                       // 7460
      return imagesInSelection[0];                                                                                     // 7461
    },                                                                                                                 // 7462
                                                                                                                       // 7463
    value: function(composer) {                                                                                        // 7464
      var image = this.state(composer);                                                                                // 7465
      return image && image.src;                                                                                       // 7466
    }                                                                                                                  // 7467
  };                                                                                                                   // 7468
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7469
  var undef,                                                                                                           // 7470
      LINE_BREAK = "<br>" + (wysihtml5.browser.needsSpaceAfterLineBreak() ? " " : "");                                 // 7471
                                                                                                                       // 7472
  wysihtml5.commands.insertLineBreak = {                                                                               // 7473
    exec: function(composer, command) {                                                                                // 7474
      if (composer.commands.support(command)) {                                                                        // 7475
        composer.doc.execCommand(command, false, null);                                                                // 7476
        if (!wysihtml5.browser.autoScrollsToCaret()) {                                                                 // 7477
          composer.selection.scrollIntoView();                                                                         // 7478
        }                                                                                                              // 7479
      } else {                                                                                                         // 7480
        composer.commands.exec("insertHTML", LINE_BREAK);                                                              // 7481
      }                                                                                                                // 7482
    },                                                                                                                 // 7483
                                                                                                                       // 7484
    state: function() {                                                                                                // 7485
      return false;                                                                                                    // 7486
    },                                                                                                                 // 7487
                                                                                                                       // 7488
    value: function() {                                                                                                // 7489
      return undef;                                                                                                    // 7490
    }                                                                                                                  // 7491
  };                                                                                                                   // 7492
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7493
  var undef;                                                                                                           // 7494
                                                                                                                       // 7495
  wysihtml5.commands.insertOrderedList = {                                                                             // 7496
    exec: function(composer, command) {                                                                                // 7497
      var doc           = composer.doc,                                                                                // 7498
          selectedNode  = composer.selection.getSelectedNode(),                                                        // 7499
          list          = wysihtml5.dom.getParentElement(selectedNode, { nodeName: "OL" }),                            // 7500
          otherList     = wysihtml5.dom.getParentElement(selectedNode, { nodeName: "UL" }),                            // 7501
          tempClassName =  "_wysihtml5-temp-" + new Date().getTime(),                                                  // 7502
          isEmpty,                                                                                                     // 7503
          tempElement;                                                                                                 // 7504
                                                                                                                       // 7505
      if (composer.commands.support(command)) {                                                                        // 7506
        doc.execCommand(command, false, null);                                                                         // 7507
        return;                                                                                                        // 7508
      }                                                                                                                // 7509
                                                                                                                       // 7510
      if (list) {                                                                                                      // 7511
        // Unwrap list                                                                                                 // 7512
        // <ol><li>foo</li><li>bar</li></ol>                                                                           // 7513
        // becomes:                                                                                                    // 7514
        // foo<br>bar<br>                                                                                              // 7515
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7516
          wysihtml5.dom.resolveList(list);                                                                             // 7517
        });                                                                                                            // 7518
      } else if (otherList) {                                                                                          // 7519
        // Turn an unordered list into an ordered list                                                                 // 7520
        // <ul><li>foo</li><li>bar</li></ul>                                                                           // 7521
        // becomes:                                                                                                    // 7522
        // <ol><li>foo</li><li>bar</li></ol>                                                                           // 7523
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7524
          wysihtml5.dom.renameElement(otherList, "ol");                                                                // 7525
        });                                                                                                            // 7526
      } else {                                                                                                         // 7527
        // Create list                                                                                                 // 7528
        composer.commands.exec("formatBlock", "div", tempClassName);                                                   // 7529
        tempElement = doc.querySelector("." + tempClassName);                                                          // 7530
        isEmpty = tempElement.innerHTML === "" || tempElement.innerHTML === wysihtml5.INVISIBLE_SPACE;                 // 7531
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7532
          list = wysihtml5.dom.convertToList(tempElement, "ol");                                                       // 7533
        });                                                                                                            // 7534
        if (isEmpty) {                                                                                                 // 7535
          composer.selection.selectNode(list.querySelector("li"));                                                     // 7536
        }                                                                                                              // 7537
      }                                                                                                                // 7538
    },                                                                                                                 // 7539
                                                                                                                       // 7540
    state: function(composer) {                                                                                        // 7541
      var selectedNode = composer.selection.getSelectedNode();                                                         // 7542
      return wysihtml5.dom.getParentElement(selectedNode, { nodeName: "OL" });                                         // 7543
    },                                                                                                                 // 7544
                                                                                                                       // 7545
    value: function() {                                                                                                // 7546
      return undef;                                                                                                    // 7547
    }                                                                                                                  // 7548
  };                                                                                                                   // 7549
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7550
  var undef;                                                                                                           // 7551
                                                                                                                       // 7552
  wysihtml5.commands.insertUnorderedList = {                                                                           // 7553
    exec: function(composer, command) {                                                                                // 7554
      var doc           = composer.doc,                                                                                // 7555
          selectedNode  = composer.selection.getSelectedNode(),                                                        // 7556
          list          = wysihtml5.dom.getParentElement(selectedNode, { nodeName: "UL" }),                            // 7557
          otherList     = wysihtml5.dom.getParentElement(selectedNode, { nodeName: "OL" }),                            // 7558
          tempClassName =  "_wysihtml5-temp-" + new Date().getTime(),                                                  // 7559
          isEmpty,                                                                                                     // 7560
          tempElement;                                                                                                 // 7561
                                                                                                                       // 7562
      if (composer.commands.support(command)) {                                                                        // 7563
        doc.execCommand(command, false, null);                                                                         // 7564
        return;                                                                                                        // 7565
      }                                                                                                                // 7566
                                                                                                                       // 7567
      if (list) {                                                                                                      // 7568
        // Unwrap list                                                                                                 // 7569
        // <ul><li>foo</li><li>bar</li></ul>                                                                           // 7570
        // becomes:                                                                                                    // 7571
        // foo<br>bar<br>                                                                                              // 7572
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7573
          wysihtml5.dom.resolveList(list);                                                                             // 7574
        });                                                                                                            // 7575
      } else if (otherList) {                                                                                          // 7576
        // Turn an ordered list into an unordered list                                                                 // 7577
        // <ol><li>foo</li><li>bar</li></ol>                                                                           // 7578
        // becomes:                                                                                                    // 7579
        // <ul><li>foo</li><li>bar</li></ul>                                                                           // 7580
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7581
          wysihtml5.dom.renameElement(otherList, "ul");                                                                // 7582
        });                                                                                                            // 7583
      } else {                                                                                                         // 7584
        // Create list                                                                                                 // 7585
        composer.commands.exec("formatBlock", "div", tempClassName);                                                   // 7586
        tempElement = doc.querySelector("." + tempClassName);                                                          // 7587
        isEmpty = tempElement.innerHTML === "" || tempElement.innerHTML === wysihtml5.INVISIBLE_SPACE;                 // 7588
        composer.selection.executeAndRestoreSimple(function() {                                                        // 7589
          list = wysihtml5.dom.convertToList(tempElement, "ul");                                                       // 7590
        });                                                                                                            // 7591
        if (isEmpty) {                                                                                                 // 7592
          composer.selection.selectNode(list.querySelector("li"));                                                     // 7593
        }                                                                                                              // 7594
      }                                                                                                                // 7595
    },                                                                                                                 // 7596
                                                                                                                       // 7597
    state: function(composer) {                                                                                        // 7598
      var selectedNode = composer.selection.getSelectedNode();                                                         // 7599
      return wysihtml5.dom.getParentElement(selectedNode, { nodeName: "UL" });                                         // 7600
    },                                                                                                                 // 7601
                                                                                                                       // 7602
    value: function() {                                                                                                // 7603
      return undef;                                                                                                    // 7604
    }                                                                                                                  // 7605
  };                                                                                                                   // 7606
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7607
  var undef;                                                                                                           // 7608
                                                                                                                       // 7609
  wysihtml5.commands.italic = {                                                                                        // 7610
    exec: function(composer, command) {                                                                                // 7611
      return wysihtml5.commands.formatInline.exec(composer, command, "i");                                             // 7612
    },                                                                                                                 // 7613
                                                                                                                       // 7614
    state: function(composer, command, color) {                                                                        // 7615
      // element.ownerDocument.queryCommandState("italic") results:                                                    // 7616
      // firefox: only <i>                                                                                             // 7617
      // chrome:  <i>, <em>, <blockquote>, ...                                                                         // 7618
      // ie:      <i>, <em>                                                                                            // 7619
      // opera:   only <i>                                                                                             // 7620
      return wysihtml5.commands.formatInline.state(composer, command, "i");                                            // 7621
    },                                                                                                                 // 7622
                                                                                                                       // 7623
    value: function() {                                                                                                // 7624
      return undef;                                                                                                    // 7625
    }                                                                                                                  // 7626
  };                                                                                                                   // 7627
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7628
  var undef,                                                                                                           // 7629
      CLASS_NAME  = "wysiwyg-text-align-center",                                                                       // 7630
      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;                                                                      // 7631
                                                                                                                       // 7632
  wysihtml5.commands.justifyCenter = {                                                                                 // 7633
    exec: function(composer, command) {                                                                                // 7634
      return wysihtml5.commands.formatBlock.exec(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                  // 7635
    },                                                                                                                 // 7636
                                                                                                                       // 7637
    state: function(composer, command) {                                                                               // 7638
      return wysihtml5.commands.formatBlock.state(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                 // 7639
    },                                                                                                                 // 7640
                                                                                                                       // 7641
    value: function() {                                                                                                // 7642
      return undef;                                                                                                    // 7643
    }                                                                                                                  // 7644
  };                                                                                                                   // 7645
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7646
  var undef,                                                                                                           // 7647
      CLASS_NAME  = "wysiwyg-text-align-left",                                                                         // 7648
      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;                                                                      // 7649
                                                                                                                       // 7650
  wysihtml5.commands.justifyLeft = {                                                                                   // 7651
    exec: function(composer, command) {                                                                                // 7652
      return wysihtml5.commands.formatBlock.exec(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                  // 7653
    },                                                                                                                 // 7654
                                                                                                                       // 7655
    state: function(composer, command) {                                                                               // 7656
      return wysihtml5.commands.formatBlock.state(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                 // 7657
    },                                                                                                                 // 7658
                                                                                                                       // 7659
    value: function() {                                                                                                // 7660
      return undef;                                                                                                    // 7661
    }                                                                                                                  // 7662
  };                                                                                                                   // 7663
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7664
  var undef,                                                                                                           // 7665
      CLASS_NAME  = "wysiwyg-text-align-right",                                                                        // 7666
      REG_EXP     = /wysiwyg-text-align-[a-z]+/g;                                                                      // 7667
                                                                                                                       // 7668
  wysihtml5.commands.justifyRight = {                                                                                  // 7669
    exec: function(composer, command) {                                                                                // 7670
      return wysihtml5.commands.formatBlock.exec(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                  // 7671
    },                                                                                                                 // 7672
                                                                                                                       // 7673
    state: function(composer, command) {                                                                               // 7674
      return wysihtml5.commands.formatBlock.state(composer, "formatBlock", null, CLASS_NAME, REG_EXP);                 // 7675
    },                                                                                                                 // 7676
                                                                                                                       // 7677
    value: function() {                                                                                                // 7678
      return undef;                                                                                                    // 7679
    }                                                                                                                  // 7680
  };                                                                                                                   // 7681
})(wysihtml5);(function(wysihtml5) {                                                                                   // 7682
  var undef;                                                                                                           // 7683
  wysihtml5.commands.underline = {                                                                                     // 7684
    exec: function(composer, command) {                                                                                // 7685
      return wysihtml5.commands.formatInline.exec(composer, command, "u");                                             // 7686
    },                                                                                                                 // 7687
                                                                                                                       // 7688
    state: function(composer, command) {                                                                               // 7689
      return wysihtml5.commands.formatInline.state(composer, command, "u");                                            // 7690
    },                                                                                                                 // 7691
                                                                                                                       // 7692
    value: function() {                                                                                                // 7693
      return undef;                                                                                                    // 7694
    }                                                                                                                  // 7695
  };                                                                                                                   // 7696
})(wysihtml5);/**                                                                                                      // 7697
 * Undo Manager for wysihtml5                                                                                          // 7698
 * slightly inspired by http://rniwa.com/editing/undomanager.html#the-undomanager-interface                            // 7699
 */                                                                                                                    // 7700
(function(wysihtml5) {                                                                                                 // 7701
  var Z_KEY               = 90,                                                                                        // 7702
      Y_KEY               = 89,                                                                                        // 7703
      BACKSPACE_KEY       = 8,                                                                                         // 7704
      DELETE_KEY          = 46,                                                                                        // 7705
      MAX_HISTORY_ENTRIES = 40,                                                                                        // 7706
      UNDO_HTML           = '<span id="_wysihtml5-undo" class="_wysihtml5-temp">' + wysihtml5.INVISIBLE_SPACE + '</span>',
      REDO_HTML           = '<span id="_wysihtml5-redo" class="_wysihtml5-temp">' + wysihtml5.INVISIBLE_SPACE + '</span>',
      dom                 = wysihtml5.dom;                                                                             // 7709
                                                                                                                       // 7710
  function cleanTempElements(doc) {                                                                                    // 7711
    var tempElement;                                                                                                   // 7712
    while (tempElement = doc.querySelector("._wysihtml5-temp")) {                                                      // 7713
      tempElement.parentNode.removeChild(tempElement);                                                                 // 7714
    }                                                                                                                  // 7715
  }                                                                                                                    // 7716
                                                                                                                       // 7717
  wysihtml5.UndoManager = wysihtml5.lang.Dispatcher.extend(                                                            // 7718
    /** @scope wysihtml5.UndoManager.prototype */ {                                                                    // 7719
    constructor: function(editor) {                                                                                    // 7720
      this.editor = editor;                                                                                            // 7721
      this.composer = editor.composer;                                                                                 // 7722
      this.element = this.composer.element;                                                                            // 7723
      this.history = [this.composer.getValue()];                                                                       // 7724
      this.position = 1;                                                                                               // 7725
                                                                                                                       // 7726
      // Undo manager currently only supported in browsers who have the insertHTML command (not IE)                    // 7727
      if (this.composer.commands.support("insertHTML")) {                                                              // 7728
        this._observe();                                                                                               // 7729
      }                                                                                                                // 7730
    },                                                                                                                 // 7731
                                                                                                                       // 7732
    _observe: function() {                                                                                             // 7733
      var that      = this,                                                                                            // 7734
          doc       = this.composer.sandbox.getDocument(),                                                             // 7735
          lastKey;                                                                                                     // 7736
                                                                                                                       // 7737
      // Catch CTRL+Z and CTRL+Y                                                                                       // 7738
      dom.observe(this.element, "keydown", function(event) {                                                           // 7739
        if (event.altKey || (!event.ctrlKey && !event.metaKey)) {                                                      // 7740
          return;                                                                                                      // 7741
        }                                                                                                              // 7742
                                                                                                                       // 7743
        var keyCode = event.keyCode,                                                                                   // 7744
            isUndo = keyCode === Z_KEY && !event.shiftKey,                                                             // 7745
            isRedo = (keyCode === Z_KEY && event.shiftKey) || (keyCode === Y_KEY);                                     // 7746
                                                                                                                       // 7747
        if (isUndo) {                                                                                                  // 7748
          that.undo();                                                                                                 // 7749
          event.preventDefault();                                                                                      // 7750
        } else if (isRedo) {                                                                                           // 7751
          that.redo();                                                                                                 // 7752
          event.preventDefault();                                                                                      // 7753
        }                                                                                                              // 7754
      });                                                                                                              // 7755
                                                                                                                       // 7756
      // Catch delete and backspace                                                                                    // 7757
      dom.observe(this.element, "keydown", function(event) {                                                           // 7758
        var keyCode = event.keyCode;                                                                                   // 7759
        if (keyCode === lastKey) {                                                                                     // 7760
          return;                                                                                                      // 7761
        }                                                                                                              // 7762
                                                                                                                       // 7763
        lastKey = keyCode;                                                                                             // 7764
                                                                                                                       // 7765
        if (keyCode === BACKSPACE_KEY || keyCode === DELETE_KEY) {                                                     // 7766
          that.transact();                                                                                             // 7767
        }                                                                                                              // 7768
      });                                                                                                              // 7769
                                                                                                                       // 7770
      // Now this is very hacky:                                                                                       // 7771
      // These days browsers don't offer a undo/redo event which we could hook into                                    // 7772
      // to be notified when the user hits undo/redo in the contextmenu.                                               // 7773
      // Therefore we simply insert two elements as soon as the contextmenu gets opened.                               // 7774
      // The last element being inserted will be immediately be removed again by a exexCommand("undo")                 // 7775
      //  => When the second element appears in the dom tree then we know the user clicked "redo" in the context menu  // 7776
      //  => When the first element disappears from the dom tree then we know the user clicked "undo" in the context menu
      if (wysihtml5.browser.hasUndoInContextMenu()) {                                                                  // 7778
        var interval, observed, cleanUp = function() {                                                                 // 7779
          cleanTempElements(doc);                                                                                      // 7780
          clearInterval(interval);                                                                                     // 7781
        };                                                                                                             // 7782
                                                                                                                       // 7783
        dom.observe(this.element, "contextmenu", function() {                                                          // 7784
          cleanUp();                                                                                                   // 7785
          that.composer.selection.executeAndRestoreSimple(function() {                                                 // 7786
            if (that.element.lastChild) {                                                                              // 7787
              that.composer.selection.setAfter(that.element.lastChild);                                                // 7788
            }                                                                                                          // 7789
                                                                                                                       // 7790
            // enable undo button in context menu                                                                      // 7791
            doc.execCommand("insertHTML", false, UNDO_HTML);                                                           // 7792
            // enable redo button in context menu                                                                      // 7793
            doc.execCommand("insertHTML", false, REDO_HTML);                                                           // 7794
            doc.execCommand("undo", false, null);                                                                      // 7795
          });                                                                                                          // 7796
                                                                                                                       // 7797
          interval = setInterval(function() {                                                                          // 7798
            if (doc.getElementById("_wysihtml5-redo")) {                                                               // 7799
              cleanUp();                                                                                               // 7800
              that.redo();                                                                                             // 7801
            } else if (!doc.getElementById("_wysihtml5-undo")) {                                                       // 7802
              cleanUp();                                                                                               // 7803
              that.undo();                                                                                             // 7804
            }                                                                                                          // 7805
          }, 400);                                                                                                     // 7806
                                                                                                                       // 7807
          if (!observed) {                                                                                             // 7808
            observed = true;                                                                                           // 7809
            dom.observe(document, "mousedown", cleanUp);                                                               // 7810
            dom.observe(doc, ["mousedown", "paste", "cut", "copy"], cleanUp);                                          // 7811
          }                                                                                                            // 7812
        });                                                                                                            // 7813
      }                                                                                                                // 7814
                                                                                                                       // 7815
      this.editor                                                                                                      // 7816
        .observe("newword:composer", function() {                                                                      // 7817
          that.transact();                                                                                             // 7818
        })                                                                                                             // 7819
                                                                                                                       // 7820
        .observe("beforecommand:composer", function() {                                                                // 7821
          that.transact();                                                                                             // 7822
        });                                                                                                            // 7823
    },                                                                                                                 // 7824
                                                                                                                       // 7825
    transact: function() {                                                                                             // 7826
      var previousHtml  = this.history[this.position - 1],                                                             // 7827
          currentHtml   = this.composer.getValue();                                                                    // 7828
                                                                                                                       // 7829
      if (currentHtml == previousHtml) {                                                                               // 7830
        return;                                                                                                        // 7831
      }                                                                                                                // 7832
                                                                                                                       // 7833
      var length = this.history.length = this.position;                                                                // 7834
      if (length > MAX_HISTORY_ENTRIES) {                                                                              // 7835
        this.history.shift();                                                                                          // 7836
        this.position--;                                                                                               // 7837
      }                                                                                                                // 7838
                                                                                                                       // 7839
      this.position++;                                                                                                 // 7840
      this.history.push(currentHtml);                                                                                  // 7841
    },                                                                                                                 // 7842
                                                                                                                       // 7843
    undo: function() {                                                                                                 // 7844
      this.transact();                                                                                                 // 7845
                                                                                                                       // 7846
      if (this.position <= 1) {                                                                                        // 7847
        return;                                                                                                        // 7848
      }                                                                                                                // 7849
                                                                                                                       // 7850
      this.set(this.history[--this.position - 1]);                                                                     // 7851
      this.editor.fire("undo:composer");                                                                               // 7852
    },                                                                                                                 // 7853
                                                                                                                       // 7854
    redo: function() {                                                                                                 // 7855
      if (this.position >= this.history.length) {                                                                      // 7856
        return;                                                                                                        // 7857
      }                                                                                                                // 7858
                                                                                                                       // 7859
      this.set(this.history[++this.position - 1]);                                                                     // 7860
      this.editor.fire("redo:composer");                                                                               // 7861
    },                                                                                                                 // 7862
                                                                                                                       // 7863
    set: function(html) {                                                                                              // 7864
      this.composer.setValue(html);                                                                                    // 7865
      this.editor.focus(true);                                                                                         // 7866
    }                                                                                                                  // 7867
  });                                                                                                                  // 7868
})(wysihtml5);                                                                                                         // 7869
/**                                                                                                                    // 7870
 * TODO: the following methods still need unit test coverage                                                           // 7871
 */                                                                                                                    // 7872
wysihtml5.views.View = Base.extend(                                                                                    // 7873
  /** @scope wysihtml5.views.View.prototype */ {                                                                       // 7874
  constructor: function(parent, textareaElement, config) {                                                             // 7875
    this.parent   = parent;                                                                                            // 7876
    this.element  = textareaElement;                                                                                   // 7877
    this.config   = config;                                                                                            // 7878
                                                                                                                       // 7879
    this._observeViewChange();                                                                                         // 7880
  },                                                                                                                   // 7881
                                                                                                                       // 7882
  _observeViewChange: function() {                                                                                     // 7883
    var that = this;                                                                                                   // 7884
    this.parent.observe("beforeload", function() {                                                                     // 7885
      that.parent.observe("change_view", function(view) {                                                              // 7886
        if (view === that.name) {                                                                                      // 7887
          that.parent.currentView = that;                                                                              // 7888
          that.show();                                                                                                 // 7889
          // Using tiny delay here to make sure that the placeholder is set before focusing                            // 7890
          setTimeout(function() { that.focus(); }, 0);                                                                 // 7891
        } else {                                                                                                       // 7892
          that.hide();                                                                                                 // 7893
        }                                                                                                              // 7894
      });                                                                                                              // 7895
    });                                                                                                                // 7896
  },                                                                                                                   // 7897
                                                                                                                       // 7898
  focus: function() {                                                                                                  // 7899
    if (this.element.ownerDocument.querySelector(":focus") === this.element) {                                         // 7900
      return;                                                                                                          // 7901
    }                                                                                                                  // 7902
                                                                                                                       // 7903
    try { this.element.focus(); } catch(e) {}                                                                          // 7904
  },                                                                                                                   // 7905
                                                                                                                       // 7906
  hide: function() {                                                                                                   // 7907
    this.element.style.display = "none";                                                                               // 7908
  },                                                                                                                   // 7909
                                                                                                                       // 7910
  show: function() {                                                                                                   // 7911
    this.element.style.display = "";                                                                                   // 7912
  },                                                                                                                   // 7913
                                                                                                                       // 7914
  disable: function() {                                                                                                // 7915
    this.element.setAttribute("disabled", "disabled");                                                                 // 7916
  },                                                                                                                   // 7917
                                                                                                                       // 7918
  enable: function() {                                                                                                 // 7919
    this.element.removeAttribute("disabled");                                                                          // 7920
  }                                                                                                                    // 7921
});(function(wysihtml5) {                                                                                              // 7922
  var dom       = wysihtml5.dom,                                                                                       // 7923
      browser   = wysihtml5.browser;                                                                                   // 7924
                                                                                                                       // 7925
  wysihtml5.views.Composer = wysihtml5.views.View.extend(                                                              // 7926
    /** @scope wysihtml5.views.Composer.prototype */ {                                                                 // 7927
    name: "composer",                                                                                                  // 7928
                                                                                                                       // 7929
    // Needed for firefox in order to display a proper caret in an empty contentEditable                               // 7930
    CARET_HACK: "<br>",                                                                                                // 7931
                                                                                                                       // 7932
    constructor: function(parent, textareaElement, config) {                                                           // 7933
      this.base(parent, textareaElement, config);                                                                      // 7934
      this.textarea = this.parent.textarea;                                                                            // 7935
      this._initSandbox();                                                                                             // 7936
    },                                                                                                                 // 7937
                                                                                                                       // 7938
    clear: function() {                                                                                                // 7939
      this.element.innerHTML = browser.displaysCaretInEmptyContentEditableCorrectly() ? "" : this.CARET_HACK;          // 7940
    },                                                                                                                 // 7941
                                                                                                                       // 7942
    getValue: function(parse) {                                                                                        // 7943
      var value = this.isEmpty() ? "" : wysihtml5.quirks.getCorrectInnerHTML(this.element);                            // 7944
                                                                                                                       // 7945
      if (parse) {                                                                                                     // 7946
        value = this.parent.parse(value);                                                                              // 7947
      }                                                                                                                // 7948
                                                                                                                       // 7949
      // Replace all "zero width no breaking space" chars                                                              // 7950
      // which are used as hacks to enable some functionalities                                                        // 7951
      // Also remove all CARET hacks that somehow got left                                                             // 7952
      value = wysihtml5.lang.string(value).replace(wysihtml5.INVISIBLE_SPACE).by("");                                  // 7953
                                                                                                                       // 7954
      return value;                                                                                                    // 7955
    },                                                                                                                 // 7956
                                                                                                                       // 7957
    setValue: function(html, parse) {                                                                                  // 7958
      if (parse) {                                                                                                     // 7959
        html = this.parent.parse(html);                                                                                // 7960
      }                                                                                                                // 7961
      this.element.innerHTML = html;                                                                                   // 7962
    },                                                                                                                 // 7963
                                                                                                                       // 7964
    show: function() {                                                                                                 // 7965
      this.iframe.style.display = this._displayStyle || "";                                                            // 7966
                                                                                                                       // 7967
      // Firefox needs this, otherwise contentEditable becomes uneditable                                              // 7968
      this.disable();                                                                                                  // 7969
      this.enable();                                                                                                   // 7970
    },                                                                                                                 // 7971
                                                                                                                       // 7972
    hide: function() {                                                                                                 // 7973
      this._displayStyle = dom.getStyle("display").from(this.iframe);                                                  // 7974
      if (this._displayStyle === "none") {                                                                             // 7975
        this._displayStyle = null;                                                                                     // 7976
      }                                                                                                                // 7977
      this.iframe.style.display = "none";                                                                              // 7978
    },                                                                                                                 // 7979
                                                                                                                       // 7980
    disable: function() {                                                                                              // 7981
      this.element.removeAttribute("contentEditable");                                                                 // 7982
      this.base();                                                                                                     // 7983
    },                                                                                                                 // 7984
                                                                                                                       // 7985
    enable: function() {                                                                                               // 7986
      this.element.setAttribute("contentEditable", "true");                                                            // 7987
      this.base();                                                                                                     // 7988
    },                                                                                                                 // 7989
                                                                                                                       // 7990
    focus: function(setToEnd) {                                                                                        // 7991
      // IE 8 fires the focus event after .focus()                                                                     // 7992
      // This is needed by our simulate_placeholder.js to work                                                         // 7993
      // therefore we clear it ourselves this time                                                                     // 7994
      if (wysihtml5.browser.doesAsyncFocus() && this.hasPlaceholderSet()) {                                            // 7995
        this.clear();                                                                                                  // 7996
      }                                                                                                                // 7997
                                                                                                                       // 7998
      this.base();                                                                                                     // 7999
                                                                                                                       // 8000
      var lastChild = this.element.lastChild;                                                                          // 8001
      if (setToEnd && lastChild) {                                                                                     // 8002
        if (lastChild.nodeName === "BR") {                                                                             // 8003
          this.selection.setBefore(this.element.lastChild);                                                            // 8004
        } else {                                                                                                       // 8005
          this.selection.setAfter(this.element.lastChild);                                                             // 8006
        }                                                                                                              // 8007
      }                                                                                                                // 8008
    },                                                                                                                 // 8009
                                                                                                                       // 8010
    getTextContent: function() {                                                                                       // 8011
      return dom.getTextContent(this.element);                                                                         // 8012
    },                                                                                                                 // 8013
                                                                                                                       // 8014
    hasPlaceholderSet: function() {                                                                                    // 8015
      return this.getTextContent() == this.textarea.element.getAttribute("placeholder");                               // 8016
    },                                                                                                                 // 8017
                                                                                                                       // 8018
    isEmpty: function() {                                                                                              // 8019
      var innerHTML               = this.element.innerHTML,                                                            // 8020
          elementsWithVisualValue = "blockquote, ul, ol, img, embed, object, table, iframe, svg, video, audio, button, input, select, textarea";
      return innerHTML === ""              ||                                                                          // 8022
             innerHTML === this.CARET_HACK ||                                                                          // 8023
             this.hasPlaceholderSet()      ||                                                                          // 8024
             (this.getTextContent() === "" && !this.element.querySelector(elementsWithVisualValue));                   // 8025
    },                                                                                                                 // 8026
                                                                                                                       // 8027
    _initSandbox: function() {                                                                                         // 8028
      var that = this;                                                                                                 // 8029
                                                                                                                       // 8030
      this.sandbox = new dom.Sandbox(function() {                                                                      // 8031
        that._create();                                                                                                // 8032
      }, {                                                                                                             // 8033
        stylesheets:  this.config.stylesheets                                                                          // 8034
      });                                                                                                              // 8035
      this.iframe  = this.sandbox.getIframe();                                                                         // 8036
                                                                                                                       // 8037
      // Create hidden field which tells the server after submit, that the user used an wysiwyg editor                 // 8038
      var hiddenField = document.createElement("input");                                                               // 8039
      hiddenField.type   = "hidden";                                                                                   // 8040
      hiddenField.name   = "_wysihtml5_mode";                                                                          // 8041
      hiddenField.value  = 1;                                                                                          // 8042
                                                                                                                       // 8043
      // Store reference to current wysihtml5 instance on the textarea element                                         // 8044
      var textareaElement = this.textarea.element;                                                                     // 8045
      dom.insert(this.iframe).after(textareaElement);                                                                  // 8046
      dom.insert(hiddenField).after(textareaElement);                                                                  // 8047
    },                                                                                                                 // 8048
                                                                                                                       // 8049
    _create: function() {                                                                                              // 8050
      var that = this;                                                                                                 // 8051
                                                                                                                       // 8052
      this.doc                = this.sandbox.getDocument();                                                            // 8053
      this.element            = this.doc.body;                                                                         // 8054
      this.textarea           = this.parent.textarea;                                                                  // 8055
      this.element.innerHTML  = this.textarea.getValue(true);                                                          // 8056
      this.enable();                                                                                                   // 8057
                                                                                                                       // 8058
      // Make sure our selection handler is ready                                                                      // 8059
      this.selection = new wysihtml5.Selection(this.parent);                                                           // 8060
                                                                                                                       // 8061
      // Make sure commands dispatcher is ready                                                                        // 8062
      this.commands  = new wysihtml5.Commands(this.parent);                                                            // 8063
                                                                                                                       // 8064
      dom.copyAttributes([                                                                                             // 8065
        "className", "spellcheck", "title", "lang", "dir", "accessKey"                                                 // 8066
      ]).from(this.textarea.element).to(this.element);                                                                 // 8067
                                                                                                                       // 8068
      dom.addClass(this.element, this.config.composerClassName);                                                       // 8069
                                                                                                                       // 8070
      // Make the editor look like the original textarea, by syncing styles                                            // 8071
      if (this.config.style) {                                                                                         // 8072
        this.style();                                                                                                  // 8073
      }                                                                                                                // 8074
                                                                                                                       // 8075
      this.observe();                                                                                                  // 8076
                                                                                                                       // 8077
      var name = this.config.name;                                                                                     // 8078
      if (name) {                                                                                                      // 8079
        dom.addClass(this.element, name);                                                                              // 8080
        dom.addClass(this.iframe, name);                                                                               // 8081
      }                                                                                                                // 8082
                                                                                                                       // 8083
      // Simulate html5 placeholder attribute on contentEditable element                                               // 8084
      var placeholderText = typeof(this.config.placeholder) === "string"                                               // 8085
        ? this.config.placeholder                                                                                      // 8086
        : this.textarea.element.getAttribute("placeholder");                                                           // 8087
      if (placeholderText) {                                                                                           // 8088
        dom.simulatePlaceholder(this.parent, this, placeholderText);                                                   // 8089
      }                                                                                                                // 8090
                                                                                                                       // 8091
      // Make sure that the browser avoids using inline styles whenever possible                                       // 8092
      this.commands.exec("styleWithCSS", false);                                                                       // 8093
                                                                                                                       // 8094
      this._initAutoLinking();                                                                                         // 8095
      this._initObjectResizing();                                                                                      // 8096
      this._initUndoManager();                                                                                         // 8097
                                                                                                                       // 8098
      // Simulate html5 autofocus on contentEditable element                                                           // 8099
      if (this.textarea.element.hasAttribute("autofocus") || document.querySelector(":focus") == this.textarea.element) {
        setTimeout(function() { that.focus(); }, 100);                                                                 // 8101
      }                                                                                                                // 8102
                                                                                                                       // 8103
      wysihtml5.quirks.insertLineBreakOnReturn(this);                                                                  // 8104
                                                                                                                       // 8105
      // IE sometimes leaves a single paragraph, which can't be removed by the user                                    // 8106
      if (!browser.clearsContentEditableCorrectly()) {                                                                 // 8107
        wysihtml5.quirks.ensureProperClearing(this);                                                                   // 8108
      }                                                                                                                // 8109
                                                                                                                       // 8110
      if (!browser.clearsListsInContentEditableCorrectly()) {                                                          // 8111
        wysihtml5.quirks.ensureProperClearingOfLists(this);                                                            // 8112
      }                                                                                                                // 8113
                                                                                                                       // 8114
      // Set up a sync that makes sure that textarea and editor have the same content                                  // 8115
      if (this.initSync && this.config.sync) {                                                                         // 8116
        this.initSync();                                                                                               // 8117
      }                                                                                                                // 8118
                                                                                                                       // 8119
      // Okay hide the textarea, we are ready to go                                                                    // 8120
      this.textarea.hide();                                                                                            // 8121
                                                                                                                       // 8122
      // Fire global (before-)load event                                                                               // 8123
      this.parent.fire("beforeload").fire("load");                                                                     // 8124
    },                                                                                                                 // 8125
                                                                                                                       // 8126
    _initAutoLinking: function() {                                                                                     // 8127
      var that                           = this,                                                                       // 8128
          supportsDisablingOfAutoLinking = browser.canDisableAutoLinking(),                                            // 8129
          supportsAutoLinking            = browser.doesAutoLinkingInContentEditable();                                 // 8130
      if (supportsDisablingOfAutoLinking) {                                                                            // 8131
        this.commands.exec("autoUrlDetect", false);                                                                    // 8132
      }                                                                                                                // 8133
                                                                                                                       // 8134
      if (!this.config.autoLink) {                                                                                     // 8135
        return;                                                                                                        // 8136
      }                                                                                                                // 8137
                                                                                                                       // 8138
      // Only do the auto linking by ourselves when the browser doesn't support auto linking                           // 8139
      // OR when he supports auto linking but we were able to turn it off (IE9+)                                       // 8140
      if (!supportsAutoLinking || (supportsAutoLinking && supportsDisablingOfAutoLinking)) {                           // 8141
        this.parent.observe("newword:composer", function() {                                                           // 8142
          that.selection.executeAndRestore(function(startContainer, endContainer) {                                    // 8143
            dom.autoLink(endContainer.parentNode);                                                                     // 8144
          });                                                                                                          // 8145
        });                                                                                                            // 8146
      }                                                                                                                // 8147
                                                                                                                       // 8148
      // Assuming we have the following:                                                                               // 8149
      //  <a href="http://www.google.de">http://www.google.de</a>                                                      // 8150
      // If a user now changes the url in the innerHTML we want to make sure that                                      // 8151
      // it's synchronized with the href attribute (as long as the innerHTML is still a url)                           // 8152
      var // Use a live NodeList to check whether there are any links in the document                                  // 8153
          links           = this.sandbox.getDocument().getElementsByTagName("a"),                                      // 8154
          // The autoLink helper method reveals a reg exp to detect correct urls                                       // 8155
          urlRegExp       = dom.autoLink.URL_REG_EXP,                                                                  // 8156
          getTextContent  = function(element) {                                                                        // 8157
            var textContent = wysihtml5.lang.string(dom.getTextContent(element)).trim();                               // 8158
            if (textContent.substr(0, 4) === "www.") {                                                                 // 8159
              textContent = "http://" + textContent;                                                                   // 8160
            }                                                                                                          // 8161
            return textContent;                                                                                        // 8162
          };                                                                                                           // 8163
                                                                                                                       // 8164
      dom.observe(this.element, "keydown", function(event) {                                                           // 8165
        if (!links.length) {                                                                                           // 8166
          return;                                                                                                      // 8167
        }                                                                                                              // 8168
                                                                                                                       // 8169
        var selectedNode = that.selection.getSelectedNode(event.target.ownerDocument),                                 // 8170
            link         = dom.getParentElement(selectedNode, { nodeName: "A" }, 4),                                   // 8171
            textContent;                                                                                               // 8172
                                                                                                                       // 8173
        if (!link) {                                                                                                   // 8174
          return;                                                                                                      // 8175
        }                                                                                                              // 8176
                                                                                                                       // 8177
        textContent = getTextContent(link);                                                                            // 8178
        // keydown is fired before the actual content is changed                                                       // 8179
        // therefore we set a timeout to change the href                                                               // 8180
        setTimeout(function() {                                                                                        // 8181
          var newTextContent = getTextContent(link);                                                                   // 8182
          if (newTextContent === textContent) {                                                                        // 8183
            return;                                                                                                    // 8184
          }                                                                                                            // 8185
                                                                                                                       // 8186
          // Only set href when new href looks like a valid url                                                        // 8187
          if (newTextContent.match(urlRegExp)) {                                                                       // 8188
            link.setAttribute("href", newTextContent);                                                                 // 8189
          }                                                                                                            // 8190
        }, 0);                                                                                                         // 8191
      });                                                                                                              // 8192
    },                                                                                                                 // 8193
                                                                                                                       // 8194
    _initObjectResizing: function() {                                                                                  // 8195
      var properties        = ["width", "height"],                                                                     // 8196
          propertiesLength  = properties.length,                                                                       // 8197
          element           = this.element;                                                                            // 8198
                                                                                                                       // 8199
      this.commands.exec("enableObjectResizing", this.config.allowObjectResizing);                                     // 8200
                                                                                                                       // 8201
      if (this.config.allowObjectResizing) {                                                                           // 8202
         // IE sets inline styles after resizing objects                                                               // 8203
         // The following lines make sure that the width/height css properties                                         // 8204
         // are copied over to the width/height attributes                                                             // 8205
        if (browser.supportsEvent("resizeend")) {                                                                      // 8206
          dom.observe(element, "resizeend", function(event) {                                                          // 8207
            var target = event.target || event.srcElement,                                                             // 8208
                style  = target.style,                                                                                 // 8209
                i      = 0,                                                                                            // 8210
                property;                                                                                              // 8211
            for(; i<propertiesLength; i++) {                                                                           // 8212
              property = properties[i];                                                                                // 8213
              if (style[property]) {                                                                                   // 8214
                target.setAttribute(property, parseInt(style[property], 10));                                          // 8215
                style[property] = "";                                                                                  // 8216
              }                                                                                                        // 8217
            }                                                                                                          // 8218
            // After resizing IE sometimes forgets to remove the old resize handles                                    // 8219
            wysihtml5.quirks.redraw(element);                                                                          // 8220
          });                                                                                                          // 8221
        }                                                                                                              // 8222
      } else {                                                                                                         // 8223
        if (browser.supportsEvent("resizestart")) {                                                                    // 8224
          dom.observe(element, "resizestart", function(event) { event.preventDefault(); });                            // 8225
        }                                                                                                              // 8226
      }                                                                                                                // 8227
    },                                                                                                                 // 8228
                                                                                                                       // 8229
    _initUndoManager: function() {                                                                                     // 8230
      new wysihtml5.UndoManager(this.parent);                                                                          // 8231
    }                                                                                                                  // 8232
  });                                                                                                                  // 8233
})(wysihtml5);(function(wysihtml5) {                                                                                   // 8234
  var dom             = wysihtml5.dom,                                                                                 // 8235
      doc             = document,                                                                                      // 8236
      win             = window,                                                                                        // 8237
      HOST_TEMPLATE   = doc.createElement("div"),                                                                      // 8238
      /**                                                                                                              // 8239
       * Styles to copy from textarea to the composer element                                                          // 8240
       */                                                                                                              // 8241
      TEXT_FORMATTING = [                                                                                              // 8242
        "background-color",                                                                                            // 8243
        "color", "cursor",                                                                                             // 8244
        "font-family", "font-size", "font-style", "font-variant", "font-weight",                                       // 8245
        "line-height", "letter-spacing",                                                                               // 8246
        "text-align", "text-decoration", "text-indent", "text-rendering",                                              // 8247
        "word-break", "word-wrap", "word-spacing"                                                                      // 8248
      ],                                                                                                               // 8249
      /**                                                                                                              // 8250
       * Styles to copy from textarea to the iframe                                                                    // 8251
       */                                                                                                              // 8252
      BOX_FORMATTING = [                                                                                               // 8253
        "background-color",                                                                                            // 8254
        "border-collapse",                                                                                             // 8255
        "border-bottom-color", "border-bottom-style", "border-bottom-width",                                           // 8256
        "border-left-color", "border-left-style", "border-left-width",                                                 // 8257
        "border-right-color", "border-right-style", "border-right-width",                                              // 8258
        "border-top-color", "border-top-style", "border-top-width",                                                    // 8259
        "clear", "display", "float",                                                                                   // 8260
        "margin-bottom", "margin-left", "margin-right", "margin-top",                                                  // 8261
        "outline-color", "outline-offset", "outline-width", "outline-style",                                           // 8262
        "padding-left", "padding-right", "padding-top", "padding-bottom",                                              // 8263
        "position", "top", "left", "right", "bottom", "z-index",                                                       // 8264
        "vertical-align", "text-align",                                                                                // 8265
        "-webkit-box-sizing", "-moz-box-sizing", "-ms-box-sizing", "box-sizing",                                       // 8266
        "-webkit-box-shadow", "-moz-box-shadow", "-ms-box-shadow","box-shadow",                                        // 8267
        "-webkit-border-top-right-radius", "-moz-border-radius-topright", "border-top-right-radius",                   // 8268
        "-webkit-border-bottom-right-radius", "-moz-border-radius-bottomright", "border-bottom-right-radius",          // 8269
        "-webkit-border-bottom-left-radius", "-moz-border-radius-bottomleft", "border-bottom-left-radius",             // 8270
        "-webkit-border-top-left-radius", "-moz-border-radius-topleft", "border-top-left-radius",                      // 8271
        "width", "height"                                                                                              // 8272
      ],                                                                                                               // 8273
      /**                                                                                                              // 8274
       * Styles to sync while the window gets resized                                                                  // 8275
       */                                                                                                              // 8276
      RESIZE_STYLE = [                                                                                                 // 8277
        "width", "height",                                                                                             // 8278
        "top", "left", "right", "bottom"                                                                               // 8279
      ],                                                                                                               // 8280
      ADDITIONAL_CSS_RULES = [                                                                                         // 8281
        "html             { height: 100%; }",                                                                          // 8282
        "body             { min-height: 100%; padding: 0; margin: 0; margin-top: -1px; padding-top: 1px; }",           // 8283
        "._wysihtml5-temp { display: none; }",                                                                         // 8284
        wysihtml5.browser.isGecko ?                                                                                    // 8285
          "body.placeholder { color: graytext !important; }" :                                                         // 8286
          "body.placeholder { color: #a9a9a9 !important; }",                                                           // 8287
        "body[disabled]   { background-color: #eee !important; color: #999 !important; cursor: default !important; }", // 8288
        // Ensure that user see's broken images and can delete them                                                    // 8289
        "img:-moz-broken  { -moz-force-broken-image-icon: 1; height: 24px; width: 24px; }"                             // 8290
      ];                                                                                                               // 8291
                                                                                                                       // 8292
  /**                                                                                                                  // 8293
   * With "setActive" IE offers a smart way of focusing elements without scrolling them into view:                     // 8294
   * http://msdn.microsoft.com/en-us/library/ms536738(v=vs.85).aspx                                                    // 8295
   *                                                                                                                   // 8296
   * Other browsers need a more hacky way: (pssst don't tell my mama)                                                  // 8297
   * In order to prevent the element being scrolled into view when focusing it, we simply                              // 8298
   * move it out of the scrollable area, focus it, and reset it's position                                             // 8299
   */                                                                                                                  // 8300
  var focusWithoutScrolling = function(element) {                                                                      // 8301
    if (element.setActive) {                                                                                           // 8302
      // Following line could cause a js error when the textarea is invisible                                          // 8303
      // See https://github.com/xing/wysihtml5/issues/9                                                                // 8304
      try { element.setActive(); } catch(e) {}                                                                         // 8305
    } else {                                                                                                           // 8306
      var elementStyle = element.style,                                                                                // 8307
          originalScrollTop = doc.documentElement.scrollTop || doc.body.scrollTop,                                     // 8308
          originalScrollLeft = doc.documentElement.scrollLeft || doc.body.scrollLeft,                                  // 8309
          originalStyles = {                                                                                           // 8310
            position:         elementStyle.position,                                                                   // 8311
            top:              elementStyle.top,                                                                        // 8312
            left:             elementStyle.left,                                                                       // 8313
            WebkitUserSelect: elementStyle.WebkitUserSelect                                                            // 8314
          };                                                                                                           // 8315
                                                                                                                       // 8316
      dom.setStyles({                                                                                                  // 8317
        position:         "absolute",                                                                                  // 8318
        top:              "-99999px",                                                                                  // 8319
        left:             "-99999px",                                                                                  // 8320
        // Don't ask why but temporarily setting -webkit-user-select to none makes the whole thing performing smoother // 8321
        WebkitUserSelect: "none"                                                                                       // 8322
      }).on(element);                                                                                                  // 8323
                                                                                                                       // 8324
      element.focus();                                                                                                 // 8325
                                                                                                                       // 8326
      dom.setStyles(originalStyles).on(element);                                                                       // 8327
                                                                                                                       // 8328
      if (win.scrollTo) {                                                                                              // 8329
        // Some browser extensions unset this method to prevent annoyances                                             // 8330
        // "Better PopUp Blocker" for Chrome http://code.google.com/p/betterpopupblocker/source/browse/trunk/blockStart.js#100
        // Issue: http://code.google.com/p/betterpopupblocker/issues/detail?id=1                                       // 8332
        win.scrollTo(originalScrollLeft, originalScrollTop);                                                           // 8333
      }                                                                                                                // 8334
    }                                                                                                                  // 8335
  };                                                                                                                   // 8336
                                                                                                                       // 8337
                                                                                                                       // 8338
  wysihtml5.views.Composer.prototype.style = function() {                                                              // 8339
    var that                  = this,                                                                                  // 8340
        originalActiveElement = doc.querySelector(":focus"),                                                           // 8341
        textareaElement       = this.textarea.element,                                                                 // 8342
        hasPlaceholder        = textareaElement.hasAttribute("placeholder"),                                           // 8343
        originalPlaceholder   = hasPlaceholder && textareaElement.getAttribute("placeholder");                         // 8344
    this.focusStylesHost      = this.focusStylesHost  || HOST_TEMPLATE.cloneNode(false);                               // 8345
    this.blurStylesHost       = this.blurStylesHost   || HOST_TEMPLATE.cloneNode(false);                               // 8346
                                                                                                                       // 8347
    // Remove placeholder before copying (as the placeholder has an affect on the computed style)                      // 8348
    if (hasPlaceholder) {                                                                                              // 8349
      textareaElement.removeAttribute("placeholder");                                                                  // 8350
    }                                                                                                                  // 8351
                                                                                                                       // 8352
    if (textareaElement === originalActiveElement) {                                                                   // 8353
      textareaElement.blur();                                                                                          // 8354
    }                                                                                                                  // 8355
                                                                                                                       // 8356
    // --------- iframe styles (has to be set before editor styles, otherwise IE9 sets wrong fontFamily on blurStylesHost) ---------
    dom.copyStyles(BOX_FORMATTING).from(textareaElement).to(this.iframe).andTo(this.blurStylesHost);                   // 8358
                                                                                                                       // 8359
    // --------- editor styles ---------                                                                               // 8360
    dom.copyStyles(TEXT_FORMATTING).from(textareaElement).to(this.element).andTo(this.blurStylesHost);                 // 8361
                                                                                                                       // 8362
    // --------- apply standard rules ---------                                                                        // 8363
    dom.insertCSS(ADDITIONAL_CSS_RULES).into(this.element.ownerDocument);                                              // 8364
                                                                                                                       // 8365
    // --------- :focus styles ---------                                                                               // 8366
    focusWithoutScrolling(textareaElement);                                                                            // 8367
    dom.copyStyles(BOX_FORMATTING).from(textareaElement).to(this.focusStylesHost);                                     // 8368
    dom.copyStyles(TEXT_FORMATTING).from(textareaElement).to(this.focusStylesHost);                                    // 8369
                                                                                                                       // 8370
    // Make sure that we don't change the display style of the iframe when copying styles oblur/onfocus                // 8371
    // this is needed for when the change_view event is fired where the iframe is hidden and then                      // 8372
    // the blur event fires and re-displays it                                                                         // 8373
    var boxFormattingStyles = wysihtml5.lang.array(BOX_FORMATTING).without(["display"]);                               // 8374
                                                                                                                       // 8375
    // --------- restore focus ---------                                                                               // 8376
    if (originalActiveElement) {                                                                                       // 8377
      originalActiveElement.focus();                                                                                   // 8378
    } else {                                                                                                           // 8379
      textareaElement.blur();                                                                                          // 8380
    }                                                                                                                  // 8381
                                                                                                                       // 8382
    // --------- restore placeholder ---------                                                                         // 8383
    if (hasPlaceholder) {                                                                                              // 8384
      textareaElement.setAttribute("placeholder", originalPlaceholder);                                                // 8385
    }                                                                                                                  // 8386
                                                                                                                       // 8387
    // When copying styles, we only get the computed style which is never returned in percent unit                     // 8388
    // Therefore we've to recalculate style onresize                                                                   // 8389
    if (!wysihtml5.browser.hasCurrentStyleProperty()) {                                                                // 8390
      var winObserver = dom.observe(win, "resize", function() {                                                        // 8391
        // Remove event listener if composer doesn't exist anymore                                                     // 8392
        if (!dom.contains(document.documentElement, that.iframe)) {                                                    // 8393
          winObserver.stop();                                                                                          // 8394
          return;                                                                                                      // 8395
        }                                                                                                              // 8396
        var originalTextareaDisplayStyle = dom.getStyle("display").from(textareaElement),                              // 8397
            originalComposerDisplayStyle = dom.getStyle("display").from(that.iframe);                                  // 8398
        textareaElement.style.display = "";                                                                            // 8399
        that.iframe.style.display = "none";                                                                            // 8400
        dom.copyStyles(RESIZE_STYLE)                                                                                   // 8401
          .from(textareaElement)                                                                                       // 8402
          .to(that.iframe)                                                                                             // 8403
          .andTo(that.focusStylesHost)                                                                                 // 8404
          .andTo(that.blurStylesHost);                                                                                 // 8405
        that.iframe.style.display = originalComposerDisplayStyle;                                                      // 8406
        textareaElement.style.display = originalTextareaDisplayStyle;                                                  // 8407
      });                                                                                                              // 8408
    }                                                                                                                  // 8409
                                                                                                                       // 8410
    // --------- Sync focus/blur styles ---------                                                                      // 8411
    this.parent.observe("focus:composer", function() {                                                                 // 8412
      dom.copyStyles(boxFormattingStyles) .from(that.focusStylesHost).to(that.iframe);                                 // 8413
      dom.copyStyles(TEXT_FORMATTING)     .from(that.focusStylesHost).to(that.element);                                // 8414
    });                                                                                                                // 8415
                                                                                                                       // 8416
    this.parent.observe("blur:composer", function() {                                                                  // 8417
      dom.copyStyles(boxFormattingStyles) .from(that.blurStylesHost).to(that.iframe);                                  // 8418
      dom.copyStyles(TEXT_FORMATTING)     .from(that.blurStylesHost).to(that.element);                                 // 8419
    });                                                                                                                // 8420
                                                                                                                       // 8421
    return this;                                                                                                       // 8422
  };                                                                                                                   // 8423
})(wysihtml5);/**                                                                                                      // 8424
 * Taking care of events                                                                                               // 8425
 *  - Simulating 'change' event on contentEditable element                                                             // 8426
 *  - Handling drag & drop logic                                                                                       // 8427
 *  - Catch paste events                                                                                               // 8428
 *  - Dispatch proprietary newword:composer event                                                                      // 8429
 *  - Keyboard shortcuts                                                                                               // 8430
 */                                                                                                                    // 8431
(function(wysihtml5) {                                                                                                 // 8432
  var dom       = wysihtml5.dom,                                                                                       // 8433
      browser   = wysihtml5.browser,                                                                                   // 8434
      /**                                                                                                              // 8435
       * Map keyCodes to query commands                                                                                // 8436
       */                                                                                                              // 8437
      shortcuts = {                                                                                                    // 8438
        "66": "bold",     // B                                                                                         // 8439
        "73": "italic",   // I                                                                                         // 8440
        "85": "underline" // U                                                                                         // 8441
      };                                                                                                               // 8442
                                                                                                                       // 8443
  wysihtml5.views.Composer.prototype.observe = function() {                                                            // 8444
    var that                = this,                                                                                    // 8445
        state               = this.getValue(),                                                                         // 8446
        iframe              = this.sandbox.getIframe(),                                                                // 8447
        element             = this.element,                                                                            // 8448
        focusBlurElement    = browser.supportsEventsInIframeCorrectly() ? element : this.sandbox.getWindow(),          // 8449
        // Firefox < 3.5 doesn't support the drop event, instead it supports a so called "dragdrop" event which behaves almost the same
        pasteEvents         = browser.supportsEvent("drop") ? ["drop", "paste"] : ["dragdrop", "paste"];               // 8451
                                                                                                                       // 8452
    // --------- destroy:composer event ---------                                                                      // 8453
    dom.observe(iframe, "DOMNodeRemoved", function() {                                                                 // 8454
      clearInterval(domNodeRemovedInterval);                                                                           // 8455
      that.parent.fire("destroy:composer");                                                                            // 8456
    });                                                                                                                // 8457
                                                                                                                       // 8458
    // DOMNodeRemoved event is not supported in IE 8                                                                   // 8459
    var domNodeRemovedInterval = setInterval(function() {                                                              // 8460
      if (!dom.contains(document.documentElement, iframe)) {                                                           // 8461
        clearInterval(domNodeRemovedInterval);                                                                         // 8462
        that.parent.fire("destroy:composer");                                                                          // 8463
      }                                                                                                                // 8464
    }, 250);                                                                                                           // 8465
                                                                                                                       // 8466
                                                                                                                       // 8467
    // --------- Focus & blur logic ---------                                                                          // 8468
    dom.observe(focusBlurElement, "focus", function() {                                                                // 8469
      that.parent.fire("focus").fire("focus:composer");                                                                // 8470
                                                                                                                       // 8471
      // Delay storing of state until all focus handler are fired                                                      // 8472
      // especially the one which resets the placeholder                                                               // 8473
      setTimeout(function() { state = that.getValue(); }, 0);                                                          // 8474
    });                                                                                                                // 8475
                                                                                                                       // 8476
    dom.observe(focusBlurElement, "blur", function() {                                                                 // 8477
      if (state !== that.getValue()) {                                                                                 // 8478
        that.parent.fire("change").fire("change:composer");                                                            // 8479
      }                                                                                                                // 8480
      that.parent.fire("blur").fire("blur:composer");                                                                  // 8481
    });                                                                                                                // 8482
                                                                                                                       // 8483
    if (wysihtml5.browser.isIos()) {                                                                                   // 8484
      // When on iPad/iPhone/IPod after clicking outside of editor, the editor loses focus                             // 8485
      // but the UI still acts as if the editor has focus (blinking caret and onscreen keyboard visible)               // 8486
      // We prevent that by focusing a temporary input element which immediately loses focus                           // 8487
      dom.observe(element, "blur", function() {                                                                        // 8488
        var input = element.ownerDocument.createElement("input"),                                                      // 8489
            originalScrollTop = document.documentElement.scrollTop || document.body.scrollTop,                         // 8490
            originalScrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;                      // 8491
        try {                                                                                                          // 8492
          that.selection.insertNode(input);                                                                            // 8493
        } catch(e) {                                                                                                   // 8494
          element.appendChild(input);                                                                                  // 8495
        }                                                                                                              // 8496
        input.focus();                                                                                                 // 8497
        input.parentNode.removeChild(input);                                                                           // 8498
                                                                                                                       // 8499
        window.scrollTo(originalScrollLeft, originalScrollTop);                                                        // 8500
      });                                                                                                              // 8501
    }                                                                                                                  // 8502
                                                                                                                       // 8503
    // --------- Drag & Drop logic ---------                                                                           // 8504
    dom.observe(element, "dragenter", function() {                                                                     // 8505
      that.parent.fire("unset_placeholder");                                                                           // 8506
    });                                                                                                                // 8507
                                                                                                                       // 8508
    if (browser.firesOnDropOnlyWhenOnDragOverIsCancelled()) {                                                          // 8509
      dom.observe(element, ["dragover", "dragenter"], function(event) {                                                // 8510
        event.preventDefault();                                                                                        // 8511
      });                                                                                                              // 8512
    }                                                                                                                  // 8513
                                                                                                                       // 8514
    dom.observe(element, pasteEvents, function(event) {                                                                // 8515
      var dataTransfer = event.dataTransfer,                                                                           // 8516
          data;                                                                                                        // 8517
                                                                                                                       // 8518
      if (dataTransfer && browser.supportsDataTransfer()) {                                                            // 8519
        data = dataTransfer.getData("text/html") || dataTransfer.getData("text/plain");                                // 8520
      }                                                                                                                // 8521
      if (data) {                                                                                                      // 8522
        element.focus();                                                                                               // 8523
        that.commands.exec("insertHTML", data);                                                                        // 8524
        that.parent.fire("paste").fire("paste:composer");                                                              // 8525
        event.stopPropagation();                                                                                       // 8526
        event.preventDefault();                                                                                        // 8527
      } else {                                                                                                         // 8528
        setTimeout(function() {                                                                                        // 8529
          that.parent.fire("paste").fire("paste:composer");                                                            // 8530
        }, 0);                                                                                                         // 8531
      }                                                                                                                // 8532
    });                                                                                                                // 8533
                                                                                                                       // 8534
    // --------- neword event ---------                                                                                // 8535
    dom.observe(element, "keyup", function(event) {                                                                    // 8536
      var keyCode = event.keyCode;                                                                                     // 8537
      if (keyCode === wysihtml5.SPACE_KEY || keyCode === wysihtml5.ENTER_KEY) {                                        // 8538
        that.parent.fire("newword:composer");                                                                          // 8539
      }                                                                                                                // 8540
    });                                                                                                                // 8541
                                                                                                                       // 8542
    this.parent.observe("paste:composer", function() {                                                                 // 8543
      setTimeout(function() { that.parent.fire("newword:composer"); }, 0);                                             // 8544
    });                                                                                                                // 8545
                                                                                                                       // 8546
    // --------- Make sure that images are selected when clicking on them ---------                                    // 8547
    if (!browser.canSelectImagesInContentEditable()) {                                                                 // 8548
      dom.observe(element, "mousedown", function(event) {                                                              // 8549
        var target = event.target;                                                                                     // 8550
        if (target.nodeName === "IMG") {                                                                               // 8551
          that.selection.selectNode(target);                                                                           // 8552
          event.preventDefault();                                                                                      // 8553
        }                                                                                                              // 8554
      });                                                                                                              // 8555
    }                                                                                                                  // 8556
                                                                                                                       // 8557
    // --------- Shortcut logic ---------                                                                              // 8558
    dom.observe(element, "keydown", function(event) {                                                                  // 8559
      var keyCode  = event.keyCode,                                                                                    // 8560
          command  = shortcuts[keyCode];                                                                               // 8561
      if ((event.ctrlKey || event.metaKey) && !event.altKey && command) {                                              // 8562
        that.commands.exec(command);                                                                                   // 8563
        event.preventDefault();                                                                                        // 8564
      }                                                                                                                // 8565
    });                                                                                                                // 8566
                                                                                                                       // 8567
    // --------- Make sure that when pressing backspace/delete on selected images deletes the image and it's anchor ---------
    dom.observe(element, "keydown", function(event) {                                                                  // 8569
      var target  = that.selection.getSelectedNode(true),                                                              // 8570
          keyCode = event.keyCode,                                                                                     // 8571
          parent;                                                                                                      // 8572
      if (target && target.nodeName === "IMG" && (keyCode === wysihtml5.BACKSPACE_KEY || keyCode === wysihtml5.DELETE_KEY)) { // 8 => backspace, 46 => delete
        parent = target.parentNode;                                                                                    // 8574
        // delete the <img>                                                                                            // 8575
        parent.removeChild(target);                                                                                    // 8576
        // and it's parent <a> too if it hasn't got any other child nodes                                              // 8577
        if (parent.nodeName === "A" && !parent.firstChild) {                                                           // 8578
          parent.parentNode.removeChild(parent);                                                                       // 8579
        }                                                                                                              // 8580
                                                                                                                       // 8581
        setTimeout(function() { wysihtml5.quirks.redraw(element); }, 0);                                               // 8582
        event.preventDefault();                                                                                        // 8583
      }                                                                                                                // 8584
    });                                                                                                                // 8585
                                                                                                                       // 8586
    // --------- Show url in tooltip when hovering links or images ---------                                           // 8587
    var titlePrefixes = {                                                                                              // 8588
      IMG: "Image: ",                                                                                                  // 8589
      A:   "Link: "                                                                                                    // 8590
    };                                                                                                                 // 8591
                                                                                                                       // 8592
    dom.observe(element, "mouseover", function(event) {                                                                // 8593
      var target   = event.target,                                                                                     // 8594
          nodeName = target.nodeName,                                                                                  // 8595
          title;                                                                                                       // 8596
      if (nodeName !== "A" && nodeName !== "IMG") {                                                                    // 8597
        return;                                                                                                        // 8598
      }                                                                                                                // 8599
      var hasTitle = target.hasAttribute("title");                                                                     // 8600
      if(!hasTitle){                                                                                                   // 8601
        title = titlePrefixes[nodeName] + (target.getAttribute("href") || target.getAttribute("src"));                 // 8602
        target.setAttribute("title", title);                                                                           // 8603
      }                                                                                                                // 8604
    });                                                                                                                // 8605
  };                                                                                                                   // 8606
})(wysihtml5);/**                                                                                                      // 8607
 * Class that takes care that the value of the composer and the textarea is always in sync                             // 8608
 */                                                                                                                    // 8609
(function(wysihtml5) {                                                                                                 // 8610
  var INTERVAL = 400;                                                                                                  // 8611
                                                                                                                       // 8612
  wysihtml5.views.Synchronizer = Base.extend(                                                                          // 8613
    /** @scope wysihtml5.views.Synchronizer.prototype */ {                                                             // 8614
                                                                                                                       // 8615
    constructor: function(editor, textarea, composer) {                                                                // 8616
      this.editor   = editor;                                                                                          // 8617
      this.textarea = textarea;                                                                                        // 8618
      this.composer = composer;                                                                                        // 8619
                                                                                                                       // 8620
      this._observe();                                                                                                 // 8621
    },                                                                                                                 // 8622
                                                                                                                       // 8623
    /**                                                                                                                // 8624
     * Sync html from composer to textarea                                                                             // 8625
     * Takes care of placeholders                                                                                      // 8626
     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the textarea     // 8627
     */                                                                                                                // 8628
    fromComposerToTextarea: function(shouldParseHtml) {                                                                // 8629
      this.textarea.setValue(wysihtml5.lang.string(this.composer.getValue()).trim(), shouldParseHtml);                 // 8630
    },                                                                                                                 // 8631
                                                                                                                       // 8632
    /**                                                                                                                // 8633
     * Sync value of textarea to composer                                                                              // 8634
     * Takes care of placeholders                                                                                      // 8635
     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the composer     // 8636
     */                                                                                                                // 8637
    fromTextareaToComposer: function(shouldParseHtml) {                                                                // 8638
      var textareaValue = this.textarea.getValue();                                                                    // 8639
      if (textareaValue) {                                                                                             // 8640
        this.composer.setValue(textareaValue, shouldParseHtml);                                                        // 8641
      } else {                                                                                                         // 8642
        this.composer.clear();                                                                                         // 8643
        this.editor.fire("set_placeholder");                                                                           // 8644
      }                                                                                                                // 8645
    },                                                                                                                 // 8646
                                                                                                                       // 8647
    /**                                                                                                                // 8648
     * Invoke syncing based on view state                                                                              // 8649
     * @param {Boolean} shouldParseHtml Whether the html should be sanitized before inserting it into the composer/textarea
     */                                                                                                                // 8651
    sync: function(shouldParseHtml) {                                                                                  // 8652
      if (this.editor.currentView.name === "textarea") {                                                               // 8653
        this.fromTextareaToComposer(shouldParseHtml);                                                                  // 8654
      } else {                                                                                                         // 8655
        this.fromComposerToTextarea(shouldParseHtml);                                                                  // 8656
      }                                                                                                                // 8657
    },                                                                                                                 // 8658
                                                                                                                       // 8659
    /**                                                                                                                // 8660
     * Initializes interval-based syncing                                                                              // 8661
     * also makes sure that on-submit the composer's content is synced with the textarea                               // 8662
     * immediately when the form gets submitted                                                                        // 8663
     */                                                                                                                // 8664
    _observe: function() {                                                                                             // 8665
      var interval,                                                                                                    // 8666
          that          = this,                                                                                        // 8667
          form          = this.textarea.element.form,                                                                  // 8668
          startInterval = function() {                                                                                 // 8669
            interval = setInterval(function() { that.fromComposerToTextarea(); }, INTERVAL);                           // 8670
          },                                                                                                           // 8671
          stopInterval  = function() {                                                                                 // 8672
            clearInterval(interval);                                                                                   // 8673
            interval = null;                                                                                           // 8674
          };                                                                                                           // 8675
                                                                                                                       // 8676
      startInterval();                                                                                                 // 8677
                                                                                                                       // 8678
      if (form) {                                                                                                      // 8679
        // If the textarea is in a form make sure that after onreset and onsubmit the composer                         // 8680
        // has the correct state                                                                                       // 8681
        wysihtml5.dom.observe(form, "submit", function() {                                                             // 8682
          that.sync(true);                                                                                             // 8683
        });                                                                                                            // 8684
        wysihtml5.dom.observe(form, "reset", function() {                                                              // 8685
          setTimeout(function() { that.fromTextareaToComposer(); }, 0);                                                // 8686
        });                                                                                                            // 8687
      }                                                                                                                // 8688
                                                                                                                       // 8689
      this.editor.observe("change_view", function(view) {                                                              // 8690
        if (view === "composer" && !interval) {                                                                        // 8691
          that.fromTextareaToComposer(true);                                                                           // 8692
          startInterval();                                                                                             // 8693
        } else if (view === "textarea") {                                                                              // 8694
          that.fromComposerToTextarea(true);                                                                           // 8695
          stopInterval();                                                                                              // 8696
        }                                                                                                              // 8697
      });                                                                                                              // 8698
                                                                                                                       // 8699
      this.editor.observe("destroy:composer", stopInterval);                                                           // 8700
    }                                                                                                                  // 8701
  });                                                                                                                  // 8702
})(wysihtml5);                                                                                                         // 8703
wysihtml5.views.Textarea = wysihtml5.views.View.extend(                                                                // 8704
  /** @scope wysihtml5.views.Textarea.prototype */ {                                                                   // 8705
  name: "textarea",                                                                                                    // 8706
                                                                                                                       // 8707
  constructor: function(parent, textareaElement, config) {                                                             // 8708
    this.base(parent, textareaElement, config);                                                                        // 8709
                                                                                                                       // 8710
    this._observe();                                                                                                   // 8711
  },                                                                                                                   // 8712
                                                                                                                       // 8713
  clear: function() {                                                                                                  // 8714
    this.element.value = "";                                                                                           // 8715
  },                                                                                                                   // 8716
                                                                                                                       // 8717
  getValue: function(parse) {                                                                                          // 8718
    var value = this.isEmpty() ? "" : this.element.value;                                                              // 8719
    if (parse) {                                                                                                       // 8720
      value = this.parent.parse(value);                                                                                // 8721
    }                                                                                                                  // 8722
    return value;                                                                                                      // 8723
  },                                                                                                                   // 8724
                                                                                                                       // 8725
  setValue: function(html, parse) {                                                                                    // 8726
    if (parse) {                                                                                                       // 8727
      html = this.parent.parse(html);                                                                                  // 8728
    }                                                                                                                  // 8729
    this.element.value = html;                                                                                         // 8730
  },                                                                                                                   // 8731
                                                                                                                       // 8732
  hasPlaceholderSet: function() {                                                                                      // 8733
    var supportsPlaceholder = wysihtml5.browser.supportsPlaceholderAttributeOn(this.element),                          // 8734
        placeholderText     = this.element.getAttribute("placeholder") || null,                                        // 8735
        value               = this.element.value,                                                                      // 8736
        isEmpty             = !value;                                                                                  // 8737
    return (supportsPlaceholder && isEmpty) || (value === placeholderText);                                            // 8738
  },                                                                                                                   // 8739
                                                                                                                       // 8740
  isEmpty: function() {                                                                                                // 8741
    return !wysihtml5.lang.string(this.element.value).trim() || this.hasPlaceholderSet();                              // 8742
  },                                                                                                                   // 8743
                                                                                                                       // 8744
  _observe: function() {                                                                                               // 8745
    var element = this.element,                                                                                        // 8746
        parent  = this.parent,                                                                                         // 8747
        eventMapping = {                                                                                               // 8748
          focusin:  "focus",                                                                                           // 8749
          focusout: "blur"                                                                                             // 8750
        },                                                                                                             // 8751
        /**                                                                                                            // 8752
         * Calling focus() or blur() on an element doesn't synchronously trigger the attached focus/blur events        // 8753
         * This is the case for focusin and focusout, so let's use them whenever possible, kkthxbai                    // 8754
         */                                                                                                            // 8755
        events = wysihtml5.browser.supportsEvent("focusin") ? ["focusin", "focusout", "change"] : ["focus", "blur", "change"];
                                                                                                                       // 8757
    parent.observe("beforeload", function() {                                                                          // 8758
      wysihtml5.dom.observe(element, events, function(event) {                                                         // 8759
        var eventName = eventMapping[event.type] || event.type;                                                        // 8760
        parent.fire(eventName).fire(eventName + ":textarea");                                                          // 8761
      });                                                                                                              // 8762
                                                                                                                       // 8763
      wysihtml5.dom.observe(element, ["paste", "drop"], function() {                                                   // 8764
        setTimeout(function() { parent.fire("paste").fire("paste:textarea"); }, 0);                                    // 8765
      });                                                                                                              // 8766
    });                                                                                                                // 8767
  }                                                                                                                    // 8768
});/**                                                                                                                 // 8769
 * Toolbar Dialog                                                                                                      // 8770
 *                                                                                                                     // 8771
 * @param {Element} link The toolbar link which causes the dialog to show up                                           // 8772
 * @param {Element} container The dialog container                                                                     // 8773
 *                                                                                                                     // 8774
 * @example                                                                                                            // 8775
 *    <!-- Toolbar link -->                                                                                            // 8776
 *    <a data-wysihtml5-command="insertImage">insert an image</a>                                                      // 8777
 *                                                                                                                     // 8778
 *    <!-- Dialog -->                                                                                                  // 8779
 *    <div data-wysihtml5-dialog="insertImage" style="display: none;">                                                 // 8780
 *      <label>                                                                                                        // 8781
 *        URL: <input data-wysihtml5-dialog-field="src" value="http://">                                               // 8782
 *      </label>                                                                                                       // 8783
 *      <label>                                                                                                        // 8784
 *        Alternative text: <input data-wysihtml5-dialog-field="alt" value="">                                         // 8785
 *      </label>                                                                                                       // 8786
 *    </div>                                                                                                           // 8787
 *                                                                                                                     // 8788
 *    <script>                                                                                                         // 8789
 *      var dialog = new wysihtml5.toolbar.Dialog(                                                                     // 8790
 *        document.querySelector("[data-wysihtml5-command='insertImage']"),                                            // 8791
 *        document.querySelector("[data-wysihtml5-dialog='insertImage']")                                              // 8792
 *      );                                                                                                             // 8793
 *      dialog.observe("save", function(attributes) {                                                                  // 8794
 *        // do something                                                                                              // 8795
 *      });                                                                                                            // 8796
 *    </script>                                                                                                        // 8797
 */                                                                                                                    // 8798
(function(wysihtml5) {                                                                                                 // 8799
  var dom                     = wysihtml5.dom,                                                                         // 8800
      CLASS_NAME_OPENED       = "wysihtml5-command-dialog-opened",                                                     // 8801
      SELECTOR_FORM_ELEMENTS  = "input, select, textarea",                                                             // 8802
      SELECTOR_FIELDS         = "[data-wysihtml5-dialog-field]",                                                       // 8803
      ATTRIBUTE_FIELDS        = "data-wysihtml5-dialog-field";                                                         // 8804
                                                                                                                       // 8805
                                                                                                                       // 8806
  wysihtml5.toolbar.Dialog = wysihtml5.lang.Dispatcher.extend(                                                         // 8807
    /** @scope wysihtml5.toolbar.Dialog.prototype */ {                                                                 // 8808
    constructor: function(link, container) {                                                                           // 8809
      this.link       = link;                                                                                          // 8810
      this.container  = container;                                                                                     // 8811
    },                                                                                                                 // 8812
                                                                                                                       // 8813
    _observe: function() {                                                                                             // 8814
      if (this._observed) {                                                                                            // 8815
        return;                                                                                                        // 8816
      }                                                                                                                // 8817
                                                                                                                       // 8818
      var that = this,                                                                                                 // 8819
          callbackWrapper = function(event) {                                                                          // 8820
            var attributes = that._serialize();                                                                        // 8821
            if (attributes == that.elementToChange) {                                                                  // 8822
              that.fire("edit", attributes);                                                                           // 8823
            } else {                                                                                                   // 8824
              that.fire("save", attributes);                                                                           // 8825
            }                                                                                                          // 8826
            that.hide();                                                                                               // 8827
            event.preventDefault();                                                                                    // 8828
            event.stopPropagation();                                                                                   // 8829
          };                                                                                                           // 8830
                                                                                                                       // 8831
      dom.observe(that.link, "click", function(event) {                                                                // 8832
        if (dom.hasClass(that.link, CLASS_NAME_OPENED)) {                                                              // 8833
          setTimeout(function() { that.hide(); }, 0);                                                                  // 8834
        }                                                                                                              // 8835
      });                                                                                                              // 8836
                                                                                                                       // 8837
      dom.observe(this.container, "keydown", function(event) {                                                         // 8838
        var keyCode = event.keyCode;                                                                                   // 8839
        if (keyCode === wysihtml5.ENTER_KEY) {                                                                         // 8840
          callbackWrapper(event);                                                                                      // 8841
        }                                                                                                              // 8842
        if (keyCode === wysihtml5.ESCAPE_KEY) {                                                                        // 8843
          that.hide();                                                                                                 // 8844
        }                                                                                                              // 8845
      });                                                                                                              // 8846
                                                                                                                       // 8847
      dom.delegate(this.container, "[data-wysihtml5-dialog-action=save]", "click", callbackWrapper);                   // 8848
                                                                                                                       // 8849
      dom.delegate(this.container, "[data-wysihtml5-dialog-action=cancel]", "click", function(event) {                 // 8850
        that.fire("cancel");                                                                                           // 8851
        that.hide();                                                                                                   // 8852
        event.preventDefault();                                                                                        // 8853
        event.stopPropagation();                                                                                       // 8854
      });                                                                                                              // 8855
                                                                                                                       // 8856
      var formElements  = this.container.querySelectorAll(SELECTOR_FORM_ELEMENTS),                                     // 8857
          i             = 0,                                                                                           // 8858
          length        = formElements.length,                                                                         // 8859
          _clearInterval = function() { clearInterval(that.interval); };                                               // 8860
      for (; i<length; i++) {                                                                                          // 8861
        dom.observe(formElements[i], "change", _clearInterval);                                                        // 8862
      }                                                                                                                // 8863
                                                                                                                       // 8864
      this._observed = true;                                                                                           // 8865
    },                                                                                                                 // 8866
                                                                                                                       // 8867
    /**                                                                                                                // 8868
     * Grabs all fields in the dialog and puts them in key=>value style in an object which                             // 8869
     * then gets returned                                                                                              // 8870
     */                                                                                                                // 8871
    _serialize: function() {                                                                                           // 8872
      var data    = this.elementToChange || {},                                                                        // 8873
          fields  = this.container.querySelectorAll(SELECTOR_FIELDS),                                                  // 8874
          length  = fields.length,                                                                                     // 8875
          i       = 0;                                                                                                 // 8876
      for (; i<length; i++) {                                                                                          // 8877
        data[fields[i].getAttribute(ATTRIBUTE_FIELDS)] = fields[i].value;                                              // 8878
      }                                                                                                                // 8879
      return data;                                                                                                     // 8880
    },                                                                                                                 // 8881
                                                                                                                       // 8882
    /**                                                                                                                // 8883
     * Takes the attributes of the "elementToChange"                                                                   // 8884
     * and inserts them in their corresponding dialog input fields                                                     // 8885
     *                                                                                                                 // 8886
     * Assume the "elementToChange" looks like this:                                                                   // 8887
     *    <a href="http://www.google.com" target="_blank">foo</a>                                                      // 8888
     *                                                                                                                 // 8889
     * and we have the following dialog:                                                                               // 8890
     *    <input type="text" data-wysihtml5-dialog-field="href" value="">                                              // 8891
     *    <input type="text" data-wysihtml5-dialog-field="target" value="">                                            // 8892
     *                                                                                                                 // 8893
     * after calling _interpolate() the dialog will look like this                                                     // 8894
     *    <input type="text" data-wysihtml5-dialog-field="href" value="http://www.google.com">                         // 8895
     *    <input type="text" data-wysihtml5-dialog-field="target" value="_blank">                                      // 8896
     *                                                                                                                 // 8897
     * Basically it adopted the attribute values into the corresponding input fields                                   // 8898
     *                                                                                                                 // 8899
     */                                                                                                                // 8900
    _interpolate: function(avoidHiddenFields) {                                                                        // 8901
      var field,                                                                                                       // 8902
          fieldName,                                                                                                   // 8903
          newValue,                                                                                                    // 8904
          focusedElement = document.querySelector(":focus"),                                                           // 8905
          fields         = this.container.querySelectorAll(SELECTOR_FIELDS),                                           // 8906
          length         = fields.length,                                                                              // 8907
          i              = 0;                                                                                          // 8908
      for (; i<length; i++) {                                                                                          // 8909
        field = fields[i];                                                                                             // 8910
                                                                                                                       // 8911
        // Never change elements where the user is currently typing in                                                 // 8912
        if (field === focusedElement) {                                                                                // 8913
          continue;                                                                                                    // 8914
        }                                                                                                              // 8915
                                                                                                                       // 8916
        // Don't update hidden fields                                                                                  // 8917
        // See https://github.com/xing/wysihtml5/pull/14                                                               // 8918
        if (avoidHiddenFields && field.type === "hidden") {                                                            // 8919
          continue;                                                                                                    // 8920
        }                                                                                                              // 8921
                                                                                                                       // 8922
        fieldName = field.getAttribute(ATTRIBUTE_FIELDS);                                                              // 8923
        newValue  = this.elementToChange ? (this.elementToChange[fieldName] || "") : field.defaultValue;               // 8924
        field.value = newValue;                                                                                        // 8925
      }                                                                                                                // 8926
    },                                                                                                                 // 8927
                                                                                                                       // 8928
    /**                                                                                                                // 8929
     * Show the dialog element                                                                                         // 8930
     */                                                                                                                // 8931
    show: function(elementToChange) {                                                                                  // 8932
      var that        = this,                                                                                          // 8933
          firstField  = this.container.querySelector(SELECTOR_FORM_ELEMENTS);                                          // 8934
      this.elementToChange = elementToChange;                                                                          // 8935
      this._observe();                                                                                                 // 8936
      this._interpolate();                                                                                             // 8937
      if (elementToChange) {                                                                                           // 8938
        this.interval = setInterval(function() { that._interpolate(true); }, 500);                                     // 8939
      }                                                                                                                // 8940
      dom.addClass(this.link, CLASS_NAME_OPENED);                                                                      // 8941
      this.container.style.display = "";                                                                               // 8942
      this.fire("show");                                                                                               // 8943
      if (firstField && !elementToChange) {                                                                            // 8944
        try {                                                                                                          // 8945
          firstField.focus();                                                                                          // 8946
        } catch(e) {}                                                                                                  // 8947
      }                                                                                                                // 8948
    },                                                                                                                 // 8949
                                                                                                                       // 8950
    /**                                                                                                                // 8951
     * Hide the dialog element                                                                                         // 8952
     */                                                                                                                // 8953
    hide: function() {                                                                                                 // 8954
      clearInterval(this.interval);                                                                                    // 8955
      this.elementToChange = null;                                                                                     // 8956
      dom.removeClass(this.link, CLASS_NAME_OPENED);                                                                   // 8957
      this.container.style.display = "none";                                                                           // 8958
      this.fire("hide");                                                                                               // 8959
    }                                                                                                                  // 8960
  });                                                                                                                  // 8961
})(wysihtml5);                                                                                                         // 8962
/**                                                                                                                    // 8963
 * Converts speech-to-text and inserts this into the editor                                                            // 8964
 * As of now (2011/03/25) this only is supported in Chrome >= 11                                                       // 8965
 *                                                                                                                     // 8966
 * Note that it sends the recorded audio to the google speech recognition api:                                         // 8967
 * http://stackoverflow.com/questions/4361826/does-chrome-have-buil-in-speech-recognition-for-input-type-text-x-webkit-speec
 *                                                                                                                     // 8969
 * Current HTML5 draft can be found here                                                                               // 8970
 * http://lists.w3.org/Archives/Public/public-xg-htmlspeech/2011Feb/att-0020/api-draft.html                            // 8971
 *                                                                                                                     // 8972
 * "Accessing Google Speech API Chrome 11"                                                                             // 8973
 * http://mikepultz.com/2011/03/accessing-google-speech-api-chrome-11/                                                 // 8974
 */                                                                                                                    // 8975
(function(wysihtml5) {                                                                                                 // 8976
  var dom = wysihtml5.dom;                                                                                             // 8977
                                                                                                                       // 8978
  var linkStyles = {                                                                                                   // 8979
    position: "relative"                                                                                               // 8980
  };                                                                                                                   // 8981
                                                                                                                       // 8982
  var wrapperStyles = {                                                                                                // 8983
    left:     0,                                                                                                       // 8984
    margin:   0,                                                                                                       // 8985
    opacity:  0,                                                                                                       // 8986
    overflow: "hidden",                                                                                                // 8987
    padding:  0,                                                                                                       // 8988
    position: "absolute",                                                                                              // 8989
    top:      0,                                                                                                       // 8990
    zIndex:   1                                                                                                        // 8991
  };                                                                                                                   // 8992
                                                                                                                       // 8993
  var inputStyles = {                                                                                                  // 8994
    cursor:     "inherit",                                                                                             // 8995
    fontSize:   "50px",                                                                                                // 8996
    height:     "50px",                                                                                                // 8997
    marginTop:  "-25px",                                                                                               // 8998
    outline:    0,                                                                                                     // 8999
    padding:    0,                                                                                                     // 9000
    position:   "absolute",                                                                                            // 9001
    right:      "-4px",                                                                                                // 9002
    top:        "50%"                                                                                                  // 9003
  };                                                                                                                   // 9004
                                                                                                                       // 9005
  var inputAttributes = {                                                                                              // 9006
    "x-webkit-speech": "",                                                                                             // 9007
    "speech":          ""                                                                                              // 9008
  };                                                                                                                   // 9009
                                                                                                                       // 9010
  wysihtml5.toolbar.Speech = function(parent, link) {                                                                  // 9011
    var input = document.createElement("input");                                                                       // 9012
    if (!wysihtml5.browser.supportsSpeechApiOn(input)) {                                                               // 9013
      link.style.display = "none";                                                                                     // 9014
      return;                                                                                                          // 9015
    }                                                                                                                  // 9016
                                                                                                                       // 9017
    var wrapper = document.createElement("div");                                                                       // 9018
                                                                                                                       // 9019
    wysihtml5.lang.object(wrapperStyles).merge({                                                                       // 9020
      width:  link.offsetWidth  + "px",                                                                                // 9021
      height: link.offsetHeight + "px"                                                                                 // 9022
    });                                                                                                                // 9023
                                                                                                                       // 9024
    dom.insert(input).into(wrapper);                                                                                   // 9025
    dom.insert(wrapper).into(link);                                                                                    // 9026
                                                                                                                       // 9027
    dom.setStyles(inputStyles).on(input);                                                                              // 9028
    dom.setAttributes(inputAttributes).on(input)                                                                       // 9029
                                                                                                                       // 9030
    dom.setStyles(wrapperStyles).on(wrapper);                                                                          // 9031
    dom.setStyles(linkStyles).on(link);                                                                                // 9032
                                                                                                                       // 9033
    var eventName = "onwebkitspeechchange" in input ? "webkitspeechchange" : "speechchange";                           // 9034
    dom.observe(input, eventName, function() {                                                                         // 9035
      parent.execCommand("insertText", input.value);                                                                   // 9036
      input.value = "";                                                                                                // 9037
    });                                                                                                                // 9038
                                                                                                                       // 9039
    dom.observe(input, "click", function(event) {                                                                      // 9040
      if (dom.hasClass(link, "wysihtml5-command-disabled")) {                                                          // 9041
        event.preventDefault();                                                                                        // 9042
      }                                                                                                                // 9043
                                                                                                                       // 9044
      event.stopPropagation();                                                                                         // 9045
    });                                                                                                                // 9046
  };                                                                                                                   // 9047
})(wysihtml5);/**                                                                                                      // 9048
 * Toolbar                                                                                                             // 9049
 *                                                                                                                     // 9050
 * @param {Object} parent Reference to instance of Editor instance                                                     // 9051
 * @param {Element} container Reference to the toolbar container element                                               // 9052
 *                                                                                                                     // 9053
 * @example                                                                                                            // 9054
 *    <div id="toolbar">                                                                                               // 9055
 *      <a data-wysihtml5-command="createLink">insert link</a>                                                         // 9056
 *      <a data-wysihtml5-command="formatBlock" data-wysihtml5-command-value="h1">insert h1</a>                        // 9057
 *    </div>                                                                                                           // 9058
 *                                                                                                                     // 9059
 *    <script>                                                                                                         // 9060
 *      var toolbar = new wysihtml5.toolbar.Toolbar(editor, document.getElementById("toolbar"));                       // 9061
 *    </script>                                                                                                        // 9062
 */                                                                                                                    // 9063
(function(wysihtml5) {                                                                                                 // 9064
  var CLASS_NAME_COMMAND_DISABLED   = "wysihtml5-command-disabled",                                                    // 9065
      CLASS_NAME_COMMANDS_DISABLED  = "wysihtml5-commands-disabled",                                                   // 9066
      CLASS_NAME_COMMAND_ACTIVE     = "wysihtml5-command-active",                                                      // 9067
      CLASS_NAME_ACTION_ACTIVE      = "wysihtml5-action-active",                                                       // 9068
      dom                           = wysihtml5.dom;                                                                   // 9069
                                                                                                                       // 9070
  wysihtml5.toolbar.Toolbar = Base.extend(                                                                             // 9071
    /** @scope wysihtml5.toolbar.Toolbar.prototype */ {                                                                // 9072
    constructor: function(editor, container) {                                                                         // 9073
      this.editor     = editor;                                                                                        // 9074
      this.container  = typeof(container) === "string" ? document.getElementById(container) : container;               // 9075
      this.composer   = editor.composer;                                                                               // 9076
                                                                                                                       // 9077
      this._getLinks("command");                                                                                       // 9078
      this._getLinks("action");                                                                                        // 9079
                                                                                                                       // 9080
      this._observe();                                                                                                 // 9081
      this.show();                                                                                                     // 9082
                                                                                                                       // 9083
      var speechInputLinks  = this.container.querySelectorAll("[data-wysihtml5-command=insertSpeech]"),                // 9084
          length            = speechInputLinks.length,                                                                 // 9085
          i                 = 0;                                                                                       // 9086
      for (; i<length; i++) {                                                                                          // 9087
        new wysihtml5.toolbar.Speech(this, speechInputLinks[i]);                                                       // 9088
      }                                                                                                                // 9089
    },                                                                                                                 // 9090
                                                                                                                       // 9091
    _getLinks: function(type) {                                                                                        // 9092
      var links   = this[type + "Links"] = wysihtml5.lang.array(this.container.querySelectorAll("[data-wysihtml5-" + type + "]")).get(),
          length  = links.length,                                                                                      // 9094
          i       = 0,                                                                                                 // 9095
          mapping = this[type + "Mapping"] = {},                                                                       // 9096
          link,                                                                                                        // 9097
          group,                                                                                                       // 9098
          name,                                                                                                        // 9099
          value,                                                                                                       // 9100
          dialog;                                                                                                      // 9101
      for (; i<length; i++) {                                                                                          // 9102
        link    = links[i];                                                                                            // 9103
        name    = link.getAttribute("data-wysihtml5-" + type);                                                         // 9104
        value   = link.getAttribute("data-wysihtml5-" + type + "-value");                                              // 9105
        group   = this.container.querySelector("[data-wysihtml5-" + type + "-group='" + name + "']");                  // 9106
        dialog  = this._getDialog(link, name);                                                                         // 9107
                                                                                                                       // 9108
        mapping[name + ":" + value] = {                                                                                // 9109
          link:   link,                                                                                                // 9110
          group:  group,                                                                                               // 9111
          name:   name,                                                                                                // 9112
          value:  value,                                                                                               // 9113
          dialog: dialog,                                                                                              // 9114
          state:  false                                                                                                // 9115
        };                                                                                                             // 9116
      }                                                                                                                // 9117
    },                                                                                                                 // 9118
                                                                                                                       // 9119
    _getDialog: function(link, command) {                                                                              // 9120
      var that          = this,                                                                                        // 9121
          dialogElement = this.container.querySelector("[data-wysihtml5-dialog='" + command + "']"),                   // 9122
          dialog,                                                                                                      // 9123
          caretBookmark;                                                                                               // 9124
                                                                                                                       // 9125
      if (dialogElement) {                                                                                             // 9126
        dialog = new wysihtml5.toolbar.Dialog(link, dialogElement);                                                    // 9127
                                                                                                                       // 9128
        dialog.observe("show", function() {                                                                            // 9129
          caretBookmark = that.composer.selection.getBookmark();                                                       // 9130
                                                                                                                       // 9131
          that.editor.fire("show:dialog", { command: command, dialogContainer: dialogElement, commandLink: link });    // 9132
        });                                                                                                            // 9133
                                                                                                                       // 9134
        dialog.observe("save", function(attributes) {                                                                  // 9135
          if (caretBookmark) {                                                                                         // 9136
            that.composer.selection.setBookmark(caretBookmark);                                                        // 9137
          }                                                                                                            // 9138
          that._execCommand(command, attributes);                                                                      // 9139
                                                                                                                       // 9140
          that.editor.fire("save:dialog", { command: command, dialogContainer: dialogElement, commandLink: link });    // 9141
        });                                                                                                            // 9142
                                                                                                                       // 9143
        dialog.observe("cancel", function() {                                                                          // 9144
          that.editor.focus(false);                                                                                    // 9145
          that.editor.fire("cancel:dialog", { command: command, dialogContainer: dialogElement, commandLink: link });  // 9146
        });                                                                                                            // 9147
      }                                                                                                                // 9148
      return dialog;                                                                                                   // 9149
    },                                                                                                                 // 9150
                                                                                                                       // 9151
    /**                                                                                                                // 9152
     * @example                                                                                                        // 9153
     *    var toolbar = new wysihtml5.Toolbar();                                                                       // 9154
     *    // Insert a <blockquote> element or wrap current selection in <blockquote>                                   // 9155
     *    toolbar.execCommand("formatBlock", "blockquote");                                                            // 9156
     */                                                                                                                // 9157
    execCommand: function(command, commandValue) {                                                                     // 9158
      if (this.commandsDisabled) {                                                                                     // 9159
        return;                                                                                                        // 9160
      }                                                                                                                // 9161
                                                                                                                       // 9162
      var commandObj = this.commandMapping[command + ":" + commandValue];                                              // 9163
                                                                                                                       // 9164
      // Show dialog when available                                                                                    // 9165
      if (commandObj && commandObj.dialog && !commandObj.state) {                                                      // 9166
        commandObj.dialog.show();                                                                                      // 9167
      } else {                                                                                                         // 9168
        this._execCommand(command, commandValue);                                                                      // 9169
      }                                                                                                                // 9170
    },                                                                                                                 // 9171
                                                                                                                       // 9172
    _execCommand: function(command, commandValue) {                                                                    // 9173
      // Make sure that composer is focussed (false => don't move caret to the end)                                    // 9174
      this.editor.focus(false);                                                                                        // 9175
                                                                                                                       // 9176
      this.composer.commands.exec(command, commandValue);                                                              // 9177
      this._updateLinkStates();                                                                                        // 9178
    },                                                                                                                 // 9179
                                                                                                                       // 9180
    execAction: function(action) {                                                                                     // 9181
      var editor = this.editor;                                                                                        // 9182
      switch(action) {                                                                                                 // 9183
        case "change_view":                                                                                            // 9184
          if (editor.currentView === editor.textarea) {                                                                // 9185
            editor.fire("change_view", "composer");                                                                    // 9186
          } else {                                                                                                     // 9187
            editor.fire("change_view", "textarea");                                                                    // 9188
          }                                                                                                            // 9189
          break;                                                                                                       // 9190
      }                                                                                                                // 9191
    },                                                                                                                 // 9192
                                                                                                                       // 9193
    _observe: function() {                                                                                             // 9194
      var that      = this,                                                                                            // 9195
          editor    = this.editor,                                                                                     // 9196
          container = this.container,                                                                                  // 9197
          links     = this.commandLinks.concat(this.actionLinks),                                                      // 9198
          length    = links.length,                                                                                    // 9199
          i         = 0;                                                                                               // 9200
                                                                                                                       // 9201
      for (; i<length; i++) {                                                                                          // 9202
        // 'javascript:;' and unselectable=on Needed for IE, but done in all browsers to make sure that all get the same css applied
        // (you know, a:link { ... } doesn't match anchors with missing href attribute)                                // 9204
        dom.setAttributes({                                                                                            // 9205
          href:         "javascript:;",                                                                                // 9206
          unselectable: "on"                                                                                           // 9207
        }).on(links[i]);                                                                                               // 9208
      }                                                                                                                // 9209
                                                                                                                       // 9210
      // Needed for opera                                                                                              // 9211
      dom.delegate(container, "[data-wysihtml5-command]", "mousedown", function(event) { event.preventDefault(); });   // 9212
                                                                                                                       // 9213
      dom.delegate(container, "[data-wysihtml5-command]", "click", function(event) {                                   // 9214
        var link          = this,                                                                                      // 9215
            command       = link.getAttribute("data-wysihtml5-command"),                                               // 9216
            commandValue  = link.getAttribute("data-wysihtml5-command-value");                                         // 9217
        that.execCommand(command, commandValue);                                                                       // 9218
        event.preventDefault();                                                                                        // 9219
      });                                                                                                              // 9220
                                                                                                                       // 9221
      dom.delegate(container, "[data-wysihtml5-action]", "click", function(event) {                                    // 9222
        var action = this.getAttribute("data-wysihtml5-action");                                                       // 9223
        that.execAction(action);                                                                                       // 9224
        event.preventDefault();                                                                                        // 9225
      });                                                                                                              // 9226
                                                                                                                       // 9227
      editor.observe("focus:composer", function() {                                                                    // 9228
        that.bookmark = null;                                                                                          // 9229
        clearInterval(that.interval);                                                                                  // 9230
        that.interval = setInterval(function() { that._updateLinkStates(); }, 500);                                    // 9231
      });                                                                                                              // 9232
                                                                                                                       // 9233
      editor.observe("blur:composer", function() {                                                                     // 9234
        clearInterval(that.interval);                                                                                  // 9235
      });                                                                                                              // 9236
                                                                                                                       // 9237
      editor.observe("destroy:composer", function() {                                                                  // 9238
        clearInterval(that.interval);                                                                                  // 9239
      });                                                                                                              // 9240
                                                                                                                       // 9241
      editor.observe("change_view", function(currentView) {                                                            // 9242
        // Set timeout needed in order to let the blur event fire first                                                // 9243
        setTimeout(function() {                                                                                        // 9244
          that.commandsDisabled = (currentView !== "composer");                                                        // 9245
          that._updateLinkStates();                                                                                    // 9246
          if (that.commandsDisabled) {                                                                                 // 9247
            dom.addClass(container, CLASS_NAME_COMMANDS_DISABLED);                                                     // 9248
          } else {                                                                                                     // 9249
            dom.removeClass(container, CLASS_NAME_COMMANDS_DISABLED);                                                  // 9250
          }                                                                                                            // 9251
        }, 0);                                                                                                         // 9252
      });                                                                                                              // 9253
    },                                                                                                                 // 9254
                                                                                                                       // 9255
    _updateLinkStates: function() {                                                                                    // 9256
      var element           = this.composer.element,                                                                   // 9257
          commandMapping    = this.commandMapping,                                                                     // 9258
          actionMapping     = this.actionMapping,                                                                      // 9259
          i,                                                                                                           // 9260
          state,                                                                                                       // 9261
          action,                                                                                                      // 9262
          command;                                                                                                     // 9263
      // every millisecond counts... this is executed quite often                                                      // 9264
      for (i in commandMapping) {                                                                                      // 9265
        command = commandMapping[i];                                                                                   // 9266
        if (this.commandsDisabled) {                                                                                   // 9267
          state = false;                                                                                               // 9268
          dom.removeClass(command.link, CLASS_NAME_COMMAND_ACTIVE);                                                    // 9269
          if (command.group) {                                                                                         // 9270
            dom.removeClass(command.group, CLASS_NAME_COMMAND_ACTIVE);                                                 // 9271
          }                                                                                                            // 9272
          if (command.dialog) {                                                                                        // 9273
            command.dialog.hide();                                                                                     // 9274
          }                                                                                                            // 9275
        } else {                                                                                                       // 9276
          state = this.composer.commands.state(command.name, command.value);                                           // 9277
          if (wysihtml5.lang.object(state).isArray()) {                                                                // 9278
            // Grab first and only object/element in state array, otherwise convert state into boolean                 // 9279
            // to avoid showing a dialog for multiple selected elements which may have different attributes            // 9280
            // eg. when two links with different href are selected, the state will be an array consisting of both link elements
            // but the dialog interface can only update one                                                            // 9282
            state = state.length === 1 ? state[0] : true;                                                              // 9283
          }                                                                                                            // 9284
          dom.removeClass(command.link, CLASS_NAME_COMMAND_DISABLED);                                                  // 9285
          if (command.group) {                                                                                         // 9286
            dom.removeClass(command.group, CLASS_NAME_COMMAND_DISABLED);                                               // 9287
          }                                                                                                            // 9288
        }                                                                                                              // 9289
                                                                                                                       // 9290
        if (command.state === state) {                                                                                 // 9291
          continue;                                                                                                    // 9292
        }                                                                                                              // 9293
                                                                                                                       // 9294
        command.state = state;                                                                                         // 9295
        if (state) {                                                                                                   // 9296
          dom.addClass(command.link, CLASS_NAME_COMMAND_ACTIVE);                                                       // 9297
          if (command.group) {                                                                                         // 9298
            dom.addClass(command.group, CLASS_NAME_COMMAND_ACTIVE);                                                    // 9299
          }                                                                                                            // 9300
          if (command.dialog) {                                                                                        // 9301
            if (typeof(state) === "object") {                                                                          // 9302
              command.dialog.show(state);                                                                              // 9303
            } else {                                                                                                   // 9304
              command.dialog.hide();                                                                                   // 9305
            }                                                                                                          // 9306
          }                                                                                                            // 9307
        } else {                                                                                                       // 9308
          dom.removeClass(command.link, CLASS_NAME_COMMAND_ACTIVE);                                                    // 9309
          if (command.group) {                                                                                         // 9310
            dom.removeClass(command.group, CLASS_NAME_COMMAND_ACTIVE);                                                 // 9311
          }                                                                                                            // 9312
          if (command.dialog) {                                                                                        // 9313
            command.dialog.hide();                                                                                     // 9314
          }                                                                                                            // 9315
        }                                                                                                              // 9316
      }                                                                                                                // 9317
                                                                                                                       // 9318
      for (i in actionMapping) {                                                                                       // 9319
        action = actionMapping[i];                                                                                     // 9320
                                                                                                                       // 9321
        if (action.name === "change_view") {                                                                           // 9322
          action.state = this.editor.currentView === this.editor.textarea;                                             // 9323
          if (action.state) {                                                                                          // 9324
            dom.addClass(action.link, CLASS_NAME_ACTION_ACTIVE);                                                       // 9325
          } else {                                                                                                     // 9326
            dom.removeClass(action.link, CLASS_NAME_ACTION_ACTIVE);                                                    // 9327
          }                                                                                                            // 9328
        }                                                                                                              // 9329
      }                                                                                                                // 9330
    },                                                                                                                 // 9331
                                                                                                                       // 9332
    show: function() {                                                                                                 // 9333
      this.container.style.display = "";                                                                               // 9334
    },                                                                                                                 // 9335
                                                                                                                       // 9336
    hide: function() {                                                                                                 // 9337
      this.container.style.display = "none";                                                                           // 9338
    }                                                                                                                  // 9339
  });                                                                                                                  // 9340
                                                                                                                       // 9341
})(wysihtml5);                                                                                                         // 9342
/**                                                                                                                    // 9343
 * WYSIHTML5 Editor                                                                                                    // 9344
 *                                                                                                                     // 9345
 * @param {Element} textareaElement Reference to the textarea which should be turned into a rich text interface        // 9346
 * @param {Object} [config] See defaultConfig object below for explanation of each individual config option            // 9347
 *                                                                                                                     // 9348
 * @events                                                                                                             // 9349
 *    load                                                                                                             // 9350
 *    beforeload (for internal use only)                                                                               // 9351
 *    focus                                                                                                            // 9352
 *    focus:composer                                                                                                   // 9353
 *    focus:textarea                                                                                                   // 9354
 *    blur                                                                                                             // 9355
 *    blur:composer                                                                                                    // 9356
 *    blur:textarea                                                                                                    // 9357
 *    change                                                                                                           // 9358
 *    change:composer                                                                                                  // 9359
 *    change:textarea                                                                                                  // 9360
 *    paste                                                                                                            // 9361
 *    paste:composer                                                                                                   // 9362
 *    paste:textarea                                                                                                   // 9363
 *    newword:composer                                                                                                 // 9364
 *    destroy:composer                                                                                                 // 9365
 *    undo:composer                                                                                                    // 9366
 *    redo:composer                                                                                                    // 9367
 *    beforecommand:composer                                                                                           // 9368
 *    aftercommand:composer                                                                                            // 9369
 *    change_view                                                                                                      // 9370
 */                                                                                                                    // 9371
(function(wysihtml5) {                                                                                                 // 9372
  var undef;                                                                                                           // 9373
                                                                                                                       // 9374
  var defaultConfig = {                                                                                                // 9375
    // Give the editor a name, the name will also be set as class name on the iframe and on the iframe's body          // 9376
    name:                 undef,                                                                                       // 9377
    // Whether the editor should look like the textarea (by adopting styles)                                           // 9378
    style:                true,                                                                                        // 9379
    // Id of the toolbar element, pass falsey value if you don't want any toolbar logic                                // 9380
    toolbar:              undef,                                                                                       // 9381
    // Whether urls, entered by the user should automatically become clickable-links                                   // 9382
    autoLink:             true,                                                                                        // 9383
    // Object which includes parser rules to apply when html gets inserted via copy & paste                            // 9384
    // See parser_rules/*.js for examples                                                                              // 9385
    parserRules:          { tags: { br: {}, span: {}, div: {}, p: {} }, classes: {} },                                 // 9386
    // Parser method to use when the user inserts content via copy & paste                                             // 9387
    parser:               wysihtml5.dom.parse,                                                                         // 9388
    // Class name which should be set on the contentEditable element in the created sandbox iframe, can be styled via the 'stylesheets' option
    composerClassName:    "wysihtml5-editor",                                                                          // 9390
    // Class name to add to the body when the wysihtml5 editor is supported                                            // 9391
    bodyClassName:        "wysihtml5-supported",                                                                       // 9392
    // Array (or single string) of stylesheet urls to be loaded in the editor's iframe                                 // 9393
    stylesheets:          [],                                                                                          // 9394
    // Placeholder text to use, defaults to the placeholder attribute on the textarea element                          // 9395
    placeholderText:      undef,                                                                                       // 9396
    // Whether the composer should allow the user to manually resize images, tables etc.                               // 9397
    allowObjectResizing:  true,                                                                                        // 9398
    // Whether the rich text editor should be rendered on touch devices (wysihtml5 >= 0.3.0 comes with basic support for iOS 5)
    supportTouchDevices:  true                                                                                         // 9400
  };                                                                                                                   // 9401
                                                                                                                       // 9402
  wysihtml5.Editor = wysihtml5.lang.Dispatcher.extend(                                                                 // 9403
    /** @scope wysihtml5.Editor.prototype */ {                                                                         // 9404
    constructor: function(textareaElement, config) {                                                                   // 9405
      this.textareaElement  = typeof(textareaElement) === "string" ? document.getElementById(textareaElement) : textareaElement;
      this.config           = wysihtml5.lang.object({}).merge(defaultConfig).merge(config).get();                      // 9407
      this.textarea         = new wysihtml5.views.Textarea(this, this.textareaElement, this.config);                   // 9408
      this.currentView      = this.textarea;                                                                           // 9409
      this._isCompatible    = wysihtml5.browser.supported();                                                           // 9410
                                                                                                                       // 9411
      // Sort out unsupported/unwanted browsers here                                                                   // 9412
      if (!this._isCompatible || (!this.config.supportTouchDevices && wysihtml5.browser.isTouchDevice())) {            // 9413
        var that = this;                                                                                               // 9414
        setTimeout(function() { that.fire("beforeload").fire("load"); }, 0);                                           // 9415
        return;                                                                                                        // 9416
      }                                                                                                                // 9417
                                                                                                                       // 9418
      // Add class name to body, to indicate that the editor is supported                                              // 9419
      wysihtml5.dom.addClass(document.body, this.config.bodyClassName);                                                // 9420
                                                                                                                       // 9421
      this.composer = new wysihtml5.views.Composer(this, this.textareaElement, this.config);                           // 9422
      this.currentView = this.composer;                                                                                // 9423
                                                                                                                       // 9424
      if (typeof(this.config.parser) === "function") {                                                                 // 9425
        this._initParser();                                                                                            // 9426
      }                                                                                                                // 9427
                                                                                                                       // 9428
      this.observe("beforeload", function() {                                                                          // 9429
        this.synchronizer = new wysihtml5.views.Synchronizer(this, this.textarea, this.composer);                      // 9430
        if (this.config.toolbar) {                                                                                     // 9431
          this.toolbar = new wysihtml5.toolbar.Toolbar(this, this.config.toolbar);                                     // 9432
        }                                                                                                              // 9433
      });                                                                                                              // 9434
                                                                                                                       // 9435
      try {                                                                                                            // 9436
        console.log("Heya! This page is using wysihtml5 for rich text editing. Check out https://github.com/xing/wysihtml5");
      } catch(e) {}                                                                                                    // 9438
    },                                                                                                                 // 9439
                                                                                                                       // 9440
    isCompatible: function() {                                                                                         // 9441
      return this._isCompatible;                                                                                       // 9442
    },                                                                                                                 // 9443
                                                                                                                       // 9444
    clear: function() {                                                                                                // 9445
      this.currentView.clear();                                                                                        // 9446
      return this;                                                                                                     // 9447
    },                                                                                                                 // 9448
                                                                                                                       // 9449
    getValue: function(parse) {                                                                                        // 9450
      return this.currentView.getValue(parse);                                                                         // 9451
    },                                                                                                                 // 9452
                                                                                                                       // 9453
    setValue: function(html, parse) {                                                                                  // 9454
      if (!html) {                                                                                                     // 9455
        return this.clear();                                                                                           // 9456
      }                                                                                                                // 9457
      this.currentView.setValue(html, parse);                                                                          // 9458
      return this;                                                                                                     // 9459
    },                                                                                                                 // 9460
                                                                                                                       // 9461
    focus: function(setToEnd) {                                                                                        // 9462
      this.currentView.focus(setToEnd);                                                                                // 9463
      return this;                                                                                                     // 9464
    },                                                                                                                 // 9465
                                                                                                                       // 9466
    /**                                                                                                                // 9467
     * Deactivate editor (make it readonly)                                                                            // 9468
     */                                                                                                                // 9469
    disable: function() {                                                                                              // 9470
      this.currentView.disable();                                                                                      // 9471
      return this;                                                                                                     // 9472
    },                                                                                                                 // 9473
                                                                                                                       // 9474
    /**                                                                                                                // 9475
     * Activate editor                                                                                                 // 9476
     */                                                                                                                // 9477
    enable: function() {                                                                                               // 9478
      this.currentView.enable();                                                                                       // 9479
      return this;                                                                                                     // 9480
    },                                                                                                                 // 9481
                                                                                                                       // 9482
    isEmpty: function() {                                                                                              // 9483
      return this.currentView.isEmpty();                                                                               // 9484
    },                                                                                                                 // 9485
                                                                                                                       // 9486
    hasPlaceholderSet: function() {                                                                                    // 9487
      return this.currentView.hasPlaceholderSet();                                                                     // 9488
    },                                                                                                                 // 9489
                                                                                                                       // 9490
    parse: function(htmlOrElement) {                                                                                   // 9491
      var returnValue = this.config.parser(htmlOrElement, this.config.parserRules, this.composer.sandbox.getDocument(), true);
      if (typeof(htmlOrElement) === "object") {                                                                        // 9493
        wysihtml5.quirks.redraw(htmlOrElement);                                                                        // 9494
      }                                                                                                                // 9495
      return returnValue;                                                                                              // 9496
    },                                                                                                                 // 9497
                                                                                                                       // 9498
    /**                                                                                                                // 9499
     * Prepare html parser logic                                                                                       // 9500
     *  - Observes for paste and drop                                                                                  // 9501
     */                                                                                                                // 9502
    _initParser: function() {                                                                                          // 9503
      this.observe("paste:composer", function() {                                                                      // 9504
        var keepScrollPosition  = true,                                                                                // 9505
            that                = this;                                                                                // 9506
        that.composer.selection.executeAndRestore(function() {                                                         // 9507
          wysihtml5.quirks.cleanPastedHTML(that.composer.element);                                                     // 9508
          that.parse(that.composer.element);                                                                           // 9509
        }, keepScrollPosition);                                                                                        // 9510
      });                                                                                                              // 9511
                                                                                                                       // 9512
      this.observe("paste:textarea", function() {                                                                      // 9513
        var value   = this.textarea.getValue(),                                                                        // 9514
            newValue;                                                                                                  // 9515
        newValue = this.parse(value);                                                                                  // 9516
        this.textarea.setValue(newValue);                                                                              // 9517
      });                                                                                                              // 9518
    }                                                                                                                  // 9519
  });                                                                                                                  // 9520
})(wysihtml5);                                                                                                         // 9521
                                                                                                                       // 9522






/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/natestrauser:x-editable-bootstrap/lib/wysihtml5/bootstrap-wysihtml5-0.0.2/bootstrap-wysihtml5-0.0.2.js     //
// This file is in bare mode and is not in its own closure.                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function($, wysi) {                                                                                                   // 1
    "use strict";                                                                                                      // 2
                                                                                                                       // 3
    var tpl = {                                                                                                        // 4
        "font-styles": function(locale, options) {                                                                     // 5
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 6
            return "<li class='dropdown'>" +                                                                           // 7
              "<a class='btn dropdown-toggle" + size + "' data-toggle='dropdown' href='#'>" +                          // 8
              "<i class='icon-font'></i>&nbsp;<span class='current-font'>" + locale.font_styles.normal + "</span>&nbsp;<b class='caret'></b>" +
              "</a>" +                                                                                                 // 10
              "<ul class='dropdown-menu'>" +                                                                           // 11
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='div' tabindex='-1'>" + locale.font_styles.normal + "</a></li>" +
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h1' tabindex='-1'>" + locale.font_styles.h1 + "</a></li>" +
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h2' tabindex='-1'>" + locale.font_styles.h2 + "</a></li>" +
                "<li><a data-wysihtml5-command='formatBlock' data-wysihtml5-command-value='h3' tabindex='-1'>" + locale.font_styles.h3 + "</a></li>" +
              "</ul>" +                                                                                                // 16
            "</li>";                                                                                                   // 17
        },                                                                                                             // 18
                                                                                                                       // 19
        "emphasis": function(locale, options) {                                                                        // 20
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 21
            return "<li>" +                                                                                            // 22
              "<div class='btn-group'>" +                                                                              // 23
                "<a class='btn" + size + "' data-wysihtml5-command='bold' title='CTRL+B' tabindex='-1'>" + locale.emphasis.bold + "</a>" +
                "<a class='btn" + size + "' data-wysihtml5-command='italic' title='CTRL+I' tabindex='-1'>" + locale.emphasis.italic + "</a>" +
                "<a class='btn" + size + "' data-wysihtml5-command='underline' title='CTRL+U' tabindex='-1'>" + locale.emphasis.underline + "</a>" +
              "</div>" +                                                                                               // 27
            "</li>";                                                                                                   // 28
        },                                                                                                             // 29
                                                                                                                       // 30
        "lists": function(locale, options) {                                                                           // 31
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 32
            return "<li>" +                                                                                            // 33
              "<div class='btn-group'>" +                                                                              // 34
                "<a class='btn" + size + "' data-wysihtml5-command='insertUnorderedList' title='" + locale.lists.unordered + "' tabindex='-1'><i class='icon-list'></i></a>" +
                "<a class='btn" + size + "' data-wysihtml5-command='insertOrderedList' title='" + locale.lists.ordered + "' tabindex='-1'><i class='icon-th-list'></i></a>" +
                "<a class='btn" + size + "' data-wysihtml5-command='Outdent' title='" + locale.lists.outdent + "' tabindex='-1'><i class='icon-indent-right'></i></a>" +
                "<a class='btn" + size + "' data-wysihtml5-command='Indent' title='" + locale.lists.indent + "' tabindex='-1'><i class='icon-indent-left'></i></a>" +
              "</div>" +                                                                                               // 39
            "</li>";                                                                                                   // 40
        },                                                                                                             // 41
                                                                                                                       // 42
        "link": function(locale, options) {                                                                            // 43
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 44
            return "<li>" +                                                                                            // 45
              "<div class='bootstrap-wysihtml5-insert-link-modal modal hide fade'>" +                                  // 46
                "<div class='modal-header'>" +                                                                         // 47
                  "<a class='close' data-dismiss='modal'>&times;</a>" +                                                // 48
                  "<h3>" + locale.link.insert + "</h3>" +                                                              // 49
                "</div>" +                                                                                             // 50
                "<div class='modal-body'>" +                                                                           // 51
                  "<input value='http://' class='bootstrap-wysihtml5-insert-link-url input-xlarge'>" +                 // 52
                "</div>" +                                                                                             // 53
                "<div class='modal-footer'>" +                                                                         // 54
                  "<a href='#' class='btn' data-dismiss='modal'>" + locale.link.cancel + "</a>" +                      // 55
                  "<a href='#' class='btn btn-primary' data-dismiss='modal'>" + locale.link.insert + "</a>" +          // 56
                "</div>" +                                                                                             // 57
              "</div>" +                                                                                               // 58
              "<a class='btn" + size + "' data-wysihtml5-command='createLink' title='" + locale.link.insert + "' tabindex='-1'><i class='icon-share'></i></a>" +
            "</li>";                                                                                                   // 60
        },                                                                                                             // 61
                                                                                                                       // 62
        "image": function(locale, options) {                                                                           // 63
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 64
            return "<li>" +                                                                                            // 65
              "<div class='bootstrap-wysihtml5-insert-image-modal modal hide fade'>" +                                 // 66
                "<div class='modal-header'>" +                                                                         // 67
                  "<a class='close' data-dismiss='modal'>&times;</a>" +                                                // 68
                  "<h3>" + locale.image.insert + "</h3>" +                                                             // 69
                "</div>" +                                                                                             // 70
                "<div class='modal-body'>" +                                                                           // 71
                  "<input value='http://' class='bootstrap-wysihtml5-insert-image-url input-xlarge'>" +                // 72
                "</div>" +                                                                                             // 73
                "<div class='modal-footer'>" +                                                                         // 74
                  "<a href='#' class='btn' data-dismiss='modal'>" + locale.image.cancel + "</a>" +                     // 75
                  "<a href='#' class='btn btn-primary' data-dismiss='modal'>" + locale.image.insert + "</a>" +         // 76
                "</div>" +                                                                                             // 77
              "</div>" +                                                                                               // 78
              "<a class='btn" + size + "' data-wysihtml5-command='insertImage' title='" + locale.image.insert + "' tabindex='-1'><i class='icon-picture'></i></a>" +
            "</li>";                                                                                                   // 80
        },                                                                                                             // 81
                                                                                                                       // 82
        "html": function(locale, options) {                                                                            // 83
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 84
            return "<li>" +                                                                                            // 85
              "<div class='btn-group'>" +                                                                              // 86
                "<a class='btn" + size + "' data-wysihtml5-action='change_view' title='" + locale.html.edit + "' tabindex='-1'><i class='icon-pencil'></i></a>" +
              "</div>" +                                                                                               // 88
            "</li>";                                                                                                   // 89
        },                                                                                                             // 90
                                                                                                                       // 91
        "color": function(locale, options) {                                                                           // 92
            var size = (options && options.size) ? ' btn-'+options.size : '';                                          // 93
            return "<li class='dropdown'>" +                                                                           // 94
              "<a class='btn dropdown-toggle" + size + "' data-toggle='dropdown' href='#' tabindex='-1'>" +            // 95
                "<span class='current-color'>" + locale.colours.black + "</span>&nbsp;<b class='caret'></b>" +         // 96
              "</a>" +                                                                                                 // 97
              "<ul class='dropdown-menu'>" +                                                                           // 98
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='black'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='black'>" + locale.colours.black + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='silver'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='silver'>" + locale.colours.silver + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='gray'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='gray'>" + locale.colours.gray + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='maroon'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='maroon'>" + locale.colours.maroon + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='red'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='red'>" + locale.colours.red + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='purple'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='purple'>" + locale.colours.purple + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='green'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='green'>" + locale.colours.green + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='olive'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='olive'>" + locale.colours.olive + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='navy'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='navy'>" + locale.colours.navy + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='blue'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='blue'>" + locale.colours.blue + "</a></li>" +
                "<li><div class='wysihtml5-colors' data-wysihtml5-command-value='orange'></div><a class='wysihtml5-colors-title' data-wysihtml5-command='foreColor' data-wysihtml5-command-value='orange'>" + locale.colours.orange + "</a></li>" +
              "</ul>" +                                                                                                // 110
            "</li>";                                                                                                   // 111
        }                                                                                                              // 112
    };                                                                                                                 // 113
                                                                                                                       // 114
    var templates = function(key, locale, options) {                                                                   // 115
        return tpl[key](locale, options);                                                                              // 116
    };                                                                                                                 // 117
                                                                                                                       // 118
                                                                                                                       // 119
    var Wysihtml5 = function(el, options) {                                                                            // 120
        this.el = el;                                                                                                  // 121
        var toolbarOpts = options || defaultOptions;                                                                   // 122
        for(var t in toolbarOpts.customTemplates) {                                                                    // 123
          tpl[t] = toolbarOpts.customTemplates[t];                                                                     // 124
        }                                                                                                              // 125
        this.toolbar = this.createToolbar(el, toolbarOpts);                                                            // 126
        this.editor =  this.createEditor(options);                                                                     // 127
                                                                                                                       // 128
        window.editor = this.editor;                                                                                   // 129
                                                                                                                       // 130
        $('iframe.wysihtml5-sandbox').each(function(i, el){                                                            // 131
            $(el.contentWindow).off('focus.wysihtml5').on({                                                            // 132
                'focus.wysihtml5' : function(){                                                                        // 133
                    $('li.dropdown').removeClass('open');                                                              // 134
                }                                                                                                      // 135
            });                                                                                                        // 136
        });                                                                                                            // 137
    };                                                                                                                 // 138
                                                                                                                       // 139
    Wysihtml5.prototype = {                                                                                            // 140
                                                                                                                       // 141
        constructor: Wysihtml5,                                                                                        // 142
                                                                                                                       // 143
        createEditor: function(options) {                                                                              // 144
            options = options || {};                                                                                   // 145
                                                                                                                       // 146
            // Add the toolbar to a clone of the options object so multiple instances                                  // 147
            // of the WYISYWG don't break because "toolbar" is already defined                                         // 148
            options = $.extend(true, {}, options);                                                                     // 149
            options.toolbar = this.toolbar[0];                                                                         // 150
                                                                                                                       // 151
            var editor = new wysi.Editor(this.el[0], options);                                                         // 152
                                                                                                                       // 153
            if(options && options.events) {                                                                            // 154
                for(var eventName in options.events) {                                                                 // 155
                    editor.on(eventName, options.events[eventName]);                                                   // 156
                }                                                                                                      // 157
            }                                                                                                          // 158
            return editor;                                                                                             // 159
        },                                                                                                             // 160
                                                                                                                       // 161
        createToolbar: function(el, options) {                                                                         // 162
            var self = this;                                                                                           // 163
            var toolbar = $("<ul/>", {                                                                                 // 164
                'class' : "wysihtml5-toolbar",                                                                         // 165
                'style': "display:none"                                                                                // 166
            });                                                                                                        // 167
            var culture = options.locale || defaultOptions.locale || "en";                                             // 168
            for(var key in defaultOptions) {                                                                           // 169
                var value = false;                                                                                     // 170
                                                                                                                       // 171
                if(options[key] !== undefined) {                                                                       // 172
                    if(options[key] === true) {                                                                        // 173
                        value = true;                                                                                  // 174
                    }                                                                                                  // 175
                } else {                                                                                               // 176
                    value = defaultOptions[key];                                                                       // 177
                }                                                                                                      // 178
                                                                                                                       // 179
                if(value === true) {                                                                                   // 180
                    toolbar.append(templates(key, locale[culture], options));                                          // 181
                                                                                                                       // 182
                    if(key === "html") {                                                                               // 183
                        this.initHtml(toolbar);                                                                        // 184
                    }                                                                                                  // 185
                                                                                                                       // 186
                    if(key === "link") {                                                                               // 187
                        this.initInsertLink(toolbar);                                                                  // 188
                    }                                                                                                  // 189
                                                                                                                       // 190
                    if(key === "image") {                                                                              // 191
                        this.initInsertImage(toolbar);                                                                 // 192
                    }                                                                                                  // 193
                }                                                                                                      // 194
            }                                                                                                          // 195
                                                                                                                       // 196
            if(options.toolbar) {                                                                                      // 197
                for(key in options.toolbar) {                                                                          // 198
                    toolbar.append(options.toolbar[key]);                                                              // 199
                }                                                                                                      // 200
            }                                                                                                          // 201
                                                                                                                       // 202
            toolbar.find("a[data-wysihtml5-command='formatBlock']").click(function(e) {                                // 203
                var target = e.target || e.srcElement;                                                                 // 204
                var el = $(target);                                                                                    // 205
                self.toolbar.find('.current-font').text(el.html());                                                    // 206
            });                                                                                                        // 207
                                                                                                                       // 208
            toolbar.find("a[data-wysihtml5-command='foreColor']").click(function(e) {                                  // 209
                var target = e.target || e.srcElement;                                                                 // 210
                var el = $(target);                                                                                    // 211
                self.toolbar.find('.current-color').text(el.html());                                                   // 212
            });                                                                                                        // 213
                                                                                                                       // 214
            this.el.before(toolbar);                                                                                   // 215
                                                                                                                       // 216
            return toolbar;                                                                                            // 217
        },                                                                                                             // 218
                                                                                                                       // 219
        initHtml: function(toolbar) {                                                                                  // 220
            var changeViewSelector = "a[data-wysihtml5-action='change_view']";                                         // 221
            toolbar.find(changeViewSelector).click(function(e) {                                                       // 222
                toolbar.find('a.btn').not(changeViewSelector).toggleClass('disabled');                                 // 223
            });                                                                                                        // 224
        },                                                                                                             // 225
                                                                                                                       // 226
        initInsertImage: function(toolbar) {                                                                           // 227
            var self = this;                                                                                           // 228
            var insertImageModal = toolbar.find('.bootstrap-wysihtml5-insert-image-modal');                            // 229
            var urlInput = insertImageModal.find('.bootstrap-wysihtml5-insert-image-url');                             // 230
            var insertButton = insertImageModal.find('a.btn-primary');                                                 // 231
            var initialValue = urlInput.val();                                                                         // 232
            var caretBookmark;                                                                                         // 233
                                                                                                                       // 234
            var insertImage = function() {                                                                             // 235
                var url = urlInput.val();                                                                              // 236
                urlInput.val(initialValue);                                                                            // 237
                self.editor.currentView.element.focus();                                                               // 238
                if (caretBookmark) {                                                                                   // 239
                  self.editor.composer.selection.setBookmark(caretBookmark);                                           // 240
                  caretBookmark = null;                                                                                // 241
                }                                                                                                      // 242
                self.editor.composer.commands.exec("insertImage", url);                                                // 243
            };                                                                                                         // 244
                                                                                                                       // 245
            urlInput.keypress(function(e) {                                                                            // 246
                if(e.which == 13) {                                                                                    // 247
                    insertImage();                                                                                     // 248
                    insertImageModal.modal('hide');                                                                    // 249
                }                                                                                                      // 250
            });                                                                                                        // 251
                                                                                                                       // 252
            insertButton.click(insertImage);                                                                           // 253
                                                                                                                       // 254
            insertImageModal.on('shown', function() {                                                                  // 255
                urlInput.focus();                                                                                      // 256
            });                                                                                                        // 257
                                                                                                                       // 258
            insertImageModal.on('hide', function() {                                                                   // 259
                self.editor.currentView.element.focus();                                                               // 260
            });                                                                                                        // 261
                                                                                                                       // 262
            toolbar.find('a[data-wysihtml5-command=insertImage]').click(function() {                                   // 263
                var activeButton = $(this).hasClass("wysihtml5-command-active");                                       // 264
                                                                                                                       // 265
                if (!activeButton) {                                                                                   // 266
                    self.editor.currentView.element.focus(false);                                                      // 267
                    caretBookmark = self.editor.composer.selection.getBookmark();                                      // 268
                    insertImageModal.appendTo('body').modal('show');                                                   // 269
                    insertImageModal.on('click.dismiss.modal', '[data-dismiss="modal"]', function(e) {                 // 270
                        e.stopPropagation();                                                                           // 271
                    });                                                                                                // 272
                    return false;                                                                                      // 273
                }                                                                                                      // 274
                else {                                                                                                 // 275
                    return true;                                                                                       // 276
                }                                                                                                      // 277
            });                                                                                                        // 278
        },                                                                                                             // 279
                                                                                                                       // 280
        initInsertLink: function(toolbar) {                                                                            // 281
            var self = this;                                                                                           // 282
            var insertLinkModal = toolbar.find('.bootstrap-wysihtml5-insert-link-modal');                              // 283
            var urlInput = insertLinkModal.find('.bootstrap-wysihtml5-insert-link-url');                               // 284
            var insertButton = insertLinkModal.find('a.btn-primary');                                                  // 285
            var initialValue = urlInput.val();                                                                         // 286
            var caretBookmark;                                                                                         // 287
                                                                                                                       // 288
            var insertLink = function() {                                                                              // 289
                var url = urlInput.val();                                                                              // 290
                urlInput.val(initialValue);                                                                            // 291
                self.editor.currentView.element.focus();                                                               // 292
                if (caretBookmark) {                                                                                   // 293
                  self.editor.composer.selection.setBookmark(caretBookmark);                                           // 294
                  caretBookmark = null;                                                                                // 295
                }                                                                                                      // 296
                self.editor.composer.commands.exec("createLink", {                                                     // 297
                    href: url,                                                                                         // 298
                    target: "_blank",                                                                                  // 299
                    rel: "nofollow"                                                                                    // 300
                });                                                                                                    // 301
            };                                                                                                         // 302
            var pressedEnter = false;                                                                                  // 303
                                                                                                                       // 304
            urlInput.keypress(function(e) {                                                                            // 305
                if(e.which == 13) {                                                                                    // 306
                    insertLink();                                                                                      // 307
                    insertLinkModal.modal('hide');                                                                     // 308
                }                                                                                                      // 309
            });                                                                                                        // 310
                                                                                                                       // 311
            insertButton.click(insertLink);                                                                            // 312
                                                                                                                       // 313
            insertLinkModal.on('shown', function() {                                                                   // 314
                urlInput.focus();                                                                                      // 315
            });                                                                                                        // 316
                                                                                                                       // 317
            insertLinkModal.on('hide', function() {                                                                    // 318
                self.editor.currentView.element.focus();                                                               // 319
            });                                                                                                        // 320
                                                                                                                       // 321
            toolbar.find('a[data-wysihtml5-command=createLink]').click(function() {                                    // 322
                var activeButton = $(this).hasClass("wysihtml5-command-active");                                       // 323
                                                                                                                       // 324
                if (!activeButton) {                                                                                   // 325
                    self.editor.currentView.element.focus(false);                                                      // 326
                    caretBookmark = self.editor.composer.selection.getBookmark();                                      // 327
                    insertLinkModal.appendTo('body').modal('show');                                                    // 328
                    insertLinkModal.on('click.dismiss.modal', '[data-dismiss="modal"]', function(e) {                  // 329
                        e.stopPropagation();                                                                           // 330
                    });                                                                                                // 331
                    return false;                                                                                      // 332
                }                                                                                                      // 333
                else {                                                                                                 // 334
                    return true;                                                                                       // 335
                }                                                                                                      // 336
            });                                                                                                        // 337
        }                                                                                                              // 338
    };                                                                                                                 // 339
                                                                                                                       // 340
    // these define our public api                                                                                     // 341
    var methods = {                                                                                                    // 342
        resetDefaults: function() {                                                                                    // 343
            $.fn.wysihtml5.defaultOptions = $.extend(true, {}, $.fn.wysihtml5.defaultOptionsCache);                    // 344
        },                                                                                                             // 345
        bypassDefaults: function(options) {                                                                            // 346
            return this.each(function () {                                                                             // 347
                var $this = $(this);                                                                                   // 348
                $this.data('wysihtml5', new Wysihtml5($this, options));                                                // 349
            });                                                                                                        // 350
        },                                                                                                             // 351
        shallowExtend: function (options) {                                                                            // 352
            var settings = $.extend({}, $.fn.wysihtml5.defaultOptions, options || {});                                 // 353
            var that = this;                                                                                           // 354
            return methods.bypassDefaults.apply(that, [settings]);                                                     // 355
        },                                                                                                             // 356
        deepExtend: function(options) {                                                                                // 357
            var settings = $.extend(true, {}, $.fn.wysihtml5.defaultOptions, options || {});                           // 358
            var that = this;                                                                                           // 359
            return methods.bypassDefaults.apply(that, [settings]);                                                     // 360
        },                                                                                                             // 361
        init: function(options) {                                                                                      // 362
            var that = this;                                                                                           // 363
            return methods.shallowExtend.apply(that, [options]);                                                       // 364
        }                                                                                                              // 365
    };                                                                                                                 // 366
                                                                                                                       // 367
    $.fn.wysihtml5 = function ( method ) {                                                                             // 368
        if ( methods[method] ) {                                                                                       // 369
            return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));                           // 370
        } else if ( typeof method === 'object' || ! method ) {                                                         // 371
            return methods.init.apply( this, arguments );                                                              // 372
        } else {                                                                                                       // 373
            $.error( 'Method ' +  method + ' does not exist on jQuery.wysihtml5' );                                    // 374
        }                                                                                                              // 375
    };                                                                                                                 // 376
                                                                                                                       // 377
    $.fn.wysihtml5.Constructor = Wysihtml5;                                                                            // 378
                                                                                                                       // 379
    var defaultOptions = $.fn.wysihtml5.defaultOptions = {                                                             // 380
        "font-styles": true,                                                                                           // 381
        "color": false,                                                                                                // 382
        "emphasis": true,                                                                                              // 383
        "lists": true,                                                                                                 // 384
        "html": false,                                                                                                 // 385
        "link": true,                                                                                                  // 386
        "image": true,                                                                                                 // 387
        events: {},                                                                                                    // 388
        parserRules: {                                                                                                 // 389
            classes: {                                                                                                 // 390
                // (path_to_project/lib/css/wysiwyg-color.css)                                                         // 391
                "wysiwyg-color-silver" : 1,                                                                            // 392
                "wysiwyg-color-gray" : 1,                                                                              // 393
                "wysiwyg-color-white" : 1,                                                                             // 394
                "wysiwyg-color-maroon" : 1,                                                                            // 395
                "wysiwyg-color-red" : 1,                                                                               // 396
                "wysiwyg-color-purple" : 1,                                                                            // 397
                "wysiwyg-color-fuchsia" : 1,                                                                           // 398
                "wysiwyg-color-green" : 1,                                                                             // 399
                "wysiwyg-color-lime" : 1,                                                                              // 400
                "wysiwyg-color-olive" : 1,                                                                             // 401
                "wysiwyg-color-yellow" : 1,                                                                            // 402
                "wysiwyg-color-navy" : 1,                                                                              // 403
                "wysiwyg-color-blue" : 1,                                                                              // 404
                "wysiwyg-color-teal" : 1,                                                                              // 405
                "wysiwyg-color-aqua" : 1,                                                                              // 406
                "wysiwyg-color-orange" : 1                                                                             // 407
            },                                                                                                         // 408
            tags: {                                                                                                    // 409
                "b":  {},                                                                                              // 410
                "i":  {},                                                                                              // 411
                "br": {},                                                                                              // 412
                "ol": {},                                                                                              // 413
                "ul": {},                                                                                              // 414
                "li": {},                                                                                              // 415
                "h1": {},                                                                                              // 416
                "h2": {},                                                                                              // 417
                "h3": {},                                                                                              // 418
                "blockquote": {},                                                                                      // 419
                "u": 1,                                                                                                // 420
                "img": {                                                                                               // 421
                    "check_attributes": {                                                                              // 422
                        "width": "numbers",                                                                            // 423
                        "alt": "alt",                                                                                  // 424
                        "src": "url",                                                                                  // 425
                        "height": "numbers"                                                                            // 426
                    }                                                                                                  // 427
                },                                                                                                     // 428
                "a":  {                                                                                                // 429
                    set_attributes: {                                                                                  // 430
                        target: "_blank",                                                                              // 431
                        rel:    "nofollow"                                                                             // 432
                    },                                                                                                 // 433
                    check_attributes: {                                                                                // 434
                        href:   "url" // important to avoid XSS                                                        // 435
                    }                                                                                                  // 436
                },                                                                                                     // 437
                "span": 1,                                                                                             // 438
                "div": 1,                                                                                              // 439
                // to allow save and edit files with code tag hacks                                                    // 440
                "code": 1,                                                                                             // 441
                "pre": 1                                                                                               // 442
            }                                                                                                          // 443
        },                                                                                                             // 444
        stylesheets: ["./lib/css/wysiwyg-color.css"], // (path_to_project/lib/css/wysiwyg-color.css)                   // 445
        locale: "en"                                                                                                   // 446
    };                                                                                                                 // 447
                                                                                                                       // 448
    if (typeof $.fn.wysihtml5.defaultOptionsCache === 'undefined') {                                                   // 449
        $.fn.wysihtml5.defaultOptionsCache = $.extend(true, {}, $.fn.wysihtml5.defaultOptions);                        // 450
    }                                                                                                                  // 451
                                                                                                                       // 452
    var locale = $.fn.wysihtml5.locale = {                                                                             // 453
        en: {                                                                                                          // 454
            font_styles: {                                                                                             // 455
                normal: "Normal text",                                                                                 // 456
                h1: "Heading 1",                                                                                       // 457
                h2: "Heading 2",                                                                                       // 458
                h3: "Heading 3"                                                                                        // 459
            },                                                                                                         // 460
            emphasis: {                                                                                                // 461
                bold: "Bold",                                                                                          // 462
                italic: "Italic",                                                                                      // 463
                underline: "Underline"                                                                                 // 464
            },                                                                                                         // 465
            lists: {                                                                                                   // 466
                unordered: "Unordered list",                                                                           // 467
                ordered: "Ordered list",                                                                               // 468
                outdent: "Outdent",                                                                                    // 469
                indent: "Indent"                                                                                       // 470
            },                                                                                                         // 471
            link: {                                                                                                    // 472
                insert: "Insert link",                                                                                 // 473
                cancel: "Cancel"                                                                                       // 474
            },                                                                                                         // 475
            image: {                                                                                                   // 476
                insert: "Insert image",                                                                                // 477
                cancel: "Cancel"                                                                                       // 478
            },                                                                                                         // 479
            html: {                                                                                                    // 480
                edit: "Edit HTML"                                                                                      // 481
            },                                                                                                         // 482
            colours: {                                                                                                 // 483
                black: "Black",                                                                                        // 484
                silver: "Silver",                                                                                      // 485
                gray: "Grey",                                                                                          // 486
                maroon: "Maroon",                                                                                      // 487
                red: "Red",                                                                                            // 488
                purple: "Purple",                                                                                      // 489
                green: "Green",                                                                                        // 490
                olive: "Olive",                                                                                        // 491
                navy: "Navy",                                                                                          // 492
                blue: "Blue",                                                                                          // 493
                orange: "Orange"                                                                                       // 494
            }                                                                                                          // 495
        }                                                                                                              // 496
    };                                                                                                                 // 497
                                                                                                                       // 498
}(jQuery, wysihtml5);                                                                                                  // 499
                                                                                                                       // 500
